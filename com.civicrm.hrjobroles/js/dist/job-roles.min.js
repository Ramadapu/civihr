eval("/* eslint-env amd */\n\ndefine('job-roles/modules/job-roles.config',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('hrjobroles.config', ['hrjobroles.constants']).config(hrJobRolesConfig);\n\n  hrJobRolesConfig.$inject = [\n    '$httpProvider', '$logProvider', '$resourceProvider', '$routeProvider',\n    'settings'\n  ];\n\n  function hrJobRolesConfig ($httpProvider, $logProvider, $resourceProvider,\n    $routeProvider, settings) {\n    $logProvider.debugEnabled(settings.debug);\n\n    $routeProvider\n      .resolveForAll({\n        format: ['DateFormat', function (DateFormat) {\n          return DateFormat.getDateFormat();\n        }]\n      })\n      .when('/', {\n        templateUrl: settings.pathBaseUrl + settings.pathTpl + 'mainTemplate.html?v=1',\n        resolve: {},\n        controller: 'JobRolesController',\n        controllerAs: 'jobroles'\n      })\n      .otherwise({ redirectTo: '/' });\n\n    $resourceProvider.defaults.stripTrailingSlashes = false;\n    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n  }\n});\n\n//# sourceURL=/job-roles/modules/job-roles.config.js"),eval("/* eslint-env amd */\n/* globals location */\n\ndefine('job-roles/modules/job-roles.constants',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('hrjobroles.constants', [])\n    .constant('settings', {\n      classNamePrefix: 'hrjobroles-',\n      contactId: decodeURIComponent((new RegExp('[?|&]cid=([^&;]+?)(&|#|;|$)').exec(location.search) || [null, ''])[1].replace(/\\+/g, '%20')) || null,\n      debug: true,\n      pathApp: CRM.vars.hrjobroles.path,\n      pathRest: CRM.url('civicrm/ajax/rest'),\n      pathBaseUrl: CRM.vars.hrjobroles.baseURL + '/',\n      pathTpl: 'views/',\n      pathIncludeTpl: 'views/include/'\n    });\n});\n\n//# sourceURL=/job-roles/modules/job-roles.constants.js"),
eval("/* eslint-env amd */\n\ndefine('job-roles/controllers/job-roles.controller',[\n  'common/angular',\n  'common/lodash',\n  'common/moment'\n], function (angular, _, moment) {\n  'use strict';\n\n  JobRolesController.__name = 'JobRolesController';\n  JobRolesController.$inject = [\n    '$filter', '$log', '$q', '$rootElement', '$route', '$routeParams', '$scope',\n    '$timeout', '$uibModal', 'DOMEventTrigger', 'settings', 'HR_settings',\n    'dateValidation', 'filtersService', 'jobRoleService', 'pubSub'\n  ];\n\n  function JobRolesController ($filter, $log, $q, $rootElement, $route,\n    $routeParams, $scope, $timeout, $modal, DOMEventTrigger, settings,\n    hrSettings, dateValidation, filtersService, jobRoleService, pubSub) {\n    $log.debug('Controller: JobRolesController');\n\n    var formatDate = $filter('formatDate');\n    var fundersContacts = {};\n    var getActiveValues = $filter('getActiveValues');\n    var rolesType = ['funders', 'cost_centers'];\n    var vm = this;\n\n    vm.contactId = settings.contactId;\n    vm.format = hrSettings.DATE_FORMAT;\n    vm.loading = true;\n    vm.pastJobRoles = [];\n    vm.presentJobRoles = [];\n    vm.collapsedRows = []; // Tracks collapsed / expanded rows\n    vm.contactList = []; // Contact List IDs array to use for the select lists\n    vm.editData = {}; // Tracks edit data changes on the forms\n    vm.viewTab = []; // Tracks clicked tabs per each row\n    vm.CalendarShow = []; // As default hide the datepickers\n    vm.contractsData = []; // Store the contractsData\n    vm.DepartmentsData = {}; // Store the department types\n    vm.LevelsData = {}; // Store the level types\n    vm.LocationsData = {}; // Store the location types\n    vm.RegionsData = {}; // Store the region types\n      // Define the add new role URL\n    vm.addNewRoleUrl = settings.pathBaseUrl + settings.pathIncludeTpl + 'add_new_role.html';\n    vm.jobRolePanelUrl = settings.pathBaseUrl + settings.pathIncludeTpl + 'job_role_panel.html';\n      // Select list for Row Types (used for Funders and Cost Centers)\n    vm.rowTypes = {};\n    vm.rowTypes[0] = { id: 0, name: 'Fixed' };\n    vm.rowTypes[1] = { id: 1, name: '%' };\n\n    vm.addAdditionalRow = addAdditionalRow;\n    vm.addNewRole = addNewRole;\n    vm.cancelNewRole = cancelNewRole;\n    vm.changeTab = changeTab;\n    vm.checkIfDatesAreCustom = checkIfDatesAreCustom;\n    vm.checkNewRole = checkNewRole;\n    vm.collapseRow = collapseRow;\n    vm.deleteAdditionalRow = deleteAdditionalRow;\n    vm.dpOpen = dpOpen;\n    vm.getContactList = getContactList;\n    vm.getCostLabel = getCostLabel;\n    vm.initData = initData;\n    vm.isChanged = isChanged;\n    vm.isOpen = isOpen;\n    vm.isRowCollapsed = isRowCollapsed;\n    vm.isTab = isTab;\n    vm.onAfterSave = onAfterSave;\n    vm.onCancel = onCancel;\n    vm.onContractEdited = onContractEdited;\n    vm.onContractSelected = onContractSelected;\n    vm.open = open;\n    vm.removeRole = removeRole;\n    vm.saveNewRole = saveNewRole;\n    vm.select = select;\n    vm.showRowType = showRowType;\n    vm.showSave = showSave;\n    vm.status = '';\n    vm.today = today;\n    vm.updateAdditionalRowType = updateAdditionalRowType;\n    vm.updateRole = updateRole;\n    vm.validateRole = validateRole;\n    vm.validateTitle = validateTitle;\n\n    (function init () {\n      subcribeToEvents();\n      vm.today();\n\n      $q.all([\n        getOptionValues(),\n        getJobRolesList(vm.contactId),\n        vm.getContactList()\n      ])\n        .then(function () {\n          vm.loading = false;\n        });\n    }());\n\n    /**\n     * Add additional rows (funder or cost centres)\n     *\n     * @param {int} roleId\n     * @param {string} rowType\n     */\n    function addAdditionalRow (roleId, rowType) {\n      // Check if we have the array already\n      if (typeof vm.editData[roleId] === 'undefined') {\n        vm.editData[roleId] = {};\n      }\n\n      if (rowType === 'cost_centre') {\n        // Add cost centres\n        // Check if we have the array already\n        if (typeof vm.editData[roleId]['cost_centers'] === 'undefined' || !(vm.editData[roleId]['cost_centers'] instanceof Array)) {\n          vm.editData[roleId]['cost_centers'] = [];\n        }\n\n        vm.editData[roleId]['cost_centers'].push({\n          id: vm.editData[roleId]['cost_centers'].length + 1,\n          cost_centre_id: '',\n          type: '1',\n          percentage: '0',\n          amount: '0'\n        });\n      } else {\n        // As default add funder rows\n        // Check if we have the array already\n        if (typeof vm.editData[roleId]['funders'] === 'undefined' || !(vm.editData[roleId]['funders'] instanceof Array)) {\n          vm.editData[roleId]['funders'] = [];\n        }\n\n        vm.editData[roleId]['funders'].push({\n          id: vm.editData[roleId]['funders'].length + 1,\n          funder_id: '',\n          type: '1',\n          percentage: '0',\n          amount: '0'\n        });\n      }\n    }\n\n    /**\n     * Sets the add new job role form visibility\n     */\n    function addNewRole () {\n      vm.add_new = true;\n    }\n\n    /**\n     * Hides the add new job role form and removes any data added.\n     */\n    function cancelNewRole () {\n      vm.add_new = false;\n      delete vm.editData['new_role_id'];\n    }\n\n    /**\n     * Implement angular tabs\n     *\n     * @param  {int} rowId\n     * @param  {int} tabId\n     */\n    function changeTab (rowId, tabId) {\n      vm.viewTab[rowId] = tabId;\n    }\n\n    /**\n     * Checks if dates don't exist in any of contracts\n     * @param start\n     * @param end\n     * @returns {boolean}\n     */\n    function checkIfDatesAreCustom (start, end) {\n      if (isDateEmpty(start)) start = null;\n      if (isDateEmpty(end)) end = null;\n\n      var custom = true;\n\n      if (!start) return false;\n\n      angular.forEach(vm.contractsData, function (value) {\n        if (formatDate(start) === formatDate(value.start_date) &&\n          formatDate(end) === formatDate(value.end_date)) {\n          custom = false;\n        }\n      });\n\n      return custom;\n    }\n\n    /**\n     * Check if we allow to submit the form\n     * Rule -> Allow only if the minimum required data are filled\n     *\n     * @return {boolean}\n     */\n    function checkNewRole () {\n      return (typeof vm.editData['new_role_id'] === 'undefined' ||\n        typeof vm.editData['new_role_id']['title'] === 'undefined' ||\n        vm.editData['new_role_id']['title'] === '' ||\n        typeof vm.editData['new_role_id']['job_contract_id'] === 'undefined' ||\n        vm.editData['new_role_id']['job_contract_id'] === '');\n    }\n\n    /**\n     * Collapse the row or Expand when clicked\n     *\n     * @param  {int} rowId\n     */\n    function collapseRow (rowId) {\n      vm.collapsedRows[rowId] = !vm.collapsedRows[rowId];\n    }\n\n    /**\n     * Fetches the contract ids of the given contact\n     *\n     * @param {int} contactId\n     * @return {Promise} resolves with an array of contract ids\n     */\n    function contractIdsFromContact (contactId) {\n      return jobRoleService.getContracts(contactId).then(function (data) {\n        var jobContractIds = [];\n        var contractsData = {};\n\n        // If we have job contracts, try to get the job roles for the contract\n        for (var i = 0; i < data.count; i++) {\n          // Job contract IDs which will be passed to the \"getAllJobRoles\" service\n          jobContractIds.push(data.values[i]['id']);\n\n          var contract = {\n            id: data.values[i]['id'],\n            title: data.values[i]['title'],\n            start_date: data.values[i]['period_start_date'],\n            end_date: data.values[i]['period_end_date'],\n            status: vm.status,\n            is_current: data.values[i]['is_current'],\n            revisions: data.values[i]['revisions']\n          };\n\n          var optionalEndDate = formatDate(contract.end_date) || 'Unspecified';\n\n          contract.label = contract.title + ' (' + formatDate(contract.start_date) + ' - ' + optionalEndDate + ')';\n          contractsData[data.values[i]['id']] = contract;\n        }\n\n        // Store the ContractsData what we can reuse later\n        vm.contractsData = contractsData;\n        vm.job_contract_ids = jobContractIds;\n\n        return jobContractIds;\n      }, function (errorMessage) {\n        vm.error = errorMessage;\n      });\n    }\n\n    /**\n     * Parse dates so they can be correctly read by server.\n     *\n     * @param {string|Date} date\n     * @returns {string|null}\n     */\n    function convertDateToServerFormat (date) {\n      var dateString = formatDate(date, 'YYYY-MM-DD');\n\n      return dateString !== 'Unspecified' ? dateString : null;\n    }\n\n    /**\n     * Implements the \"createJobRole\" service\n     *\n     * @param  {Object} jobRolesData\n     * @return {Promise}\n     */\n    function createJobRole (jobRolesData) {\n      return jobRoleService.createJobRole(jobRolesData).then(function (data) {\n        return data;\n      }, function (errorMessage) {\n        vm.error = errorMessage;\n      });\n    }\n\n    /**\n     * Delete Additional rows (funder or cost centres)\n     *\n     * @param  {int} roleId\n     * @param  {string} rowType\n     * @param  {int} rowId\n     */\n    function deleteAdditionalRow (roleId, rowType, rowId) {\n      if (rowType === 'cost_centre') {\n        // Remove the cost centre row\n        vm.editData[roleId]['cost_centers'].splice(rowId, 1);\n      } else {\n        // Remove the funder row as default\n        vm.editData[roleId]['funders'].splice(rowId, 1);\n      }\n    }\n\n    /**\n     * Implements the \"deleteJobRole\" service\n     *\n     * @param  {int} jobRoleId\n     * @return {Promise}\n     */\n    function deleteJobRole (jobRoleId) {\n      return jobRoleService.deleteJobRole(jobRoleId).then(function (data) {\n        return data;\n      },\n      function (errorMessage) {\n        vm.error = errorMessage;\n      });\n    }\n\n    /**\n     *\n     * @param  {Object} $event\n     */\n    function dpOpen ($event) {\n      $event.preventDefault();\n      $event.stopPropagation();\n\n      vm.picker.opened = true;\n    }\n\n    /**\n     * Extracts, from each job role past and preset, the contact id of every funder\n     *\n     * It combines present and past job roles, make a list of the funder ids string,\n     * splits it by the \"|\" separator, and return only the non-null and unique values\n     *\n     * @return {Array} a list of ids\n     */\n    function extractFundersContactIds () {\n      return _(vm.presentJobRoles.concat(vm.pastJobRoles))\n        .map(function (jobRole) {\n          return jobRole.funder;\n        })\n        .thru(function (funderIds) {\n          return funderIds.join('').split('|');\n        })\n        .compact().uniq().value();\n    }\n\n    /**\n     * Filter the editData property to remove\n     * the funders/cost_centers entries which are empty\n     *\n     * @param  {string|int} roleId\n     * @param  {string} roleType\n     */\n    function filterEmptyData (roleId, roleType) {\n      if (vm.editData.hasOwnProperty(roleId)) {\n        if (roleType === 'funders') {\n          vm.editData[roleId][roleType] = filtersService.issetFunder(vm.editData[roleId][roleType]);\n        }\n\n        if (roleType === 'cost_centers') {\n          vm.editData[roleId][roleType] = filtersService.issetCostCentre(vm.editData[roleId][roleType]);\n        }\n      }\n    }\n\n    /**\n     * Sets the values of the given role's start and end date properties\n     * to the Date objects representing the given start and end dates\n     *\n     * @param {Object} role - The job role\n     * @param {Object} dates - An object with `start` and `end ` dates\n     * @param {Object} keys - Custom names of the role's start and end date properties\n     */\n    function formatRoleDates (role, dates, keys) {\n      keys = keys || { start: 'start_date', end: 'end_date' };\n\n      role[keys.start] = dates.start ? formatDate(dates.start, Date) : null;\n      role[keys.end] = dates.end ? formatDate(dates.end, Date) : null;\n    }\n\n    /**\n     * Get the contact list and store the data\n     *\n     * @param  {string} sortName\n     */\n    function getContactList (sortName) {\n      var successCallback = function (data) {\n        var contactList = [];\n        var i = 0;\n\n        if (data.is_error === 1) {\n          vm.message_type = 'alert-danger';\n          vm.message = 'Cannot get contact list!';\n        } else {\n          // Pass the contact list to the scope\n          for (; i < data.count; i++) {\n            contactList.push({\n              id: data.values[i]['id'],\n              sort_name: data.values[i]['sort_name']\n            });\n          }\n\n          // Store the ContactList as Array as typeahead needs array that we can reuse later\n          vm.contactList = contactList;\n        }\n\n        // Hide the message after some seconds\n        $timeout(function () {\n          vm.message = null;\n        }, 3000);\n      };\n\n      var errorCallback = function (errorMessage) {\n        vm.error = errorMessage;\n      };\n\n      return jobRoleService.getContactList(sortName).then(successCallback, errorCallback);\n    }\n\n    /**\n     * Get a contract with the given contractId\n     *\n     * @param {int} contractId\n     * @returns {object}\n     */\n    function getContractData (contractId) {\n      return vm.contractsData[contractId];\n    }\n\n    /**\n     *\n     * @param  {int} id\n     * @return {string}\n     */\n    function getCostLabel (id) {\n      var label = '';\n      angular.forEach(vm.CostCentreList, function (v, k) {\n        if (+v.id === +id) {\n          label = v.title;\n        }\n      });\n\n      return label;\n    }\n\n    /**\n     * Fetches from the API the contact data of all the funders of each job role\n     *\n     * @return {Promise}\n     *   resolves to an object, with the key as the contact id,\n     *   and the value as the contact data\n     */\n    function getFundersContacts () {\n      return jobRoleService.getContactList(null, extractFundersContactIds()).then(function (data) {\n        return _(data.values).map(function (contact) {\n          return contact;\n        })\n        .indexBy('contact_id')\n        .value();\n      });\n    }\n\n    /**\n     * Get job roles based on the passed Contact ID (refresh part of the page)\n     *\n     * @param {int} contactId\n     */\n    function getJobRolesList (contactId) {\n      var contractsPromise;\n\n      if (!vm.job_contract_ids) {\n        contractsPromise = contractIdsFromContact(contactId);\n      } else {\n        contractsPromise = $q.when(vm.job_contract_ids);\n      }\n\n      return contractsPromise.then(function (contractIds) {\n        return !!contractIds.length && jobRolesFromContracts(contractIds);\n      });\n    }\n\n    /**\n     *\n     */\n    function getOptionValues () {\n      // Set the option groups for which we want to get the values\n      var optionGroups = ['hrjc_department', 'hrjc_region', 'hrjc_location', 'hrjc_level_type', 'cost_centres'];\n\n      return jobRoleService.getOptionValues(optionGroups).then(function (data) {\n        if (data.is_error === 1) {\n          vm.message_type = 'alert-danger';\n          vm.message = 'Cannot get option values!';\n        } else {\n          // Pass the department option group list to the scope\n          var DepartmentList = {};\n\n          // Pass the region option group list to the scope\n          var RegionList = {};\n\n          // Pass the location option group list to the scope\n          var LocationList = {};\n\n          // Pass the level option group list to the scope\n          var LevelList = {};\n\n          // Pass the Cost Centers option group list to the scope\n          var CostCentreList = [];\n\n          angular.forEach(data['optionGroupData'], function (optionGroupId, optionGroupName) {\n            for (var i = 0; i < data.count; i++) {\n              switch (optionGroupName) {\n                case 'hrjc_department':\n                  if (optionGroupId === data.values[i]['option_group_id']) {\n                    // Build the department list\n                    DepartmentList[data.values[i]['value']] = {\n                      id: data.values[i]['id'],\n                      title: data.values[i]['label'],\n                      value: data.values[i]['value'],\n                      is_active: data.values[i]['is_active']\n                    };\n                  }\n\n                  break;\n                case 'hrjc_region':\n                  if (optionGroupId === data.values[i]['option_group_id']) {\n                    // Build the region list\n                    RegionList[data.values[i]['value']] = {\n                      id: data.values[i]['id'],\n                      title: data.values[i]['label'],\n                      value: data.values[i]['value'],\n                      is_active: data.values[i]['is_active']\n                    };\n                  }\n\n                  break;\n                case 'hrjc_location':\n                  if (optionGroupId === data.values[i]['option_group_id']) {\n                    // Build the contact list\n                    LocationList[data.values[i]['value']] = {\n                      id: data.values[i]['id'],\n                      title: data.values[i]['label'],\n                      value: data.values[i]['value'],\n                      is_active: data.values[i]['is_active']\n                    };\n                  }\n\n                  break;\n                case 'hrjc_level_type':\n                  if (optionGroupId === data.values[i]['option_group_id']) {\n                    // Build the contact list\n                    LevelList[data.values[i]['value']] = {\n                      id: data.values[i]['id'],\n                      title: data.values[i]['label'],\n                      value: data.values[i]['value'],\n                      is_active: data.values[i]['is_active']\n                    };\n                  }\n\n                  break;\n                case 'cost_centres':\n                  if (optionGroupId === data.values[i]['option_group_id']) {\n                    // Build the contact list\n                    CostCentreList.push({\n                      id: data.values[i]['id'],\n                      title: data.values[i]['label'],\n                      is_active: data.values[i]['is_active'],\n                      weight: data.values[i]['weight']\n                    });\n                  }\n\n                  break;\n              }\n            }\n          });\n\n          // Store the Department types so we can reuse later\n          vm.DepartmentsData = getActiveValues(DepartmentList);\n\n          // Store the Region types so we can reuse later\n          vm.RegionsData = getActiveValues(RegionList);\n\n          // Store the Location types so we can reuse later\n          vm.LocationsData = getActiveValues(LocationList);\n\n          // Store the Level types so we can reuse later\n          vm.LevelsData = getActiveValues(LevelList);\n\n          // Store the cost center list so we can reuse later\n          vm.CostCentreList = CostCentreList;\n\n          vm.message_type = 'alert-success';\n          vm.message = null;\n        }\n\n        // Hide the message after some seconds\n        $timeout(function () {\n          vm.message = null;\n        }, 3000);\n      },\n      function (errorMessage) {\n        vm.error = errorMessage;\n      });\n    }\n\n    /**\n     * Initializes the cost centers data in the given job role\n     *\n     * @param  {Object} jobRole\n     * @param  {Object} data\n     */\n    function initCostCentersData (jobRole, data) {\n      jobRole.cost_centers = [];\n\n      var costCenterContactIds = filtersService.isNotUndefined(data.cost_center.split('|'));\n      var costCenterTypes = data.cost_center_val_type.split('|');\n      var percentCostCenters = data.percent_pay_cost_center.split('|');\n      var amountCostCenters = data.amount_pay_cost_center.split('|');\n\n      for (var i = 0; i < costCenterContactIds.length; i++) {\n        if (costCenterContactIds[i] !== '') {\n          jobRole.cost_centers.push({\n            id: jobRole.cost_centers.length + 1,\n            amount: amountCostCenters[i],\n            cost_centre_id: costCenterContactIds[i],\n            percentage: percentCostCenters[i],\n            type: costCenterTypes[i]\n          });\n        }\n      }\n    }\n\n    /**\n     * Set the data from the webservice call\n     *\n     * @param  {int} roleId\n     * @param  {int} formId\n     * @param  {*} data\n     */\n    function initData (roleId, formId, data) {\n      // Check if we have the array already\n      if (typeof vm.editData[roleId] === 'undefined') {\n        vm.editData[roleId] = {\n          'role_id': roleId\n        };\n      }\n\n      if (formId === 'funders') {\n        initFundersData(vm.editData[roleId], data);\n      } else if (formId === 'cost_centers') {\n        initCostCentersData(vm.editData[roleId], data);\n      } else {\n        initMiscData(vm.editData[roleId], formId, data);\n      }\n\n      if (formId === 'end_date' && !vm.editData[roleId].end_date) {\n        vm.editData[roleId].end_date = null;\n      }\n\n      if (vm.editData[roleId].job_contract_id &&\n        vm.editData[roleId].start_date &&\n        typeof vm.editData[roleId].end_date !== 'undefined' &&\n        (formId === 'start_date' || formId === 'job_contract_id' || formId === 'end_date')) {\n        updateRolesWithContractData(roleId);\n      }\n    }\n\n    /**\n     * Initializes the funders data in the given job role\n     *\n     * @param  {Object} jobRole\n     * @param  {Object} data\n     */\n    function initFundersData (jobRole, data) {\n      jobRole.funders = [];\n\n      var funderContactIds = filtersService.isNotUndefined(data.funder.split('|'));\n      var funderTypes = data.funder_val_type.split('|');\n      var percentFunders = data.percent_pay_funder.split('|');\n      var amountFunders = data.amount_pay_funder.split('|');\n\n      for (var i = 0; i < funderContactIds.length; i++) {\n        if (funderContactIds[i] !== '') {\n          jobRole.funders.push({\n            id: jobRole.funders.length + 1,\n            amount: amountFunders[i],\n            percentage: percentFunders[i],\n            type: funderTypes[i],\n            funder_id: {\n              id: funderContactIds[i],\n              sort_name: fundersContacts[funderContactIds[i]].sort_name\n            }\n          });\n        }\n      }\n    }\n\n    /**\n     * Initializes miscellaneous data in the given job role\n     *\n     * @param  {Object} jobRole\n     * @param  {string} key\n     * @param  {Object} data\n     */\n    function initMiscData (jobRole, key, data) {\n      var bothJustSet = (typeof jobRole.start_date === 'undefined' ||\n        typeof jobRole.job_contract_id === 'undefined');\n\n      // Default data init\n      jobRole[key] = data;\n\n      if (jobRole.start_date) {\n        // If dates are not set, we programatically set them here\n        var date = moment(jobRole.start_date);\n        var invalidDate = (isNaN(date) && typeof jobRole.start_date !== 'undefined');\n\n        var presentJobContract = !(typeof jobRole.job_contract_id === 'undefined');\n\n        if (invalidDate && presentJobContract && bothJustSet) {\n          vm.onContractEdited(null, jobRole.job_contract_id).then(function () {\n            $scope.$apply();\n            return vm.updateRole(jobRole.role_id);\n          });\n        } else {\n          formatRoleDates(jobRole, {\n            start: jobRole.start_date,\n            end: jobRole.end_date\n          });\n        }\n      }\n    }\n\n    /**\n     * Check if the data are changed in the form (based on job role ID)\n     * @param rowId\n     * @returns {boolean}\n       */\n    function isChanged (rowId) {\n      // If there are data it means we edited the form\n      return !!(vm.editData[rowId]['is_edit']);\n    }\n\n    /**\n     * Checks if date should be considered empty.\n     *\n     * @param {String} date\n     * @returns {boolean}\n     */\n    function isDateEmpty (date) {\n      return date === null;\n    }\n\n    /**\n     *\n     * @param  {string}  name\n     * @return {Boolean}\n     */\n    function isOpen (name) {\n      return !!(vm.CalendarShow[name]);\n    }\n\n    /**\n     * Check for collapsed rows\n     *\n     * @param  {int}  rowId\n     * @return {Boolean}\n     */\n    function isRowCollapsed (rowId) {\n      return !!(vm.collapsedRows[rowId]);\n    }\n\n    /**\n     * Check if current tab\n     *\n     * @param  {int}  rowId\n     * @param  {int}  tabId\n     * @return {Boolean}\n     */\n    function isTab (rowId, tabId) {\n      return (+vm.viewTab[rowId] === +tabId);\n    }\n\n    /**\n     * Called on angular-xeditable's onaftersave callback.\n     * It'll filter the rows which are without data.\n     *\n     * @param  {string|int} roleId\n     * @param  {string} roleType\n     */\n    function onAfterSave (roleId, roleType) {\n      filterEmptyData(roleId, roleType);\n    }\n\n    /**\n     * Called on angular-xeditable's cancel callback.\n     * It'll filter the rows which are without data.\n     *\n     * @param  {string|int} roleId\n     * @param  {string} roleType\n     */\n    function onCancel (roleId, roleType) {\n      if (roleType === 'both') {\n        rolesType.map(function (type) {\n          filterEmptyData(roleId, type);\n        });\n      } else {\n        filterEmptyData(roleId, roleType);\n      }\n    }\n\n    /**\n     * Method responsible for updating existing JobRole with dates from Contract\n     * @param jobContractId\n     * @param roleId\n     */\n    function onContractEdited (jobContractId, roleId) {\n      var id = jobContractId || vm.editData[roleId]['job_contract_id'];\n      var contract = getContractData(id);\n      var areDatesCustom = vm.checkIfDatesAreCustom(vm.editData[roleId]['start_date'], vm.editData[roleId]['end_date']);\n\n      if (contract === undefined) {\n        vm.editData[roleId]['job_contract_id'] = undefined;\n        vm.editData[roleId]['start_date'] = undefined;\n        vm.editData[roleId]['end_date'] = undefined;\n\n        return false;\n      }\n\n      if (!areDatesCustom) {\n        formatRoleDates(vm.editData[roleId], {\n          start: contract.start_date,\n          end: contract.end_date\n        });\n      } else {\n        formatRoleDates(vm.editData[roleId], {\n          start: vm.editData[roleId].start_date,\n          end: vm.editData[roleId].end_date\n        });\n      }\n    }\n\n    /**\n     * Method responsible for updating new JobRole with dates from Contract\n     */\n    function onContractSelected () {\n      var contract = getContractData(vm.editData.new_role_id.job_contract_id);\n      var areDatesCustom = vm.checkIfDatesAreCustom(vm.editData.new_role_id.newStartDate, vm.editData.new_role_id.newEndDate);\n      if (contract === undefined) {\n        vm.editData['new_role_id']['job_contract_id'] = undefined;\n        vm.editData['new_role_id']['newStartDate'] = undefined;\n        vm.editData['new_role_id']['newEndDate'] = undefined;\n      } else {\n        formatRoleDates(vm.editData.new_role_id, {\n          start: areDatesCustom ? vm.editData.new_role_id.newStartDate : contract.start_date,\n          end: areDatesCustom ? vm.editData.new_role_id.newEndDate : contract.end_date\n        },\n          {\n            start: 'newStartDate',\n            end: 'newEndDate'\n          });\n      }\n    }\n\n    /**\n     *\n     * @param  {Object} event\n     */\n    function open (event) {\n      vm.CalendarShow[event] = true;\n    }\n\n    /**\n     * Fetches the job roles of the contracts with the given ids\n     *\n     * @param {Array} contractIds\n     * @return {Promise}\n     */\n    function jobRolesFromContracts (contractIds) {\n      return jobRoleService.getAllJobRoles(contractIds)\n        .then(function (data) {\n          vm.presentJobRoles = [];\n          vm.pastJobRoles = [];\n          vm.status = 'Data load OK';\n\n          if (data.is_error === 1) {\n            vm.error = 'Data load failure';\n          }\n\n          data.values.forEach(function (objectData) {\n            var todaysDate = moment().startOf('day');\n            var endDate = null;\n\n            if (!isDateEmpty(objectData.end_date)) {\n              endDate = moment(objectData.end_date).startOf('day');\n            }\n\n            if (!endDate || endDate.isSameOrAfter(todaysDate)) {\n              vm.presentJobRoles.push(objectData);\n            } else {\n              vm.pastJobRoles.push(objectData);\n            }\n          });\n        })\n        .then(function () {\n          return getFundersContacts();\n        })\n        .then(function (contacts) {\n          fundersContacts = contacts;\n        })\n        .catch(function (errorMessage) {\n          vm.error = errorMessage;\n        });\n    }\n\n    /**\n     * Removes the given Role\n     *\n     * @param {Object} jobRole\n     */\n    function removeRole (jobRole) {\n      $log.debug('Remove Role');\n\n      var modalInstance = $modal.open({\n        appendTo: $rootElement.find('div').eq(0),\n        template: '',\n        templateUrl: settings.pathApp + 'views/modalDialog.html?v=' + (new Date()).getTime(),\n        size: 'sm',\n        controller: 'ModalDialogController',\n        controllerAs: 'dialog',\n        resolve: {\n          content: function () {\n            return {\n              copyCancel: 'No',\n              title: 'Alert',\n              msg: 'Are you sure you want to Delete Job Role?'\n            };\n          }\n        }\n      });\n\n      // Delete job role\n      modalInstance.result.then(function (confirm) {\n        if (confirm) {\n          deleteJobRole(jobRole.id).then(function () {\n            updateHeaderInfo(jobRole);\n            pubSub.publish('JobRole::deleted');\n\n            return getJobRolesList(vm.contactId);\n          });\n        }\n      });\n    }\n\n    /**\n     * Validates Dates and saves the new Job Role\n     */\n    function saveNewRole () {\n      var newRole;\n\n      $log.debug('Add New Role');\n\n      vm.errors = {};\n      vm.errors.newStartDate = [];\n      vm.errors.newEndDate = [];\n\n      var contract = getContractData(vm.editData.new_role_id.job_contract_id);\n      var validateResponse = validateDates({\n        'start': vm.editData.new_role_id.newStartDate,\n        'end': vm.editData.new_role_id.newEndDate,\n        'contractStart': contract.start_date,\n        'contractEnd': contract.end_date\n      },\n        {\n          'start': vm.errors.newStartDate,\n          'end': vm.errors.newEndDate\n        });\n\n      if (validateResponse) {\n        newRole = angular.copy(vm.editData.new_role_id);\n        newRole.newStartDate = convertDateToServerFormat(newRole.newStartDate);\n\n        if (newRole.newEndDate) {\n          newRole.newEndDate = convertDateToServerFormat(newRole.newEndDate);\n        } else {\n          delete newRole.newEndDate;\n        }\n\n        if (newRole.funders && newRole.funders.length) {\n          updateFundersContactsList(newRole.funders);\n        }\n\n        createJobRole(newRole).then(function () {\n          updateHeaderInfo(newRole);\n          pubSub.publish('JobRole::created');\n\n          // Hide the add new form\n          vm.add_new = false;\n\n          // Remove if any data are added / Reset form\n          delete vm.editData['new_role_id'];\n\n          return getJobRolesList(vm.contactId);\n        });\n      }\n    }\n\n    /**\n     *\n     * @param  {Object} event\n     */\n    function select (event) {\n      vm.CalendarShow[event] = false;\n    }\n\n    /**\n     * Show Row Type default value\n     *\n     * @param object\n     * @returns {string}\n     */\n    function showRowType (object) {\n      var selected = '';\n\n      if (typeof object.type !== 'undefined') {\n        // Get the human readable Type Value\n        selected = vm.rowTypes[object.type];\n\n        return selected.name;\n      }\n\n      return 'Not set';\n    }\n\n    /**\n     * Set the is_edit value\n     *\n     * @param {int} rowId\n     */\n    function showSave (rowId) {\n      vm.editData[rowId]['is_edit'] = true;\n    }\n\n    /**\n     * Subscribes to external events\n     */\n    function subcribeToEvents () {\n      // Triggers when a new contract is created for a contact.\n      pubSub.subscribe('Contract::created', function (contactId) {\n        contractIdsFromContact(contactId);\n      });\n\n      // Triggers when a contract is deleted for a contact.\n      pubSub.subscribe('Contract::deleted', function (data) {\n        contractIdsFromContact(data.contactId).then(function (contractIds) {\n          if (!contractIds.length) {\n            vm.presentJobRoles = [];\n            vm.pastJobRoles = [];\n          } else {\n            return jobRolesFromContracts(contractIds);\n          }\n        });\n      });\n    }\n\n    /**\n     *\n     */\n    function today () {\n      vm.CalendarShow['newStartDate'] = false;\n      vm.CalendarShow['newEndDate'] = false;\n      vm.CalendarShow['start_date'] = false;\n      vm.CalendarShow['end_date'] = false;\n    }\n\n    /**\n     * Update funder type scope on request\n     *\n     * @param  {int} roleId\n     * @param  {string} rowType\n     * @param  {string} key\n     * @param  {*} data\n     */\n    function updateAdditionalRowType (roleId, rowType, key, data) {\n      if (rowType === 'cost_centre') {\n        // Update cost centers row\n        vm.editData[roleId]['cost_centers'][key]['type'] = data;\n      } else {\n        // Update funder Type scope as default\n        vm.editData[roleId]['funders'][key]['type'] = data;\n      }\n    }\n\n    /**\n     * Updates the internal list of funders contacts with the funders list\n     * of the given job role. If the job role has any funder which is not\n     * already stored in the list, the funder gets added\n     *\n     * @param  {Array} jobRoleFunders\n     */\n    function updateFundersContactsList (jobRoleFunders) {\n      jobRoleFunders.forEach(function (funder) {\n        var funderData = funder.funder_id;\n\n        if (!_.contains(Object.keys(fundersContacts), funderData.id)) {\n          fundersContacts[funderData.id] = funderData;\n        }\n      });\n    }\n\n    /**\n     * Triggers the update of the contact header via the `hrui` extension\n     * by emitting a DOM event with the roles data\n     *\n     * Given that the header reflects data only related to the current contract,\n     * the header update happens only for job roles belonging that particular contract\n     */\n    function updateHeaderInfo (jobRole) {\n      if (vm.contractsData[jobRole.job_contract_id].is_current) {\n        jobRoleService.getCurrentDepartments(jobRole.job_contract_id).then(function (departments) {\n          DOMEventTrigger('updateContactHeader', {\n            roles: { departments: departments }\n          });\n        });\n      }\n    }\n\n    /**\n     * Implements the \"updateJobRole\" service\n     *\n     * @param  {int} roleId\n     * @param  {Object} jobRolesData\n     * @return {Promise}\n     */\n    function updateJobRole (roleId, jobRolesData) {\n      return jobRoleService.updateJobRole(roleId, jobRolesData).then(function (data) {\n        return data;\n      }, function (errorMessage) {\n        vm.error = errorMessage;\n      });\n    }\n\n    /**\n     * Prepares data and updates existing role\n     *\n     * @param {int} roleId\n     * @param {string} roleType\n     */\n    function updateRole (roleId, roleType) {\n      var updatedRole;\n\n      $log.debug('Update Role');\n\n      if (typeof roleType === 'string') {\n        filterEmptyData(roleId, roleType);\n      }\n\n      updatedRole = angular.copy(vm.editData[roleId]);\n      updatedRole.location = (updatedRole.location === undefined) ? updatedRole.location = '' : updatedRole.location;\n      updatedRole.level = (updatedRole.level === undefined) ? updatedRole.level = '' : updatedRole.level;\n      updatedRole.department = (updatedRole.department === undefined) ? updatedRole.department = '' : updatedRole.department;\n      updatedRole.region = (updatedRole.region === undefined) ? updatedRole.region = '' : updatedRole.region;\n      updatedRole.start_date = convertDateToServerFormat(updatedRole.start_date);\n\n      if (updatedRole.end_date) {\n        updatedRole.end_date = convertDateToServerFormat(updatedRole.end_date);\n      } else {\n        delete updatedRole.end_date;\n      }\n\n      if (updatedRole.funders && updatedRole.funders.length) {\n        updateFundersContactsList(updatedRole.funders);\n      }\n\n      updateJobRole(roleId, updatedRole).then(function () {\n        updateHeaderInfo(updatedRole);\n        pubSub.publish('JobRole::updated');\n\n        return getJobRolesList(vm.contactId);\n      });\n    }\n\n    /**\n     * Checks if JobRole dates are actual, if not checks if they exist in any of contract's revisions.\n     *\n     * @param {int} roleId\n     */\n    function updateRolesWithContractData (roleId) {\n      var contractId = vm.editData[roleId].job_contract_id;\n\n      if (vm.checkIfDatesAreCustom(vm.editData[roleId]['start_date'], vm.editData[roleId]['end_date'])) {\n        var contract = getContractData(contractId);\n\n        // search for revision containing these dates\n        var revision = contract.revisions.some(function (rev) {\n          return rev.period_start_date === formatDate(vm.editData[roleId]['start_date']) &&\n              rev.period_end_date === formatDate(vm.editData[roleId]['end_date']);\n        });\n\n        // check if dates match with revision\n        if (revision) {\n          formatRoleDates(vm.editData[roleId], {\n            start: contract.start_date,\n            end: contract.end_date\n          });\n\n          vm.updateRole(roleId);\n        }\n      } else {\n        formatRoleDates(vm.editData[roleId], {\n          start: vm.editData[roleId].start_date,\n          end: vm.editData[roleId].end_date\n        });\n      }\n    }\n\n    /**\n     * Trigger validation on JobRole Dates + attach error callback\n     *\n     * @param {object} data - The dates to validate\n     * @param {object} errors - The error recipients\n     * @returns {boolean}\n     */\n    function validateDates (data, errors) {\n      var errorsCount = 0;\n\n      dateValidation.setErrorCallback(function (error, field) {\n        errorsCount++;\n        if (field.indexOf('start_date') > -1) {\n          errors.start.push(error);\n        }\n        if (field.indexOf('end_date') > -1) {\n          errors.end.push(error);\n        }\n      });\n      dateValidation.validate(data.start, data.end, data.contractStart, data.contractEnd);\n\n      return (errorsCount === 0);\n    }\n\n    /**\n     * Validation method for JobRole data.\n     * If string is returned form is not submitted.\n     *\n     * @param {Object} data\n     * @return {boolean|string}\n     */\n    function validateRole (data) {\n      // Reset Error Messages\n      data.start_date.$error.custom = [];\n      data.end_date.$error.custom = [];\n      var contract = getContractData(data.contract.$viewValue);\n\n      if (typeof contract === 'undefined') {\n        return 'Contract is missing';\n      }\n\n      var validateResponse = validateDates({\n        'start': data.start_date.$viewValue,\n        'end': data.end_date.$viewValue,\n        'contractStart': contract.start_date,\n        'contractEnd': contract.end_date\n      },\n        {\n          'start': data.start_date.$error.custom,\n          'end': data.end_date.$error.custom\n        });\n\n      return (validateResponse ? true : 'Error');\n    }\n\n    /**\n     *\n     * @param {string} title\n     * @returns {string|undefined}\n     */\n    function validateTitle (title) {\n      if (title === 'title' || title === ' ') {\n        return 'Title cannot be title!';\n      }\n    }\n  }\n\n  return JobRolesController;\n});\n\n//# sourceURL=/job-roles/controllers/job-roles.controller.js"),
eval("/* eslint-env amd */\n\ndefine('job-roles/controllers/modal-dialog.controller',[],function () {\n  'use strict';\n\n  ModalDialogController.__name = 'ModalDialogController';\n  ModalDialogController.$inject = ['$uibModalInstance', '$log', '$timeout', 'content'];\n\n  function ModalDialogController ($modalInstance, $log, $timeout, content) {\n    $log.debug('Controller: ModalDialogController');\n\n    var vm = this;\n\n    vm.copyCancel = content.copyCancel || 'Cancel';\n    vm.copyConfirm = content.copyConfirm || 'Yes';\n    vm.msg = content.msg || '';\n    vm.title = content.title || 'CiviHR Job Roles';\n\n    vm.cancel = cancel;\n    vm.confirm = confirm;\n\n    /**\n     * Cancels the dialog\n     */\n    function cancel () {\n      $modalInstance.dismiss('Cancel');\n    }\n\n    /**\n     * Confirms the dialog\n     *\n     * @param  {boolean} action\n     */\n    function confirm (action) {\n      $modalInstance.close(action || true);\n    }\n  }\n\n  return ModalDialogController;\n});\n\n//# sourceURL=/job-roles/controllers/modal-dialog.controller.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/modules/job-roles.controllers',[\n  'common/angular',\n  'job-roles/controllers/job-roles.controller',\n  'job-roles/controllers/modal-dialog.controller'\n], function (angular, JobRolesController, ModalDialogController) {\n  'use strict';\n\n  return angular.module('hrjobroles.controllers', [])\n    .controller(JobRolesController.__name, JobRolesController)\n    .controller(ModalDialogController.__name, ModalDialogController);\n});\n\n//# sourceURL=/job-roles/modules/job-roles.controllers.js"),eval('/*!\nangular-xeditable - 0.1.8\nEdit-in-place for angular.js\nBuild date: 2014-01-10 \n*/\nangular.module("xeditable",[]).value("editableOptions",{theme:"default",buttons:"right",blurElem:"cancel",blurForm:"ignore",activate:"focus"}),angular.module("xeditable").directive("editableBsdate",["editableDirectiveFactory",function(a){return a({directiveName:"editableBsdate",inputTpl:\'<input type="text">\'})}]),angular.module("xeditable").directive("editableBstime",["editableDirectiveFactory",function(a){return a({directiveName:"editableBstime",inputTpl:"<timepicker></timepicker>",render:function(){this.parent.render.call(this);var a=angular.element(\'<div class="well well-small" style="display:inline-block;"></div>\');a.attr("ng-model",this.inputEl.attr("ng-model")),this.inputEl.removeAttr("ng-model"),this.attrs.eNgChange&&(a.attr("ng-change",this.inputEl.attr("ng-change")),this.inputEl.removeAttr("ng-change")),this.inputEl.wrap(a)}})}]),angular.module("xeditable").directive("editableCheckbox",["editableDirectiveFactory",function(a){return a({directiveName:"editableCheckbox",inputTpl:\'<input type="checkbox">\',render:function(){this.parent.render.call(this),this.attrs.eTitle&&(this.inputEl.wrap("<label></label>"),this.inputEl.after(angular.element("<span></span>").text(this.attrs.eTitle)))},autosubmit:function(){var a=this;a.inputEl.bind("change",function(){setTimeout(function(){a.scope.$apply(function(){a.scope.$form.$submit()})},500)})}})}]),angular.module("xeditable").directive("editableChecklist",["editableDirectiveFactory","editableNgOptionsParser",function(a,b){return a({directiveName:"editableChecklist",inputTpl:"<span></span>",useCopy:!0,render:function(){this.parent.render.call(this);var a=b(this.attrs.eNgOptions),c=\'<label ng-repeat="\'+a.ngRepeat+\'">\'+\'<input type="checkbox" checklist-model="$parent.$data" checklist-value="\'+a.locals.valueFn+\'">\'+\'<span ng-bind="\'+a.locals.displayFn+\'"></span></label>\';this.inputEl.removeAttr("ng-model"),this.inputEl.removeAttr("ng-options"),this.inputEl.html(c)}})}]),function(){var a="text|email|tel|number|url|search|color|date|datetime|time|month|week".split("|");angular.forEach(a,function(a){var b="editable"+a.charAt(0).toUpperCase()+a.slice(1);angular.module("xeditable").directive(b,["editableDirectiveFactory",function(c){return c({directiveName:b,inputTpl:\'<input type="\'+a+\'">\'})}])}),angular.module("xeditable").directive("editableRange",["editableDirectiveFactory",function(a){return a({directiveName:"editableRange",inputTpl:\'<input type="range" id="range" name="range">\',render:function(){this.parent.render.call(this),this.inputEl.after("<output>{{$data}}</output>")}})}])}(),angular.module("xeditable").directive("editableRadiolist",["editableDirectiveFactory","editableNgOptionsParser",function(a,b){return a({directiveName:"editableRadiolist",inputTpl:"<span></span>",render:function(){this.parent.render.call(this);var a=b(this.attrs.eNgOptions),c=\'<label ng-repeat="\'+a.ngRepeat+\'">\'+\'<input type="radio" ng-model="$parent.$data" value="{{\'+a.locals.valueFn+\'}}">\'+\'<span ng-bind="\'+a.locals.displayFn+\'"></span></label>\';this.inputEl.removeAttr("ng-model"),this.inputEl.removeAttr("ng-options"),this.inputEl.html(c)},autosubmit:function(){var a=this;a.inputEl.bind("change",function(){setTimeout(function(){a.scope.$apply(function(){a.scope.$form.$submit()})},500)})}})}]),angular.module("xeditable").directive("editableSelect",["editableDirectiveFactory",function(a){return a({directiveName:"editableSelect",inputTpl:"<select></select>",autosubmit:function(){var a=this;a.inputEl.bind("change",function(){a.scope.$apply(function(){a.scope.$form.$submit()})})}})}]),angular.module("xeditable").directive("editableTextarea",["editableDirectiveFactory",function(a){return a({directiveName:"editableTextarea",inputTpl:"<textarea></textarea>",addListeners:function(){var a=this;a.parent.addListeners.call(a),a.single&&"no"!==a.buttons&&a.autosubmit()},autosubmit:function(){var a=this;a.inputEl.bind("keydown",function(b){(b.ctrlKey||b.metaKey)&&13===b.keyCode&&a.scope.$apply(function(){a.scope.$form.$submit()})})}})}]),angular.module("xeditable").factory("editableController",["$q","editableUtils",function(a,b){function c(a,c,d,e,f,g,h,i,j){var k,l,m=this;m.scope=a,m.elem=d,m.attrs=c,m.inputEl=null,m.editorEl=null,m.single=!0,m.error="",m.theme=f[g.theme]||f["default"],m.parent={},m.inputTpl="",m.directiveName="",m.useCopy=!1,m.single=null,m.buttons="right",m.init=function(b){if(m.single=b,m.name=c.eName||c[m.directiveName],!c[m.directiveName])throw"You should provide value for `"+m.directiveName+"` in editable element!";k=e(c[m.directiveName]),m.buttons=m.single?m.attrs.buttons||g.buttons:"no",c.eName&&m.scope.$watch("$data",function(a){m.scope.$form.$data[c.eName]=a}),c.onshow&&(m.onshow=function(){return m.catchError(e(c.onshow)(a))}),c.onhide&&(m.onhide=function(){return e(c.onhide)(a)}),c.oncancel&&(m.oncancel=function(){return e(c.oncancel)(a)}),c.onbeforesave&&(m.onbeforesave=function(){return m.catchError(e(c.onbeforesave)(a))}),c.onaftersave&&(m.onaftersave=function(){return m.catchError(e(c.onaftersave)(a))}),a.$parent.$watch(c[m.directiveName],function(){m.handleEmpty()})},m.render=function(){var a=m.theme;m.inputEl=angular.element(m.inputTpl),m.controlsEl=angular.element(a.controlsTpl),m.controlsEl.append(m.inputEl),"no"!==m.buttons&&(m.buttonsEl=angular.element(a.buttonsTpl),m.submitEl=angular.element(a.submitTpl),m.cancelEl=angular.element(a.cancelTpl),m.buttonsEl.append(m.submitEl).append(m.cancelEl),m.controlsEl.append(m.buttonsEl),m.inputEl.addClass("editable-has-buttons")),m.errorEl=angular.element(a.errorTpl),m.controlsEl.append(m.errorEl),m.editorEl=angular.element(m.single?a.formTpl:a.noformTpl),m.editorEl.append(m.controlsEl);for(var d in c.$attr)if(!(d.length<=1)){var e=!1,f=d.substring(1,2);if("e"===d.substring(0,1)&&f===f.toUpperCase()&&(e=d.substring(1),"Form"!==e&&"NgSubmit"!==e)){e=e.substring(0,1).toLowerCase()+b.camelToDash(e.substring(1));var h=""===c[d]?e:c[d];m.inputEl.attr(e,h)}}m.inputEl.addClass("editable-input"),m.inputEl.attr("ng-model","$data"),m.editorEl.addClass(b.camelToDash(m.directiveName)),m.single&&(m.editorEl.attr("editable-form","$form"),m.editorEl.attr("blur",m.attrs.blur||("no"===m.buttons?"cancel":g.blurElem))),angular.isFunction(a.postrender)&&a.postrender.call(m)},m.setLocalValue=function(){m.scope.$data=m.useCopy?angular.copy(k(a.$parent)):k(a.$parent)},m.show=function(){return m.setLocalValue(),m.render(),d.after(m.editorEl),i(m.editorEl)(a),m.addListeners(),d.addClass("editable-hide"),m.onshow()},m.hide=function(){return m.editorEl.remove(),d.removeClass("editable-hide"),m.onhide()},m.cancel=function(){m.oncancel()},m.addListeners=function(){m.inputEl.bind("keyup",function(a){if(m.single)switch(a.keyCode){case 27:m.scope.$apply(function(){m.scope.$form.$cancel()})}}),m.single&&"no"===m.buttons&&m.autosubmit(),m.editorEl.bind("click",function(a){1===a.which&&m.scope.$form.$visible&&(m.scope.$form._clicked=!0)})},m.setWaiting=function(a){a?(l=!m.inputEl.attr("disabled")&&!m.inputEl.attr("ng-disabled")&&!m.inputEl.attr("ng-enabled"),l&&(m.inputEl.attr("disabled","disabled"),m.buttonsEl&&m.buttonsEl.find("button").attr("disabled","disabled"))):l&&(m.inputEl.removeAttr("disabled"),m.buttonsEl&&m.buttonsEl.find("button").removeAttr("disabled"))},m.activate=function(){setTimeout(function(){var a=m.inputEl[0];"focus"===g.activate&&a.focus&&a.focus(),"select"===g.activate&&a.select&&a.select()},0)},m.setError=function(b){angular.isObject(b)||(a.$error=b,m.error=b)},m.catchError=function(a,b){return angular.isObject(a)&&b!==!0?j.when(a).then(angular.bind(this,function(a){this.catchError(a,!0)}),angular.bind(this,function(a){this.catchError(a,!0)})):b&&angular.isObject(a)&&a.status&&200!==a.status&&a.data&&angular.isString(a.data)?(this.setError(a.data),a=a.data):angular.isString(a)&&this.setError(a),a},m.save=function(){k.assign(a.$parent,angular.copy(m.scope.$data))},m.handleEmpty=function(){var b=k(a.$parent),c=null===b||void 0===b||""===b||angular.isArray(b)&&0===b.length;d.toggleClass("editable-empty",c)},m.autosubmit=angular.noop,m.onshow=angular.noop,m.onhide=angular.noop,m.oncancel=angular.noop,m.onbeforesave=angular.noop,m.onaftersave=angular.noop}return c.$inject=["$scope","$attrs","$element","$parse","editableThemes","editableOptions","$rootScope","$compile","$q"],c}]),angular.module("xeditable").factory("editableDirectiveFactory",["$parse","$compile","editableThemes","$rootScope","$document","editableController","editableFormController",function(a,b,c,d,e,f,g){return function(b){return{restrict:"A",scope:!0,require:[b.directiveName,"?^form"],controller:f,link:function(c,f,h,i){var j,k=i[0],l=!1;if(i[1])j=i[1],l=!0;else if(h.eForm){var m=a(h.eForm)(c);if(m)j=m,l=!0;else for(var n=0;n<e[0].forms.length;n++)if(e[0].forms[n].name===h.eForm){j=null,l=!0;break}}if(angular.forEach(b,function(a,b){void 0!==k[b]&&(k.parent[b]=k[b])}),angular.extend(k,b),k.init(!l),c.$editable=k,f.addClass("editable"),l)if(j){if(c.$form=j,!c.$form.$addEditable)throw"Form with editable elements should have `editable-form` attribute.";c.$form.$addEditable(k)}else d.$$editableBuffer=d.$$editableBuffer||{},d.$$editableBuffer[h.eForm]=d.$$editableBuffer[h.eForm]||[],d.$$editableBuffer[h.eForm].push(k),c.$form=null;else c.$form=g(),c.$form.$addEditable(k),h.eForm&&(c.$parent[h.eForm]=c.$form),h.eForm||(f.addClass("editable-click"),f.bind("click",function(a){a.preventDefault(),a.editable=k,c.$apply(function(){c.$form.$show()})}))}}}}]),angular.module("xeditable").factory("editableFormController",["$parse","$document","$rootScope","editablePromiseCollection","editableUtils",function(a,b,c,d,e){var f=[];b.bind("click",function(a){if(1===a.which){for(var b=[],d=[],e=0;e<f.length;e++)f[e]._clicked?f[e]._clicked=!1:f[e].$waiting||("cancel"===f[e]._blur&&b.push(f[e]),"submit"===f[e]._blur&&d.push(f[e]));(b.length||d.length)&&c.$apply(function(){angular.forEach(b,function(a){a.$cancel()}),angular.forEach(d,function(a){a.$submit()})})}});var g={$addEditable:function(a){this.$editables.push(a),a.elem.bind("$destroy",angular.bind(this,this.$removeEditable,a)),a.scope.$form||(a.scope.$form=this),this.$visible&&a.catchError(a.show())},$removeEditable:function(a){for(var b=0;b<this.$editables.length;b++)if(this.$editables[b]===a)return this.$editables.splice(b,1),void 0},$show:function(){if(!this.$visible){this.$visible=!0;var a=d();a.when(this.$onshow()),this.$setError(null,""),angular.forEach(this.$editables,function(b){a.when(b.show())}),a.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,this.$activate),onFalse:angular.bind(this,this.$activate),onString:angular.bind(this,this.$activate)}),setTimeout(angular.bind(this,function(){this._clicked=!1,-1===e.indexOf(f,this)&&f.push(this)}),0)}},$activate:function(a){var b;if(this.$editables.length){if(angular.isString(a))for(b=0;b<this.$editables.length;b++)if(this.$editables[b].name===a)return this.$editables[b].activate(),void 0;for(b=0;b<this.$editables.length;b++)if(this.$editables[b].error)return this.$editables[b].activate(),void 0;this.$editables[0].activate()}},$hide:function(){this.$visible&&(this.$visible=!1,this.$onhide(),angular.forEach(this.$editables,function(a){a.hide()}),e.arrayRemove(f,this))},$cancel:function(){this.$visible&&(this.$oncancel(),angular.forEach(this.$editables,function(a){a.cancel()}),this.$hide())},$setWaiting:function(a){this.$waiting=!!a,angular.forEach(this.$editables,function(b){b.setWaiting(!!a)})},$setError:function(a,b){angular.forEach(this.$editables,function(c){a&&c.name!==a||c.setError(b)})},$submit:function(){function a(a){var b=d();b.when(this.$onbeforesave()),b.then({onWait:angular.bind(this,this.$setWaiting),onTrue:a?angular.bind(this,this.$save):angular.bind(this,this.$hide),onFalse:angular.bind(this,this.$hide),onString:angular.bind(this,this.$activate)})}if(!this.$waiting){this.$setError(null,"");var b=d();angular.forEach(this.$editables,function(a){b.when(a.onbeforesave())}),b.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,a,!0),onFalse:angular.bind(this,a,!1),onString:angular.bind(this,this.$activate)})}},$save:function(){angular.forEach(this.$editables,function(a){a.save()});var a=d();a.when(this.$onaftersave()),angular.forEach(this.$editables,function(b){a.when(b.onaftersave())}),a.then({onWait:angular.bind(this,this.$setWaiting),onTrue:angular.bind(this,this.$hide),onFalse:angular.bind(this,this.$hide),onString:angular.bind(this,this.$activate)})},$onshow:angular.noop,$oncancel:angular.noop,$onhide:angular.noop,$onbeforesave:angular.noop,$onaftersave:angular.noop};return function(){return angular.extend({$editables:[],$visible:!1,$waiting:!1,$data:{},_clicked:!1,_blur:null},g)}}]),angular.module("xeditable").directive("editableForm",["$rootScope","$parse","editableFormController","editableOptions",function(a,b,c,d){return{restrict:"A",require:["form"],compile:function(){return{pre:function(b,d,e,f){var g,h=f[0];e.editableForm?b[e.editableForm]&&b[e.editableForm].$show?(g=b[e.editableForm],angular.extend(h,g)):(g=c(),b[e.editableForm]=g,angular.extend(g,h)):(g=c(),angular.extend(h,g));var i=a.$$editableBuffer,j=h.$name;j&&i&&i[j]&&(angular.forEach(i[j],function(a){g.$addEditable(a)}),delete i[j])},post:function(a,c,e,f){var g;g=e.editableForm&&a[e.editableForm]&&a[e.editableForm].$show?a[e.editableForm]:f[0],e.onshow&&(g.$onshow=angular.bind(g,b(e.onshow),a)),e.onhide&&(g.$onhide=angular.bind(g,b(e.onhide),a)),e.oncancel&&(g.$oncancel=angular.bind(g,b(e.oncancel),a)),e.shown&&b(e.shown)(a)&&g.$show(),g._blur=e.blur||d.blurForm,e.ngSubmit||e.submit||(e.onbeforesave&&(g.$onbeforesave=function(){return b(e.onbeforesave)(a,{$data:g.$data})}),e.onaftersave&&(g.$onaftersave=function(){return b(e.onaftersave)(a,{$data:g.$data})}),c.bind("submit",function(b){b.preventDefault(),a.$apply(function(){g.$submit()})})),c.bind("click",function(a){1===a.which&&g.$visible&&(g._clicked=!0)})}}}}}]),angular.module("xeditable").factory("editablePromiseCollection",["$q",function(a){function b(){return{promises:[],hasFalse:!1,hasString:!1,when:function(b,c){if(b===!1)this.hasFalse=!0;else if(!c&&angular.isObject(b))this.promises.push(a.when(b));else{if(!angular.isString(b))return;this.hasString=!0}},then:function(b){function c(){h.hasString||h.hasFalse?!h.hasString&&h.hasFalse?e():f():d()}b=b||{};var d=b.onTrue||angular.noop,e=b.onFalse||angular.noop,f=b.onString||angular.noop,g=b.onWait||angular.noop,h=this;this.promises.length?(g(!0),a.all(this.promises).then(function(a){g(!1),angular.forEach(a,function(a){h.when(a,!0)}),c()},function(){g(!1),f()})):c()}}}return b}]),angular.module("xeditable").factory("editableUtils",[function(){return{indexOf:function(a,b){if(a.indexOf)return a.indexOf(b);for(var c=0;c<a.length;c++)if(b===a[c])return c;return-1},arrayRemove:function(a,b){var c=this.indexOf(a,b);return c>=0&&a.splice(c,1),b},camelToDash:function(a){var b=/[A-Z]/g;return a.replace(b,function(a,b){return(b?"-":"")+a.toLowerCase()})},dashToCamel:function(a){var b=/([\\:\\-\\_]+(.))/g,c=/^moz([A-Z])/;return a.replace(b,function(a,b,c,d){return d?c.toUpperCase():c}).replace(c,"Moz$1")}}}]),angular.module("xeditable").factory("editableNgOptionsParser",[function(){function a(a){var c;if(!(c=a.match(b)))throw"ng-options parse error";var d,e=c[2]||c[1],f=c[4]||c[6],g=c[5],h=(c[3]||"",c[2]?c[1]:f),i=c[7],j=c[8],k=j?c[8]:null;return void 0===g?(d=f+" in "+i,void 0!==j&&(d+=" track by "+k)):d="("+g+", "+f+") in "+i,{ngRepeat:d,locals:{valueName:f,keyName:g,valueFn:h,displayFn:e}}}var b=/^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/;return a}]),angular.module("xeditable").factory("editableThemes",function(){var a={"default":{formTpl:\'<form class="editable-wrap"></form>\',noformTpl:\'<span class="editable-wrap"></span>\',controlsTpl:\'<span class="editable-controls"></span>\',inputTpl:"",errorTpl:\'<div class="editable-error" ng-show="$error" ng-bind="$error"></div>\',buttonsTpl:\'<span class="editable-buttons"></span>\',submitTpl:\'<button type="submit">save</button>\',cancelTpl:\'<button type="button" ng-click="$form.$cancel()">cancel</button>\'},bs2:{formTpl:\'<form class="form-inline editable-wrap" role="form"></form>\',noformTpl:\'<span class="editable-wrap"></span>\',controlsTpl:\'<div class="editable-controls controls control-group" ng-class="{\\\'error\\\': $error}"></div>\',inputTpl:"",errorTpl:\'<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>\',buttonsTpl:\'<span class="editable-buttons"></span>\',submitTpl:\'<button type="submit" class="btn btn-primary"><span class="icon-ok icon-white"></span></button>\',cancelTpl:\'<button type="button" class="btn" ng-click="$form.$cancel()"><span class="icon-remove"></span></button>\'},bs3:{formTpl:\'<form class="form-inline editable-wrap" role="form"></form>\',noformTpl:\'<span class="editable-wrap"></span>\',controlsTpl:\'<div class="editable-controls form-group" ng-class="{\\\'has-error\\\': $error}"></div>\',inputTpl:"",errorTpl:\'<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>\',buttonsTpl:\'<span class="editable-buttons"></span>\',submitTpl:\'<button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-ok"></span></button>\',cancelTpl:\'<button type="button" class="btn btn-default" ng-click="$form.$cancel()"><span class="glyphicon glyphicon-remove"></span></button>\',buttonsClass:"",inputClass:"",postrender:function(){switch(this.directiveName){case"editableText":case"editableSelect":case"editableTextarea":case"editableEmail":case"editableTel":case"editableNumber":case"editableUrl":case"editableSearch":case"editableDate":case"editableDatetime":case"editableTime":case"editableMonth":case"editableWeek":if(this.inputEl.addClass("form-control"),this.theme.inputClass){if(this.inputEl.attr("multiple")&&("input-sm"===this.theme.inputClass||"input-lg"===this.theme.inputClass))break;this.inputEl.addClass(this.theme.inputClass)}}this.buttonsEl&&this.theme.buttonsClass&&this.buttonsEl.find("button").addClass(this.theme.buttonsClass)}}};return a});\n//# sourceURL=/job-roles/vendor/angular/xeditable.min.js'),
eval('/**\n * Bunch of useful filters for angularJS(with no external dependencies!)\n * @version v0.5.4 - 2015-02-20 * @link https://github.com/a8m/angular-filter\n * @author Ariel Mashraki <ariel@mashraki.co.il>\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */!function(a,b,c){"use strict";function d(a){return D(a)?a:Object.keys(a).map(function(b){return a[b]})}function e(a){return null===a}function f(a,b){var d=Object.keys(a);return-1==d.map(function(d){return b[d]!==c&&b[d]==a[d]}).indexOf(!1)}function g(a,b){if(""===b)return a;var c=a.indexOf(b.charAt(0));return-1===c?!1:g(a.substr(c+1),b.substr(1))}function h(a,b,c){var d=0;return a.filter(function(a){var e=x(c)?b>d&&c(a):b>d;return d=e?d+1:d,e})}function i(a,b,c){return c.round(a*c.pow(10,b))/c.pow(10,b)}function j(a,b,c){b=b||[];var d=Object.keys(a);return d.forEach(function(d){if(C(a[d])&&!D(a[d])){var e=c?c+"."+d:c;j(a[d],b,e||d)}else{var f=c?c+"."+d:d;b.push(f)}}),b}function k(a){return a&&a.$evalAsync&&a.$watch}function l(){return function(a,b){return a>b}}function m(){return function(a,b){return a>=b}}function n(){return function(a,b){return b>a}}function o(){return function(a,b){return b>=a}}function p(){return function(a,b){return a==b}}function q(){return function(a,b){return a!=b}}function r(){return function(a,b){return a===b}}function s(){return function(a,b){return a!==b}}function t(a){return function(b,c){return b=C(b)?d(b):b,!D(b)||y(c)?!1:b.some(function(b){return C(b)||z(c)?a(c)(b):b===c})}}function u(a,b){return b=b||0,b>=a.length?a:D(a[b])?u(a.slice(0,b).concat(a[b],a.slice(b+1)),b):u(a,b+1)}function v(a){return function(b,c){function e(a,b){return y(b)?!1:a.some(function(a){return H(a,b)})}if(b=C(b)?d(b):b,!D(b))return b;var f=[],g=a(c);return b.filter(y(c)?function(a,b,c){return c.indexOf(a)===b}:function(a){var b=g(a);return e(f,b)?!1:(f.push(b),!0)})}}function w(a,b,c){return b?a+c+w(a,--b,c):a}var x=b.isDefined,y=b.isUndefined,z=b.isFunction,A=b.isString,B=b.isNumber,C=b.isObject,D=b.isArray,E=b.forEach,F=b.extend,G=b.copy,H=b.equals;String.prototype.contains||(String.prototype.contains=function(){return-1!==String.prototype.indexOf.apply(this,arguments)}),b.module("a8m.angular",[]).filter("isUndefined",function(){return function(a){return b.isUndefined(a)}}).filter("isDefined",function(){return function(a){return b.isDefined(a)}}).filter("isFunction",function(){return function(a){return b.isFunction(a)}}).filter("isString",function(){return function(a){return b.isString(a)}}).filter("isNumber",function(){return function(a){return b.isNumber(a)}}).filter("isArray",function(){return function(a){return b.isArray(a)}}).filter("isObject",function(){return function(a){return b.isObject(a)}}).filter("isEqual",function(){return function(a,c){return b.equals(a,c)}}),b.module("a8m.conditions",[]).filter({isGreaterThan:l,">":l,isGreaterThanOrEqualTo:m,">=":m,isLessThan:n,"<":n,isLessThanOrEqualTo:o,"<=":o,isEqualTo:p,"==":p,isNotEqualTo:q,"!=":q,isIdenticalTo:r,"===":r,isNotIdenticalTo:s,"!==":s}),b.module("a8m.is-null",[]).filter("isNull",function(){return function(a){return e(a)}}),b.module("a8m.after-where",[]).filter("afterWhere",function(){return function(a,b){if(a=C(a)?d(a):a,!D(a)||y(b))return a;var c=a.map(function(a){return f(b,a)}).indexOf(!0);return a.slice(-1===c?0:c)}}),b.module("a8m.after",[]).filter("after",function(){return function(a,b){return a=C(a)?d(a):a,D(a)?a.slice(b):a}}),b.module("a8m.before-where",[]).filter("beforeWhere",function(){return function(a,b){if(a=C(a)?d(a):a,!D(a)||y(b))return a;var c=a.map(function(a){return f(b,a)}).indexOf(!0);return a.slice(0,-1===c?a.length:++c)}}),b.module("a8m.before",[]).filter("before",function(){return function(a,b){return a=C(a)?d(a):a,D(a)?a.slice(0,b?--b:b):a}}),b.module("a8m.concat",[]).filter("concat",[function(){return function(a,b){if(y(b))return a;if(D(a))return a.concat(C(b)?d(b):b);if(C(a)){var c=d(a);return c.concat(C(b)?d(b):b)}return a}}]),b.module("a8m.contains",[]).filter({contains:["$parse",t],some:["$parse",t]}),b.module("a8m.count-by",[]).filter("countBy",["$parse",function(a){return function(b,c){var e,f={},g=a(c);return b=C(b)?d(b):b,!D(b)||y(c)?b:(b.forEach(function(a){e=g(a),f[e]||(f[e]=0),f[e]++}),f)}}]),b.module("a8m.defaults",[]).filter("defaults",["$parse",function(a){return function(b,c){if(b=C(b)?d(b):b,!D(b)||!C(c))return b;var e=j(c);return b.forEach(function(b){e.forEach(function(d){var e=a(d),f=e.assign;y(e(b))&&f(b,e(c))})}),b}}]),b.module("a8m.every",[]).filter("every",["$parse",function(a){return function(b,c){return b=C(b)?d(b):b,!D(b)||y(c)?!0:b.every(function(b){return C(b)||z(c)?a(c)(b):b===c})}}]),b.module("a8m.filter-by",[]).filter("filterBy",["$parse",function(a){return function(b,e,f){var g;return f=A(f)||B(f)?String(f).toLowerCase():c,b=C(b)?d(b):b,!D(b)||y(f)?b:b.filter(function(b){return e.some(function(c){if(~c.indexOf("+")){var d=c.replace(new RegExp("\\\\s","g"),"").split("+");g=d.reduce(function(c,d,e){return 1===e?a(c)(b)+" "+a(d)(b):c+" "+a(d)(b)})}else g=a(c)(b);return A(g)||B(g)?String(g).toLowerCase().contains(f):!1})})}}]),b.module("a8m.first",[]).filter("first",["$parse",function(a){return function(b){var e,f,g;return b=C(b)?d(b):b,D(b)?(g=Array.prototype.slice.call(arguments,1),e=B(g[0])?g[0]:1,f=B(g[0])?B(g[1])?c:g[1]:g[0],g.length?h(b,e,f?a(f):f):b[0]):b}}]),b.module("a8m.flatten",[]).filter("flatten",function(){return function(a,b){return b=b||!1,a=C(a)?d(a):a,D(a)?b?[].concat.apply([],a):u(a,0):a}}),b.module("a8m.fuzzy-by",[]).filter("fuzzyBy",["$parse",function(a){return function(b,c,e,f){var h,i,j=f||!1;return b=C(b)?d(b):b,!D(b)||y(c)||y(e)?b:(i=a(c),b.filter(function(a){return h=i(a),A(h)?(h=j?h:h.toLowerCase(),e=j?e:e.toLowerCase(),g(h,e)!==!1):!1}))}}]),b.module("a8m.fuzzy",[]).filter("fuzzy",function(){return function(a,b,c){function e(a,b){var c,d,e=Object.keys(a);return 0<e.filter(function(e){return c=a[e],d?!0:A(c)?(c=f?c:c.toLowerCase(),d=g(c,b)!==!1):!1}).length}var f=c||!1;return a=C(a)?d(a):a,!D(a)||y(b)?a:(b=f?b:b.toLowerCase(),a.filter(function(a){return A(a)?(a=f?a:a.toLowerCase(),g(a,b)!==!1):C(a)?e(a,b):!1}))}}),b.module("a8m.group-by",["a8m.filter-watcher"]).filter("groupBy",["$parse","filterWatcher",function(a,b){return function(c,d){function e(a,b){var c,d={};return E(a,function(a){c=b(a),d[c]||(d[c]=[]),d[c].push(a)}),d}if(!C(c)||y(d))return c;var f=a(d);return b.isMemoized("groupBy",arguments)||b.memoize("groupBy",arguments,this,e(c,f))}}]),b.module("a8m.is-empty",[]).filter("isEmpty",function(){return function(a){return C(a)?!d(a).length:!a.length}}),b.module("a8m.join",[]).filter("join",function(){return function(a,b){return y(a)||!D(a)?a:(y(b)&&(b=" "),a.join(b))}}),b.module("a8m.last",[]).filter("last",["$parse",function(a){return function(b){var e,f,g,i=G(b);return i=C(i)?d(i):i,D(i)?(g=Array.prototype.slice.call(arguments,1),e=B(g[0])?g[0]:1,f=B(g[0])?B(g[1])?c:g[1]:g[0],g.length?h(i.reverse(),e,f?a(f):f).reverse():i[i.length-1]):i}}]),b.module("a8m.map",[]).filter("map",["$parse",function(a){return function(b,c){return b=C(b)?d(b):b,!D(b)||y(c)?b:b.map(function(b){return a(c)(b)})}}]),b.module("a8m.omit",[]).filter("omit",["$parse",function(a){return function(b,c){return b=C(b)?d(b):b,!D(b)||y(c)?b:b.filter(function(b){return!a(c)(b)})}}]),b.module("a8m.pick",[]).filter("pick",["$parse",function(a){return function(b,c){return b=C(b)?d(b):b,!D(b)||y(c)?b:b.filter(function(b){return a(c)(b)})}}]),b.module("a8m.remove-with",[]).filter("removeWith",function(){return function(a,b){return y(b)?a:(a=C(a)?d(a):a,a.filter(function(a){return!f(b,a)}))}}),b.module("a8m.remove",[]).filter("remove",function(){return function(a){a=C(a)?d(a):a;var b=Array.prototype.slice.call(arguments,1);return D(a)?a.filter(function(a){return!b.some(function(b){return H(b,a)})}):a}}),b.module("a8m.reverse",[]).filter("reverse",[function(){return function(a){return a=C(a)?d(a):a,A(a)?a.split("").reverse().join(""):D(a)?a.slice().reverse():a}}]),b.module("a8m.search-field",[]).filter("searchField",["$parse",function(a){return function(b){var c,e;b=C(b)?d(b):b;var f=Array.prototype.slice.call(arguments,1);return D(b)&&f.length?b.map(function(b){return e=f.map(function(d){return(c=a(d))(b)}).join(" "),F(b,{searchField:e})}):b}}]),b.module("a8m.to-array",[]).filter("toArray",function(){return function(a,b){return C(a)?b?Object.keys(a).map(function(b){return F(a[b],{$key:b})}):d(a):a}}),b.module("a8m.unique",[]).filter({unique:["$parse",v],uniq:["$parse",v]}),b.module("a8m.where",[]).filter("where",function(){return function(a,b){return y(b)?a:(a=C(a)?d(a):a,a.filter(function(a){return f(b,a)}))}}),b.module("a8m.xor",[]).filter("xor",["$parse",function(a){return function(b,c,e){function f(b,c){var d=a(e);return c.some(function(a){return e?H(d(a),d(b)):H(a,b)})}return e=e||!1,b=C(b)?d(b):b,c=C(c)?d(c):c,D(b)&&D(c)?b.concat(c).filter(function(a){return!(f(a,b)&&f(a,c))}):b}}]),b.module("a8m.math.byteFmt",["a8m.math"]).filter("byteFmt",["$math",function(a){return function(b,c){return B(c)&&isFinite(c)&&c%1===0&&c>=0&&B(b)&&isFinite(b)?1024>b?i(b,c,a)+" B":1048576>b?i(b/1024,c,a)+" KB":1073741824>b?i(b/1048576,c,a)+" MB":i(b/1073741824,c,a)+" GB":"NaN"}}]),b.module("a8m.math.degrees",["a8m.math"]).filter("degrees",["$math",function(a){return function(b,c){if(B(c)&&isFinite(c)&&c%1===0&&c>=0&&B(b)&&isFinite(b)){var d=180*b/a.PI;return a.round(d*a.pow(10,c))/a.pow(10,c)}return"NaN"}}]),b.module("a8m.math.kbFmt",["a8m.math"]).filter("kbFmt",["$math",function(a){return function(b,c){return B(c)&&isFinite(c)&&c%1===0&&c>=0&&B(b)&&isFinite(b)?1024>b?i(b,c,a)+" KB":1048576>b?i(b/1024,c,a)+" MB":i(b/1048576,c,a)+" GB":"NaN"}}]),b.module("a8m.math",[]).factory("$math",["$window",function(a){return a.Math}]),b.module("a8m.math.max",["a8m.math"]).filter("max",["$math","$parse",function(a,b){function c(c,d){var e=c.map(function(a){return b(d)(a)});return e.indexOf(a.max.apply(a,e))}return function(b,d){return D(b)?y(d)?a.max.apply(a,b):b[c(b,d)]:b}}]),b.module("a8m.math.min",["a8m.math"]).filter("min",["$math","$parse",function(a,b){function c(c,d){var e=c.map(function(a){return b(d)(a)});return e.indexOf(a.min.apply(a,e))}return function(b,d){return D(b)?y(d)?a.min.apply(a,b):b[c(b,d)]:b}}]),b.module("a8m.math.percent",["a8m.math"]).filter("percent",["$math","$window",function(a,b){return function(c,d,e){var f=A(c)?b.Number(c):c;return d=d||100,e=e||!1,!B(f)||b.isNaN(f)?c:e?a.round(f/d*100):f/d*100}}]),b.module("a8m.math.radians",["a8m.math"]).filter("radians",["$math",function(a){return function(b,c){if(B(c)&&isFinite(c)&&c%1===0&&c>=0&&B(b)&&isFinite(b)){var d=3.14159265359*b/180;return a.round(d*a.pow(10,c))/a.pow(10,c)}return"NaN"}}]),b.module("a8m.math.radix",[]).filter("radix",function(){return function(a,b){var c=/^[2-9]$|^[1-2]\\d$|^3[0-6]$/;return B(a)&&c.test(b)?a.toString(b).toUpperCase():a}}),b.module("a8m.math.shortFmt",["a8m.math"]).filter("shortFmt",["$math",function(a){return function(b,c){return B(c)&&isFinite(c)&&c%1===0&&c>=0&&B(b)&&isFinite(b)?1e3>b?b:1e6>b?i(b/1e3,c,a)+" K":1e9>b?i(b/1e6,c,a)+" M":i(b/1e9,c,a)+" B":"NaN"}}]),b.module("a8m.math.sum",[]).filter("sum",function(){return function(a,b){return D(a)?a.reduce(function(a,b){return a+b},b||0):a}}),b.module("a8m.ends-with",[]).filter("endsWith",function(){return function(a,b,c){var d,e=c||!1;return!A(a)||y(b)?a:(a=e?a:a.toLowerCase(),d=a.length-b.length,-1!==a.indexOf(e?b:b.toLowerCase(),d))}}),b.module("a8m.latinize",[]).filter("latinize",[function(){function a(a){return a.replace(/[^\\u0000-\\u007E]/g,function(a){return c[a]||a})}for(var b=[{base:"A",letters:"AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"},{base:"AA",letters:"Ꜳ"},{base:"AE",letters:"ÆǼǢ"},{base:"AO",letters:"Ꜵ"},{base:"AU",letters:"Ꜷ"},{base:"AV",letters:"ꜸꜺ"},{base:"AY",letters:"Ꜽ"},{base:"B",letters:"BⒷＢḂḄḆɃƂƁ"},{base:"C",letters:"CⒸＣĆĈĊČÇḈƇȻꜾ"},{base:"D",letters:"DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ"},{base:"DZ",letters:"ǱǄ"},{base:"Dz",letters:"ǲǅ"},{base:"E",letters:"EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"},{base:"F",letters:"FⒻＦḞƑꝻ"},{base:"G",letters:"GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"},{base:"H",letters:"HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"},{base:"I",letters:"IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"},{base:"J",letters:"JⒿＪĴɈ"},{base:"K",letters:"KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"},{base:"L",letters:"LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"},{base:"LJ",letters:"Ǉ"},{base:"Lj",letters:"ǈ"},{base:"M",letters:"MⓂＭḾṀṂⱮƜ"},{base:"N",letters:"NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"},{base:"NJ",letters:"Ǌ"},{base:"Nj",letters:"ǋ"},{base:"O",letters:"OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"},{base:"OI",letters:"Ƣ"},{base:"OO",letters:"Ꝏ"},{base:"OU",letters:"Ȣ"},{base:"OE",letters:"Œ"},{base:"oe",letters:"œ"},{base:"P",letters:"PⓅＰṔṖƤⱣꝐꝒꝔ"},{base:"Q",letters:"QⓆＱꝖꝘɊ"},{base:"R",letters:"RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"},{base:"S",letters:"SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"},{base:"T",letters:"TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"},{base:"TZ",letters:"Ꜩ"},{base:"U",letters:"UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"},{base:"V",letters:"VⓋＶṼṾƲꝞɅ"},{base:"VY",letters:"Ꝡ"},{base:"W",letters:"WⓌＷẀẂŴẆẄẈⱲ"},{base:"X",letters:"XⓍＸẊẌ"},{base:"Y",letters:"YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"},{base:"Z",letters:"ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"},{base:"a",letters:"aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"},{base:"aa",letters:"ꜳ"},{base:"ae",letters:"æǽǣ"},{base:"ao",letters:"ꜵ"},{base:"au",letters:"ꜷ"},{base:"av",letters:"ꜹꜻ"},{base:"ay",letters:"ꜽ"},{base:"b",letters:"bⓑｂḃḅḇƀƃɓ"},{base:"c",letters:"cⓒｃćĉċčçḉƈȼꜿↄ"},{base:"d",letters:"dⓓｄḋďḍḑḓḏđƌɖɗꝺ"},{base:"dz",letters:"ǳǆ"},{base:"e",letters:"eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"},{base:"f",letters:"fⓕｆḟƒꝼ"},{base:"g",letters:"gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"},{base:"h",letters:"hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"},{base:"hv",letters:"ƕ"},{base:"i",letters:"iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"},{base:"j",letters:"jⓙｊĵǰɉ"},{base:"k",letters:"kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"},{base:"l",letters:"lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"},{base:"lj",letters:"ǉ"},{base:"m",letters:"mⓜｍḿṁṃɱɯ"},{base:"n",letters:"nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"},{base:"nj",letters:"ǌ"},{base:"o",letters:"oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"},{base:"oi",letters:"ƣ"},{base:"ou",letters:"ȣ"},{base:"oo",letters:"ꝏ"},{base:"p",letters:"pⓟｐṕṗƥᵽꝑꝓꝕ"},{base:"q",letters:"qⓠｑɋꝗꝙ"},{base:"r",letters:"rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"},{base:"s",letters:"sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"},{base:"t",letters:"tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"},{base:"tz",letters:"ꜩ"},{base:"u",letters:"uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"},{base:"v",letters:"vⓥｖṽṿʋꝟʌ"},{base:"vy",letters:"ꝡ"},{base:"w",letters:"wⓦｗẁẃŵẇẅẘẉⱳ"},{base:"x",letters:"xⓧｘẋẍ"},{base:"y",letters:"yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"},{base:"z",letters:"zⓩｚźẑżžẓẕƶȥɀⱬꝣ"}],c={},d=0;d<b.length;d++)for(var e=b[d].letters.split(""),f=0;f<e.length;f++)c[e[f]]=b[d].base;return function(b){return A(b)?a(b):b}}]),b.module("a8m.ltrim",[]).filter("ltrim",function(){return function(a,b){var c=b||"\\\\s";return A(a)?a.replace(new RegExp("^"+c+"+"),""):a}}),b.module("a8m.match",[]).filter("match",function(){return function(a,b,c){var d=new RegExp(b,c);return A(a)?a.match(d):null}}),b.module("a8m.repeat",[]).filter("repeat",[function(){return function(a,b,c){var d=~~b;return A(a)&&d?w(a,--b,c||""):a}}]),b.module("a8m.rtrim",[]).filter("rtrim",function(){return function(a,b){var c=b||"\\\\s";return A(a)?a.replace(new RegExp(c+"+$"),""):a}}),b.module("a8m.slugify",[]).filter("slugify",[function(){return function(a,b){var c=y(b)?"-":b;return A(a)?a.toLowerCase().replace(/\\s+/g,c):a}}]),b.module("a8m.starts-with",[]).filter("startsWith",function(){return function(a,b,c){var d=c||!1;return!A(a)||y(b)?a:(a=d?a:a.toLowerCase(),!a.indexOf(d?b:b.toLowerCase()))}}),b.module("a8m.stringular",[]).filter("stringular",function(){return function(a){var b=Array.prototype.slice.call(arguments,1);return a.replace(/{(\\d+)}/g,function(a,c){return y(b[c])?a:b[c]})}}),b.module("a8m.strip-tags",[]).filter("stripTags",function(){return function(a){return A(a)?a.replace(/<\\S[^><]*>/g,""):a}}),b.module("a8m.test",[]).filter("test",function(){return function(a,b,c){var d=new RegExp(b,c);return A(a)?d.test(a):a}}),b.module("a8m.trim",[]).filter("trim",function(){return function(a,b){var c=b||"\\\\s";return A(a)?a.replace(new RegExp("^"+c+"+|"+c+"+$","g"),""):a}}),b.module("a8m.truncate",[]).filter("truncate",function(){return function(a,b,c,d){return b=y(b)?a.length:b,d=d||!1,c=c||"",!A(a)||a.length<=b?a:a.substring(0,d?-1===a.indexOf(" ",b)?a.length:a.indexOf(" ",b):b)+c}}),b.module("a8m.ucfirst",[]).filter("ucfirst",[function(){return function(a){return A(a)?a.split(" ").map(function(a){return a.charAt(0).toUpperCase()+a.substring(1)}).join(" "):a}}]),b.module("a8m.uri-component-encode",[]).filter("uriComponentEncode",["$window",function(a){return function(b){return A(b)?a.encodeURIComponent(b):b}}]),b.module("a8m.uri-encode",[]).filter("uriEncode",["$window",function(a){return function(b){return A(b)?a.encodeURI(b):b}}]),b.module("a8m.wrap",[]).filter("wrap",function(){return function(a,b,c){return A(a)&&x(b)?[b,a,c||b].join(""):a}}),b.module("a8m.filter-watcher",[]).provider("filterWatcher",function(){this.$get=["$window","$rootScope",function(a,c){function d(a,c){return[a,b.toJson(c)].join("#").replace(/"/g,"")}function e(a){var b=a.targetScope.$id;E(l[b],function(a){delete j[a]}),delete l[b]}function f(){m(function(){c.$$phase||(j={})})}function g(a,b){var c=a.$id;return y(l[c])&&(a.$on("$destroy",e),l[c]=[]),l[c].push(b)}function h(a,b){var c=d(a,b);return j[c]}function i(a,b,c,e){var h=d(a,b);return j[h]=e,k(c)?g(c,h):f(),e}var j={},l={},m=a.setTimeout;return{isMemoized:h,memoize:i}}]}),b.module("angular.filter",["a8m.ucfirst","a8m.uri-encode","a8m.uri-component-encode","a8m.slugify","a8m.latinize","a8m.strip-tags","a8m.stringular","a8m.truncate","a8m.starts-with","a8m.ends-with","a8m.wrap","a8m.trim","a8m.ltrim","a8m.rtrim","a8m.repeat","a8m.test","a8m.match","a8m.to-array","a8m.concat","a8m.contains","a8m.unique","a8m.is-empty","a8m.after","a8m.after-where","a8m.before","a8m.before-where","a8m.defaults","a8m.where","a8m.reverse","a8m.remove","a8m.remove-with","a8m.group-by","a8m.count-by","a8m.search-field","a8m.fuzzy-by","a8m.fuzzy","a8m.omit","a8m.pick","a8m.every","a8m.filter-by","a8m.xor","a8m.map","a8m.first","a8m.last","a8m.flatten","a8m.join","a8m.math","a8m.math.max","a8m.math.min","a8m.math.percent","a8m.math.radix","a8m.math.sum","a8m.math.degrees","a8m.math.radians","a8m.math.byteFmt","a8m.math.kbFmt","a8m.math.shortFmt","a8m.angular","a8m.conditions","a8m.is-null","a8m.filter-watcher"])}(window,window.angular);\n//# sourceURL=/job-roles/vendor/angular/angular-filter.min.js'),eval("/* eslint-env amd */\n\ndefine('job-roles/modules/job-roles.core',[\n  'common/angular',\n  'common/ui-select',\n  'common/directives/angular-date/date-input',\n  'common/modules/directives',\n  'common/modules/routers/compu-ng-route',\n  'common/filters/angular-date/format-date',\n  'common/services/angular-date/date-format',\n  'common/services/dom-event-trigger',\n  'common/services/pub-sub',\n  'job-roles/vendor/angular-editable',\n  'job-roles/vendor/angular-filter'\n], function (angular) {\n  'use strict';\n\n  angular.module('hrjobroles.core', [\n    'angular.filter',\n    'ngAnimate',\n    'ngSanitize',\n    'ngResource',\n    'ui.bootstrap',\n    'ui.select',\n    'xeditable',\n    'common.angularDate',\n    'common.directives',\n    'common.services',\n    'compuNgRoute'\n  ]);\n});\n\n//# sourceURL=/job-roles/modules/job-roles.core.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/filters/get-active-values.filter',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  getActiveValues.__name = 'getActiveValues';\n  getActiveValues.$inject = ['$log'];\n\n  function getActiveValues ($log) {\n    $log.debug('Filter: getActiveValues');\n\n    return function (optionValues) {\n      var filteredOptionValues = {};\n\n      _.each(optionValues, function (optionValue, idValue) {\n        if (optionValue.is_active === '1') {\n          filteredOptionValues[idValue] = optionValue;\n        }\n      });\n\n      return filteredOptionValues;\n    };\n  }\n\n  return getActiveValues;\n});\n\n//# sourceURL=/job-roles/filters/get-active-values.filter.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/modules/job-roles.filters',[\n  'common/angular',\n  'job-roles/filters/get-active-values.filter'\n], function (angular, getActiveValues) {\n  'use strict';\n\n  return angular.module('hrjobroles.filters', [])\n    .filter(getActiveValues.__name, getActiveValues);\n});\n\n//# sourceURL=/job-roles/modules/job-roles.filters.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/modules/job-roles.run',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('hrjobroles.run', ['hrjobroles.constants']).run(hrJobRolesRun);\n\n  hrJobRolesRun.$inject = ['$q', '$rootScope', 'editableOptions', 'settings'];\n\n  function hrJobRolesRun ($q, $rootScope, editableOptions, settings) {\n    // Set bootstrap 3 as default theme\n    editableOptions.theme = 'bs3';\n\n    // Pass the values from our settings\n    $rootScope.contactId = settings.contactId;\n    $rootScope.pathBaseUrl = settings.pathBaseUrl;\n    $rootScope.pathTpl = settings.pathTpl;\n    $rootScope.pathIncludeTpl = settings.pathIncludeTpl;\n    $rootScope.prefix = settings.classNamePrefix;\n  }\n});\n\n//# sourceURL=/job-roles/modules/job-roles.run.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/services/date-validation.service',[\n  'common/moment'\n], function (moment) {\n  /**\n   * Service responsible for validating dates in HRJobRoles\n   * @constructor\n   */\n\n  dateValidation.__name = 'dateValidation';\n  dateValidation.$inject = ['HR_settings'];\n\n  function dateValidation (hrSettings) {\n    /**\n     *\n     * @param errorMsg\n     * @param fields\n     */\n    var _error = function (errorMsg, fields) {\n      throw new Error(errorMsg, fields[0]);\n    };\n\n    var Validation = {\n      dateFormats: ['x', 'YYYY-MM-DD'],\n\n      /**\n       * Set custom error callback\n       *\n       * @param {function} error\n       */\n      setErrorCallback: function (error) {\n        if (typeof error === 'function') {\n          _error = error;\n        } else {\n          throw new TypeError('Error callback must be a function.');\n        }\n      },\n\n      /**\n       * Validates Dates\n       *\n       * @param {Date|string|int} start\n       * @param {Date|string|int} end\n       * @param {Date|string|int} contractStart\n       * @param {Date|string|int} contractEnd\n       */\n      validate: function (start, end, contractStart, contractEnd) {\n        start = formatDate(start, this.dateFormats);\n\n        contractStart = formatDate(contractStart, this.dateFormats);\n        contractEnd = formatDate(contractEnd, this.dateFormats);\n\n        checkIfValuesAreValid(start, ['start_date']);\n        checkIfStartIsLowerThanContractEnd(start, contractEnd);\n        checkIfStartIsLowerThanContractStart(start, contractStart);\n\n        if (end === 0 || end) {\n          end = formatDate(end, this.dateFormats);\n\n          checkIfValuesAreValid(end, ['end_date']);\n          checkIfEndIsEqualOrLowerThanContractEnd(end, contractEnd);\n\n          checkIfStartDateIsLower(start, end);\n        }\n      }\n    };\n\n    hrSettings.DATE_FORMAT && Validation.dateFormats.push(hrSettings.DATE_FORMAT.toUpperCase());\n\n    return Validation;\n\n    /**\n     * Method checking whether provided date is valid\n     *\n     * @param {moment} date\n     * @param {string[]} fields\n     */\n    function checkIfValuesAreValid (date, fields) {\n      if (!date.isValid()) {\n        _error('Date is not valid!!', fields);\n      }\n    }\n\n    /**\n     * Method checking whether dates are in valid order\n     *\n     * @param {moment} start\n     * @param {moment} end\n     */\n    function checkIfStartDateIsLower (start, end) {\n      if (start.isSameOrAfter(end)) {\n        _error('Start Date cannot be the same as or after the End Date.', ['start_date', 'end_date']);\n      }\n    }\n\n    /**\n     * Check if job role start date is lower than contract start date\n     *\n     * @param {moment} start\n     * @param {moment} contractStart\n     */\n    function checkIfStartIsLowerThanContractStart (start, contractStart) {\n      if (start.isBefore(contractStart)) {\n        _error('Start Date cannot be lower than Contract Start Date.', ['start_date']);\n      }\n    }\n\n    /**\n     * Check if job role start date is higher than contract end date\n     *\n     * @param {moment} start\n     * @param {moment} contractEnd\n     */\n    function checkIfStartIsLowerThanContractEnd (start, contractEnd) {\n      if (start.isAfter(contractEnd)) {\n        _error('Start Date cannot be higher than Contract End Date.', ['start_date']);\n      }\n    }\n\n    /**\n     * Check if job role end date is lower than contract end date\n     *\n     * @param {moment} end\n     * @param {moment} contractEnd\n     */\n    function checkIfEndIsEqualOrLowerThanContractEnd (end, contractEnd) {\n      if (end.isAfter(contractEnd)) {\n        _error('End Date cannot be higher than Contract End Date.', ['end_date']);\n      }\n    }\n\n    /**\n     * Format date using moment\n     *\n     * @param {Date|string|int} start\n     * @param {array} dateFormats\n     * @returns {moment}\n     */\n    function formatDate (date, dateFormats) {\n      if (date instanceof Date) {\n        date = moment(date).valueOf();\n      }\n\n      return moment(date, dateFormats, true).startOf('day');\n    }\n  }\n\n  return dateValidation;\n});\n\n//# sourceURL=/job-roles/services/date-validation.service.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/services/filters.service',[],function () {\n  'use strict';\n\n  filtersService.__name = 'filtersService';\n\n  function filtersService () {\n    return {\n      /**\n       * Filter items which are different than undefined\n       *\n       * @param  {array} array\n       * @return {array}\n       */\n      isNotUndefined: function (array) {\n        try {\n          if (array.constructor === Array) {\n            return array.filter(function (value) {\n              return (value !== 'undefined' && value !== undefined);\n            });\n          } else {\n            return array;\n          }\n        } catch (e) {\n          return array;\n        }\n      },\n\n      /**\n       * Filter cost centers which have all required data\n       *\n       * @param  {array} roles\n       * @return {array}\n       */\n      issetCostCentre: function (roles) {\n        try {\n          if (roles.constructor === Array) {\n            return roles.filter(function (role) {\n              return (\n                role.cost_centre_id !== '' &&\n                ((role.type === '1' && parseInt(role.percentage) > 0) ||\n                (role.type === '0' && parseInt(role.amount) > 0))\n              );\n            });\n          } else {\n            return roles;\n          }\n        } catch (e) {\n          return roles;\n        }\n      },\n\n      /**\n       * Filter funders which have all required data\n       *\n       * @param  {array} roles\n       * @return {array}\n       */\n      issetFunder: function (roles) {\n        try {\n          if (roles.constructor === Array) {\n            return roles.filter(function (role) {\n              return (\n                role.funder_id !== '' &&\n                ((role.type === '1' && parseInt(role.percentage) > 0) ||\n                (role.type === '0' && parseInt(role.amount) > 0))\n              );\n            });\n          } else {\n            return roles;\n          }\n        } catch (e) {\n          return roles;\n        }\n      }\n    };\n  }\n\n  return filtersService;\n});\n\n//# sourceURL=/job-roles/services/filters.service.js"),
eval("/* eslint-env amd */\n\ndefine('job-roles/services/job-role.service',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  jobRoleService.__name = 'jobRoleService';\n  jobRoleService.$inject = ['$filter', '$log', '$q'];\n\n  function jobRoleService ($filter, $log, $q) {\n    return {\n\n      /**\n       * Gets all contracts and revisions\n       *\n       * @param {string} contactId\n       * @returns {promise}\n       */\n      getContracts: function (contactId) {\n        var deferred = $q.defer();\n\n        CRM.api3('HRJobContract', 'get', {\n          'sequential': 1,\n          'contact_id': contactId,\n          'deleted': 0,\n          'return': 'title,period_end_date,period_start_date',\n          'api.HRJobContractRevision.get': {\n            'jobcontract_id': '$value.id',\n            'api.HRJobDetails.getsingle': {\n              'jobcontract_revision_id': '$value.id'\n            }\n          }\n        })\n        .done(function (contracts) {\n          contracts.values.forEach(processContractRevisions);\n          deferred.resolve(contracts);\n        })\n        .error(function () {\n          deferred.reject('An error occured while fetching items');\n        });\n\n        return deferred.promise;\n      },\n\n      getAllJobRoles: function (jobContractIds) {\n        var deferred = $q.defer();\n\n        CRM.api3('HrJobRoles', 'get', {\n          'sequential': 1,\n          'return': 'id,job_contract_id,title,description,status,funder,funder_val_type,percent_pay_funder,amount_pay_funder,cost_center,cost_center_val_type,percent_pay_cost_center,amount_pay_cost_center,level_type,location,region,department,end_date,start_date',\n          'job_contract_id': { 'IN': jobContractIds }\n        }).done(function (result) {\n          // Passing data to deferred's resolve function on successful completion\n          deferred.resolve(result);\n        }).error(function (result) {\n          // Sending a friendly error message in case of failure\n          deferred.reject('An error occured while fetching items');\n        });\n\n        // Returning the promise object\n        return deferred.promise;\n      },\n\n      deleteJobRole: function (jobRoleId) {\n        var deferred = $q.defer();\n\n        CRM.api3('HrJobRoles', 'delete', {\n          'sequential': 1,\n          'id': jobRoleId\n        }).done(function (result) {\n          // Passing data to deferred's resolve function on successful completion\n          deferred.resolve(result);\n        }).error(function (result) {\n          // Sending a friendly error message in case of failure\n          deferred.reject('An error occured while deleting items');\n        });\n\n        // Returning the promise object\n        return deferred.promise;\n      },\n\n      createJobRole: function (jobRolesData) {\n        // Define funder IDs string\n        var funders = '|';\n\n        // Set the funder types\n        var funderTypes = '|';\n\n        // Set the percent value for the funder\n        var percentFunders = '|';\n\n        // Set the amount value for the funder\n        var amountFunders = '|';\n\n        // Define cost_center IDs string\n        var costCenters = '|';\n\n        // Set the cost_center types\n        var costCenterTypes = '|';\n\n        // Set the percent value for the cost_center\n        var percentCostCenters = '|';\n\n        // Set the amount value for the cost_center\n        var amountCostCenters = '|';\n\n        // If we have any funders added, loop and save them\n        if (typeof jobRolesData.funders !== 'undefined') {\n          // Loop funders and set up the data to store the funders\n          for (var i = 0, l = jobRolesData.funders.length; i < l; i++) {\n            if (jobRolesData.funders[i]) {\n              funders += jobRolesData.funders[i]['funder_id']['id'] + '|';\n              funderTypes += jobRolesData.funders[i]['type'] + '|';\n              percentFunders += jobRolesData.funders[i]['percentage'] + '|';\n              amountFunders += jobRolesData.funders[i]['amount'] + '|';\n            }\n          }\n        }\n\n        // If we have any cost_centers added, loop and save them\n        if (typeof jobRolesData.cost_centers !== 'undefined') {\n          // Loop cost_centers and set up the data to store the cost_centers\n          for (i = 0, l = jobRolesData.cost_centers.length; i < l; i++) {\n            if (jobRolesData.cost_centers[i]) {\n              costCenters += jobRolesData.cost_centers[i]['cost_centre_id'] + '|';\n              costCenterTypes += jobRolesData.cost_centers[i]['type'] + '|';\n              percentCostCenters += jobRolesData.cost_centers[i]['percentage'] + '|';\n              amountCostCenters += jobRolesData.cost_centers[i]['amount'] + '|';\n            }\n          }\n        }\n\n        var deferred = $q.defer();\n        // FIXME 'solution' to the bug failing saving correct dates to DB a first save\n        this.getNewJobRole(jobRolesData.job_contract_id).then(function (result) {\n          return CRM.api3('HrJobRoles', 'update', {\n            'id': result.id,\n            'sequential': 1,\n            'job_contract_id': jobRolesData.job_contract_id,\n            'title': jobRolesData.title,\n            'description': jobRolesData.description,\n            'funder': funders,\n            'funder_val_type': funderTypes,\n            'percent_pay_funder': percentFunders,\n            'amount_pay_funder': amountFunders,\n            'cost_center': costCenters,\n            'cost_center_val_type': costCenterTypes,\n            'percent_pay_cost_center': percentCostCenters,\n            'amount_pay_cost_center': amountCostCenters,\n            'level_type': jobRolesData.level,\n            'location': jobRolesData.location,\n            'region': jobRolesData.region,\n            'department': jobRolesData.department,\n            'start_date': jobRolesData.newStartDate,\n            'end_date': jobRolesData.newEndDate || null\n          });\n        }).then(function (response) {\n          // Passing data to deferred's resolve function on successful completion\n          deferred.resolve(response);\n        }, function (result) {\n          // Sending a friendly error message in case of failure\n          deferred.reject('An error occured while adding items');\n        });\n\n        // Returning the promise object\n        return deferred.promise;\n      },\n\n      updateJobRole: function (roleId, jobRolesData) {\n        // Define funder IDs string\n        var funders = '|';\n\n        // Set the funder types\n        var funderTypes = '|';\n\n        // Set the percent value for the funder\n        var percentFunders = '|';\n\n        // Set the amount value for the funder\n        var amountFunders = '|';\n\n        // Define cost_center IDs string\n        var costCenters = '|';\n\n        // Set the cost_center types\n        var costCenterTypes = '|';\n\n        // Set the percent value for the cost_center\n        var percentCostCenters = '|';\n\n        // Set the amount value for the cost_center\n        var amountCostCenters = '|';\n\n        // If we have any funders added, loop and save them\n        if (typeof jobRolesData.funders !== 'undefined') {\n          // Loop funders and set up the data to store the funders\n          for (var i = 0, l = jobRolesData.funders.length; i < l; i++) {\n            if (jobRolesData.funders[i]) {\n              funders += jobRolesData.funders[i]['funder_id']['id'] + '|';\n              funderTypes += jobRolesData.funders[i]['type'] + '|';\n              percentFunders += jobRolesData.funders[i]['percentage'] + '|';\n              amountFunders += jobRolesData.funders[i]['amount'] + '|';\n            }\n          }\n        }\n\n        // If we have any costCenters added, loop and save them\n        if (typeof jobRolesData.cost_centers !== 'undefined') {\n          // Loop cost_centers and set up the data to store the cost_centers\n          for (i = 0, l = jobRolesData.cost_centers.length; i < l; i++) {\n            if (jobRolesData.cost_centers[i]) {\n              costCenters += jobRolesData.cost_centers[i]['cost_centre_id'] + '|';\n              costCenterTypes += jobRolesData.cost_centers[i]['type'] + '|';\n              percentCostCenters += jobRolesData.cost_centers[i]['percentage'] + '|';\n              amountCostCenters += jobRolesData.cost_centers[i]['amount'] + '|';\n            }\n          }\n        }\n\n        var deferred = $q.defer();\n\n        CRM.api3('HrJobRoles', 'create', {\n          'sequential': 1,\n          'id': roleId,\n          'job_contract_id': jobRolesData.job_contract_id,\n          'title': jobRolesData.title,\n          'description': jobRolesData.description,\n          'status': jobRolesData.status,\n          'funder': funders,\n          'funder_val_type': funderTypes,\n          'percent_pay_funder': percentFunders,\n          'amount_pay_funder': amountFunders,\n          'cost_center': costCenters,\n          'cost_center_val_type': costCenterTypes,\n          'percent_pay_cost_center': percentCostCenters,\n          'amount_pay_cost_center': amountCostCenters,\n          'level_type': jobRolesData.level,\n          'location': jobRolesData.location,\n          'region': jobRolesData.region,\n          'start_date': jobRolesData.start_date,\n          'end_date': jobRolesData.end_date || 0,\n          'department': jobRolesData.department\n        }).done(function (result) {\n          // Passing data to deferred's resolve function on successful completion\n          deferred.resolve(result);\n        }).error(function (result) {\n          // Sending a friendly error message in case of failure\n          deferred.reject('An error occured while updating items');\n        });\n\n        // Returning the promise object\n        return deferred.promise;\n      },\n\n      getContactList: function (sortName, idsList) {\n        var deferred = $q.defer();\n\n        CRM.api3('Contact', 'get', {\n          'sequential': 1,\n          'return': 'id, sort_name',\n          'id': _.isArray(idsList) ? { 'IN': idsList } : null,\n          'sort_name': sortName || null\n        }).done(function (result) {\n          deferred.resolve(result);\n        }).error(function (result) {\n          deferred.reject('An error occured while fetching items');\n        });\n\n        return deferred.promise;\n      },\n\n      /**\n       * Returns the option values of the given option groups\n       *\n       * In addition to the standard CiviCRM api response, a property\n       * called `optionGroupData` is attached, containing a list\n       * of group name/group id pairs\n       *\n       * @param  {Array} groupNames\n       * @return {Promise}\n       */\n      getOptionValues: function (groupNames) {\n        var deferred = $q.defer();\n\n        CRM.api3('OptionValue', 'get', {\n          'sequential': 1,\n          'option_group_id.name': { 'IN': groupNames },\n          'return': [ 'id', 'label', 'weight', 'value', 'is_active', 'option_group_id', 'option_group_id.name' ],\n          'options': {\n            'limit': 1000,\n            'sort': 'id'\n          }\n        })\n        .done(function (result) {\n          result.optionGroupData = _(result.values)\n            .map(function (optionValue) {\n              return [\n                optionValue['option_group_id.name'],\n                optionValue.option_group_id\n              ];\n            })\n            .zipObject()\n            .value();\n\n          deferred.resolve(result);\n        })\n        .error(function (result) {\n          deferred.reject('An error occured while fetching items');\n        });\n\n        return deferred.promise;\n      },\n\n      getNewJobRole: function (contractId) {\n        // Creates new JobRole depending on contract id and returns promise\n        return CRM.api3('HrJobRoles', 'create', {\n          'sequential': 1,\n          'job_contract_id': contractId,\n          'title': ''\n        });\n      },\n\n      /**\n       * Returns the current departments of a given contract\n       *\n       * @param  {int} contractId\n       * @return {Promise} resolves to an array of departments\n       */\n      getCurrentDepartments: function (contractId) {\n        return CRM.api3('HrJobRoles', 'getcurrentdepartments', {\n          'sequential': 1,\n          'job_contract_id': contractId\n        })\n        .then(function (result) {\n          return result.values;\n        });\n      }\n    };\n\n    /**\n     * Extracts the contract revisions details from the chained api calls\n     * properties, then removes the current one and format the dates\n     *\n     * @param  {Object} contract\n     */\n    function processContractRevisions (contract) {\n      var contractRevisions = contract['api.HRJobContractRevision.get'].values;\n      delete (contract['api.HRJobContractRevision.get']);\n\n      contract.revisions = _.compact(contractRevisions\n        .map(function (revision) {\n          var details = revision['api.HRJobDetails.getsingle'];\n\n          if (details.period_start_date === contract.period_start_date &&\n          details.period_end_date === contract.period_end_date) {\n            return null;\n          }\n\n          details.period_start_date = $filter('formatDate')(details.period_start_date);\n          details.period_end_date = $filter('formatDate')(details.period_end_date);\n\n          return details;\n        }));\n    }\n  }\n\n  return jobRoleService;\n});\n\n//# sourceURL=/job-roles/services/job-role.service.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/modules/job-roles.services',[\n  'common/angular',\n  'job-roles/services/date-validation.service',\n  'job-roles/services/filters.service',\n  'job-roles/services/job-role.service'\n], function (angular, dateValidation, filtersService, jobRoleService) {\n  'use strict';\n\n  return angular.module('hrjobroles.services', [])\n    .factory(dateValidation.__name, dateValidation)\n    .factory(filtersService.__name, filtersService)\n    .factory(jobRoleService.__name, jobRoleService);\n});\n\n//# sourceURL=/job-roles/modules/job-roles.services.js"),eval("/* eslint-env amd */\n\ndefine('job-roles/modules/job-roles.module',[\n  'common/angular',\n  'job-roles/modules/job-roles.config',\n  'job-roles/modules/job-roles.constants',\n  'job-roles/modules/job-roles.controllers',\n  'job-roles/modules/job-roles.core',\n  'job-roles/modules/job-roles.filters',\n  'job-roles/modules/job-roles.run',\n  'job-roles/modules/job-roles.services'\n], function (angular) {\n  'use strict';\n\n  angular.module('hrjobroles', [\n    'hrjobroles.core',\n    'hrjobroles.config',\n    'hrjobroles.run',\n    'hrjobroles.constants',\n    'hrjobroles.controllers',\n    'hrjobroles.filters',\n    'hrjobroles.services'\n  ]);\n});\n\n//# sourceURL=/job-roles/modules/job-roles.module.js"),eval("/* eslint-env amd */\n\n(function (CRM, require) {\n  var extPath = CRM.vars.hrjobroles.baseURL + '/js/src/job-roles';\n\n  require.config({\n    urlArgs: 'bust=' + (new Date()).getTime(),\n    paths: {\n      'job-roles': extPath,\n      'job-roles/vendor/angular-editable': extPath + '/vendor/angular/xeditable.min',\n      'job-roles/vendor/angular-filter': extPath + '/vendor/angular/angular-filter.min'\n    }\n  });\n\n  require(['job-roles/modules/job-roles.module'], function (app) {\n    'use strict';\n\n    document.dispatchEvent(typeof window.CustomEvent == \"function\" ? new CustomEvent('hrjobrolesReady') : (function () {\n      var e = document.createEvent('Event');\n      e.initEvent('hrjobrolesReady', true, true);\n      return e;\n    })());\n  });\n})(CRM, require);\n\n//# sourceURL=/job-roles.js");
//# sourceMappingURL=job-roles.min.js.map