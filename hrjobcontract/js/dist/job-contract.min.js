<<<<<<< HEAD
eval("/* eslint-env amd */\n\n(function (CRM) {\n  define('leave-absences/shared/modules/shared-settings',[\n    'common/angular'\n  ], function (angular) {\n    return angular.module('leave-absences.settings', []).constant('shared-settings', {\n      attachmentToken: CRM.vars.leaveAndAbsences.attachmentToken,\n      debug: CRM.debug,\n      managerPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/manager-leave/',\n      sharedPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/shared/',\n      serverDateFormat: 'YYYY-MM-DD',\n      serverDateTimeFormat: 'YYYY-MM-DD HH:mm:ss',\n      permissions: {\n        admin: {\n          access: 'access leave and absences',\n          administer: 'administer leave and absences'\n        },\n        ssp: {\n          access: 'access leave and absences in ssp',\n          manage: 'manage leave and absences in ssp'\n        }\n      },\n      fileUploader: {\n        queueLimit: 10\n      },\n      statusNames: {\n        approved: 'approved',\n        adminApproved: 'admin_approved',\n        awaitingApproval: 'awaiting_approval',\n        moreInformationRequired: 'more_information_required',\n        rejected: 'rejected',\n        cancelled: 'cancelled'\n      }\n    });\n  });\n})(CRM);\n\n//# sourceURL=/vagrant/hr1703/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/shared-settings.js"),eval("define('leave-absences/shared/modules/apis',[\n  'common/angular',\n  'common/modules/apis',\n  'leave-absences/shared/modules/shared-settings',\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.apis', [\n    'common.apis',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1703/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/apis.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models-instances',[\n  'common/angular',\n  'common/models/instances/instance',\n  'common/modules/services',\n  'common/modules/models',\n  'common/services/check-permissions',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models.instances', [\n    'common.models',\n    'common.models.instances',\n    'common.services',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1703/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/models-instances.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models',[\n  'common/angular',\n  'common/modules/models',\n  'common/modules/services',\n  'leave-absences/shared/modules/apis',\n  'leave-absences/shared/modules/models-instances',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models', [\n    'common.models',\n    'common.services',\n    'leave-absences.apis',\n    'leave-absences.models.instances',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1703/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/models.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/apis/absence-type.api',[\n  'common/lodash',\n  'common/moment',\n  'leave-absences/shared/modules/apis',\n  'common/services/api'\n], function (_, moment, apis) {\n  'use strict';\n\n  apis.factory('AbsenceTypeAPI', ['$log', 'api', 'shared-settings', function ($log, api, sharedSettings) {\n    $log.debug('AbsenceTypeAPI');\n\n    return api.extend({\n\n      /**\n       * This method returns all the active AbsenceTypes unless specified in param.\n       *\n       * @param  {Object} params  matches the api endpoint params (title, weight etc)\n       * @return {Promise}\n       */\n      all: function (params) {\n        $log.debug('AbsenceTypeAPI.all');\n\n        return this.sendGET('AbsenceType', 'get', _.defaults(params || {}, { is_active: true }))\n          .then(function (data) {\n            return data.values;\n          });\n      },\n\n      /**\n       * Calculate Toil Expiry Date\n       *\n       * @param  {string} absenceTypeID\n       * @param  {Object} date\n       * @param  {Object} params\n       * @return {Promise}\n       */\n      calculateToilExpiryDate: function (absenceTypeID, date, params) {\n        $log.debug('AbsenceTypeAPI.calculateToilExpiryDate');\n\n        params = _.assign({}, params, {\n          absence_type_id: absenceTypeID,\n          date: moment(date).format(sharedSettings.serverDateFormat)\n        });\n\n        return this.sendPOST('AbsenceType', 'calculateToilExpiryDate', params)\n          .then(function (data) {\n            return data.values.expiry_date;\n          });\n      }\n    });\n  }]);\n});\n\n//# sourceURL=/vagrant/hr1703/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/apis/absence-type.api.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/instances/absence-type.instance',[\n  'leave-absences/shared/modules/models-instances',\n  'common/models/instances/instance'\n], function (instances) {\n  'use strict';\n\n  instances.factory('AbsenceTypeInstance', ['$log', 'ModelInstance', function ($log, ModelInstance) {\n    $log.debug('AbsenceTypeInstance');\n\n    return ModelInstance.extend({});\n  }]);\n});\n\n//# sourceURL=/vagrant/hr1703/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/instances/absence-type.instance.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/models/absence-type.model',[\n  'common/lodash',\n  'leave-absences/shared/modules/models',\n  'common/models/model',\n  'common/models/option-group',\n  'leave-absences/shared/apis/absence-type.api',\n  'leave-absences/shared/instances/absence-type.instance'\n], function (_, models) {\n  'use strict';\n\n  models.factory('AbsenceType', [\n    '$log', '$q', 'Model', 'OptionGroup', 'AbsenceTypeAPI', 'AbsenceTypeInstance',\n    function ($log, $q, Model, OptionGroup, absenceTypeAPI, instance) {\n      $log.debug('AbsenceType');\n\n      return Model.extend({\n        /**\n         * Calls the all() method of the AbsenceType API, and returns an\n         * AbsenceTypeInstance for each absenceType. Also calls\n         * optionGroupAPI.valuesOf() to retrieve and set calculation units\n         *\n         * @param  {Object} params  matches the api endpoint params (title, weight etc)\n         * @return {Promise}\n         */\n        all: function (params) {\n          return absenceTypeAPI.all(params).then(function (absenceTypes) {\n            return absenceTypes.map(function (absenceType) {\n              return instance.init(absenceType, true);\n            });\n          });\n        },\n\n        /**\n         * Calls the calculateToilExpiryDate() method of the AbsenceType API\n         *\n         * @param  {string} absenceTypeID\n         * @param  {Object} date\n         * @param  {Object} params\n         * @return {Promise}\n         */\n        calculateToilExpiryDate: function (absenceTypeID, date, params) {\n          return absenceTypeAPI.calculateToilExpiryDate(absenceTypeID, date, params);\n        },\n\n        /**\n         * Determines if the absence type can expire by querying if\n         * the expiration unit and duration are not null.\n         *\n         * @param   {string} absenceTypeId\n         * @return  {Promise}\n         */\n        canExpire: function (absenceTypeId) {\n          return absenceTypeAPI.all({\n            accrual_expiration_unit: { 'IS NOT NULL': 1 },\n            accrual_expiration_duration: { 'IS NOT NULL': 1 },\n            allow_accruals_request: 1,\n            id: absenceTypeId,\n            options: { limit: 1 },\n            return: ['id']\n          })\n          .then(function (results) {\n            return results.length > 0;\n          });\n        },\n        /**\n         * Retrieves calculation units\n         * and sets units symbols to provided absence types accordingly\n         *\n         * Example: if a unit name is \"hours\", then the symbol will be \"h\"\n         *\n         * @param   {Array} absenceTypes array of absence types or their instances\n         * @return  {Promise} resolves with the input populated with calculation unit symbols\n         */\n        loadCalculationUnits: function (absenceTypes) {\n          return OptionGroup.valuesOf('hrleaveandabsences_absence_type_calculation_unit')\n            .then(function (calculationUnits) {\n              calculationUnits = _.indexBy(calculationUnits, 'value');\n\n              return _.map(absenceTypes, function (absenceType) {\n                return _.assign(absenceType, {\n                  calculation_unit_label: calculationUnits[absenceType.calculation_unit].label,\n                  calculation_unit_name: calculationUnits[absenceType.calculation_unit].name\n                });\n              });\n            });\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/vagrant/hr1703/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/models/absence-type.model.js"),eval("define('job-contract/controllers/controllers',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('hrjc.controllers', []);\n});\n\n//# sourceURL=/job-contract/controllers/controllers.js"),eval("define('job-contract/filters/filters',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('hrjc.filters', []);\n});\n\n//# sourceURL=/job-contract/filters/filters.js"),eval("define('job-contract/filters/get-obj-by-id',[\n    'job-contract/filters/filters'\n], function (filters) {\n    'use strict';\n\n    filters.filter('getObjById',['$log', function ($log) {\n        $log.debug('Filter: getObjById');\n\n        return function(input, id, key) {\n\n            if (!input) {\n                return null\n            }\n\n            var i=0, len=input.length;\n            for (; i<len; i++) {\n                if (+input[i].id == +id) {\n                    return !key ? input[i] : input[i][key];\n                }\n            }\n            return null;\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/filters/get-obj-by-id.js"),eval("define('job-contract/services/services',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('hrjc.services', []);\n});\n\n//# sourceURL=/job-contract/services/services.js"),eval("define('job-contract/services/utils',[\n  'job-contract/services/services'\n], function(services) {\n  'use strict';\n\n  services.factory('API', ['$resource', '$q', 'settings', '$log', function($resource, $q, settings, $log) {\n    $log.debug('Service: UtilsService');\n\n    return {\n      resource: function(entity, action, json) {\n\n        if ((!entity || typeof entity !== 'string') ||\n          (!action || typeof action !== 'string') ||\n          (json && typeof json !== 'object')) {\n          return null;\n        }\n\n        return $resource(settings.pathRest, {\n          action: action,\n          entity: entity,\n          json: json\n        })\n      },\n      getOne: function(entity, params) {\n\n        if ((!entity || typeof entity !== 'string') ||\n          (params && typeof params !== 'object')) {\n          return null;\n        }\n\n        var deffered = $q.defer(),\n          json = angular.extend({\n            sequential: 1\n          }, params),\n          val;\n\n        this.resource(entity, 'get', json).get(function(data) {\n          val = data.values;\n          deffered.resolve(val.length == 1 ? val[0] : null);\n        }, function() {\n          deffered.reject('Unable to fetch data');\n        });\n\n        return deffered.promise;\n      },\n      get: function(entity, params) {\n\n        if ((!entity || typeof entity !== 'string') ||\n          (params && typeof params !== 'object')) {\n          return null;\n        }\n\n        var deffered = $q.defer(),\n          json = angular.extend({\n            sequential: 1\n          }, params);\n\n        this.resource(entity, 'get', json).get(function(data) {\n          deffered.resolve(data.values);\n        }, function() {\n          deffered.reject('Unable to fetch data');\n        });\n\n        return deffered.promise;\n      }\n    }\n  }]);\n\n  services.factory('testAPI', ['$resource', 'settings', function($resource, settings) {\n    return {\n      resource: function(entity, action, json) {\n\n        if ((!entity || typeof entity !== 'string') ||\n          (!action || typeof action !== 'string') ||\n          (json && typeof json !== 'object')) {\n          return null;\n        }\n\n        return $resource(settings.pathApp + 'js/data/' + entity + '.json', {\n          action: action,\n          entity: entity,\n          json: json\n        })\n      }\n    }\n  }]);\n\n  services.factory('UtilsService', ['API', 'testAPI', 'settings', '$q', '$log', '$timeout', function(API, testAPI, settings, $q, $log, $timeout) {\n    return {\n\n      /**\n       * Returns a promise that resolves to an array with including all of the Absence Types.\n       *\n       * Each returned Absence Type includes these fields:\n       * - id\n       * - title\n       * - default_entitlement\n       * - add_public_holiday_to_entitlement\n       *\n       * @returns {Promise}\n       */\n      getAbsenceTypes: function(){\n        var deffered = $q.defer();\n\n        API.resource('AbsenceType','get', {\n          \"return\": \"id,title,default_entitlement,add_public_holiday_to_entitlement\"\n        }).get(function (data) {\n          angular.forEach(data.values, function (value) {\n            value.add_public_holiday_to_entitlement = !!parseInt(value.add_public_holiday_to_entitlement);\n            // The default_entitlement is return by the API as a string\n            // so here we cast it to a float, to make it easy to do calculations and\n            // to display the value in forms\n            value.default_entitlement = parseFloat(value.default_entitlement);\n          });\n\n          deffered.resolve(data.values);\n        },function () {\n          deffered.reject('Unable to fetch absence types');\n        });\n\n        return deffered.promise;\n      },\n\n      getHoursLocation: function() {\n        var deffered = $q.defer();\n\n        API.resource('HRHoursLocation', 'get', {\n          sequential: 1,\n          is_active: 1\n        }).get(function(data) {\n          deffered.resolve(data.values);\n        }, function() {\n          deffered.reject('Unable to fetch standard hours');\n        });\n\n        return deffered.promise;\n      },\n      getPayScaleGrade: function() {\n        var deffered = $q.defer();\n\n        API.resource('HRPayScale', 'get', {\n          sequential: 1,\n          is_active: 1\n        }).get(function(data) {\n          deffered.resolve(data.values);\n        }, function() {\n          deffered.reject('Unable to fetch standard hours');\n        });\n\n        return deffered.promise;\n      },\n\n      /**\n       * Returns a promise that resolves the an int with the number of Public Holidays in the\n       * current Absence Period\n       *\n       * @returns {Promise}\n       */\n      getNumberOfPublicHolidaysInCurrentPeriod: function() {\n        var deffered = $q.defer();\n\n        API.resource('PublicHoliday', 'getcountforcurrentperiod', {\n          sequential: 1\n        }).get(function (data) {\n          var number = parseInt(data.result) || 0;\n\n          deffered.resolve(number);\n        }, function () {\n          deffered.reject('Unable to fetch the number of public holidays in current period');\n        });\n\n        return deffered.promise;\n      },\n\n      prepareEntityIds: function(entityObj, contractId, revisionId) {\n\n        function setIds(entityObj) {\n          entityObj.jobcontract_id = contractId;\n          delete entityObj.id;\n          revisionId ? entityObj.jobcontract_revision_id = revisionId : delete entityObj.jobcontract_revision_id;\n        }\n\n        if (angular.isArray(entityObj)) {\n          var i = 0,\n            len = entityObj.length;\n          for (i; i < len; i++) {\n            setIds(entityObj[i]);\n          }\n          return\n        }\n\n        if (angular.isObject(entityObj)) {\n          setIds(entityObj);\n          return\n        }\n\n      },\n      errorHandler: function(data, msg, deffered) {\n        var errorMsg;\n\n        if (data.is_error) {\n          errorMsg = data.error_message.split('_').join(' ');\n          errorMsg = errorMsg.charAt(0).toUpperCase() + errorMsg.slice(1);\n\n          $log.error('Unable to save. ' + '\\n' + errorMsg);\n\n          if (deffered) {\n            deffered.reject('Unable to save. ' + '\\n' + errorMsg);\n          }\n\n          if (data.trace) {\n            $log.error(data.trace);\n          }\n\n          return true;\n        }\n\n        if (!data.values) {\n          $log.error(msg || 'Unknown Error');\n\n          if (deffered) {\n            deffered.reject(msg || 'Unknown Error');\n          }\n          return true;\n        }\n      },\n\n      /**\n       * Returns the URL to the Manage Entitlement page.\n       *\n       * The given contact ID is added to the URL, as the cid parameter.\n       *\n       * @param {int} contactId\n       */\n      getManageEntitlementsPageURL: function(contactId) {\n        var path = 'civicrm/admin/leaveandabsences/periods/manage_entitlements';\n        var returnPath = 'civicrm/contact/view';\n        var returnUrl = CRM.url(returnPath, { cid: contactId, selectedChild : 'hrjobcontract' });\n        return CRM.url(path, { cid: contactId, returnUrl : returnUrl });\n      }\n    }\n  }]);\n});\n\n//# sourceURL=/job-contract/services/utils.js"),eval("define('job-contract/services/contract-details',[\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function(services) {\n  'use strict';\n\n  services.factory('ContractDetailsService', ['$filter', '$resource', 'settings', '$q', 'UtilsService', '$log',\n    function($filter, $resource, settings, $q, UtilsService, $log) {\n      $log.debug('Service: ContractDetailsService');\n\n      var ContractDetails = $resource(settings.pathRest, {\n        action: 'get',\n        entity: 'HRJobDetails',\n        json: {}\n      });\n\n      /**\n       * If parameter passed is a Date object, it converts it into a string\n       *\n       * @param {Date} dateObj\n       * @param {string/any}\n       */\n      function convertToDateString(dateObj) {\n        var dateString = $filter('formatDate')(dateObj, 'YYYY-MM-DD');\n\n        return dateString !== 'Unspecified' ? dateString : dateObj;\n      }\n\n      return {\n        validateDates: function(params) {\n          if ((!params || typeof params !== 'object') ||\n            (!params.contact_id) ||\n            (!params.period_start_date)) {\n            return null;\n          }\n\n          params.period_start_date = convertToDateString(params.period_start_date);\n          params.period_end_date = convertToDateString(params.period_end_date);\n\n          params.sequential = 0;\n          params.debug = settings.debug;\n\n          var deffered = $q.defer(),\n            val;\n\n          ContractDetails.save({\n              action: 'validatedates',\n              json: params\n            },\n            null,\n            function(data) {\n              if (UtilsService.errorHandler(data, 'Unable to fetch API \"validatedates\" response', deffered)) {\n                return;\n              }\n\n              val = data.values;\n              deffered.resolve(val);\n            });\n          return deffered.promise;\n        },\n        getOne: function(params) {\n\n          if ((!params || typeof params !== 'object') ||\n            (!params.jobcontract_id && !params.jobcontract_revision_id) ||\n            (params.jobcontract_id && typeof + params.jobcontract_id !== 'number') ||\n            (params.jobcontract_revision_id && typeof + params.jobcontract_revision_id !== 'number')) {\n            return null;\n          }\n\n          params.sequential = 1;\n          params.debug = settings.debug;\n\n          var deffered = $q.defer(),\n            val;\n\n          ContractDetails.get({\n            json: params\n          }, function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to fetch contract details', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to fetch contract details');\n          });\n\n          return deffered.promise;\n        },\n        getOptions: function(fieldName, callAPI) {\n          var deffered = $q.defer(),\n            data;\n\n          if (!callAPI) {\n            data = settings.CRM.options.HRJobDetails || {};\n\n            if (fieldName && typeof fieldName === 'string') {\n              data = data[fieldName];\n            }\n\n            deffered.resolve(data || {});\n          } else {\n            //TODO call2API\n          }\n\n          return deffered.promise;\n        },\n        getFields: function(params) {\n\n          if (params && typeof params !== 'object') {\n            return null;\n          }\n\n          if (!params || typeof params !== 'object') {\n            params = {};\n          }\n\n          var deffered = $q.defer(),\n            crmFields = settings.CRM.fields;\n\n          if (crmFields && crmFields.HRJobDetails) {\n            deffered.resolve(crmFields.HRJobDetails);\n          } else {\n            params.sequential = 1;\n\n            ContractDetails.get({\n              action: 'getfields',\n              json: params\n            },\n            function(data) {\n\n              if (!data.values) {\n                deffered.reject('Unable to fetch contract details fields');\n              }\n\n              deffered.resolve(data.values);\n            }, function() {\n              deffered.reject('Unable to fetch contract details fields');\n            });\n          }\n\n          return deffered.promise;\n        },\n        save: function(contractDetails) {\n\n          if (!contractDetails || typeof contractDetails !== 'object') {\n            return null;\n          }\n\n          contractDetails.period_start_date = convertToDateString(contractDetails.period_start_date);\n          contractDetails.period_end_date = convertToDateString(contractDetails.period_end_date);\n\n          var deffered = $q.defer(),\n            params = angular.extend({\n              sequential: 1,\n              debug: settings.debug\n            }, contractDetails),\n            val;\n\n          ContractDetails.save({\n            action: 'create',\n            json: params\n          },\n          null,\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to create contract details', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to create contract details');\n          });\n\n          return deffered.promise;\n        },\n        model: function(fields) {\n\n          var deffered = $q.defer();\n\n          function createModel(fields) {\n            var i = 0,\n              len = fields.length,\n              model = {};\n\n            for (i; i < len; i++) {\n              model[fields[i].name] = '';\n            }\n\n            if (typeof model.id !== 'undefined') {\n              model.id = null;\n            }\n\n            if (typeof model.jobcontract_revision_id !== 'undefined') {\n              model.jobcontract_revision_id = null;\n            }\n\n            if (typeof model.location !== 'undefined') {\n              model.location = null;\n            }\n\n            return model;\n          }\n\n          if (fields) {\n            deffered.resolve(createModel(fields));\n          } else {\n            this.getFields().then(function(fields) {\n              deffered.resolve(createModel(fields));\n            });\n          }\n\n          return deffered.promise;\n        }\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/services/contract-details.js"),eval("define('job-contract/services/contract-hour',[\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function(services) {\n  'use strict';\n\n  services.factory('ContractHourService', ['$resource', 'settings', '$q', 'UtilsService', '$log',\n    function($resource, settings, $q, UtilsService, $log) {\n      $log.debug('Service: ContractHourService');\n\n      var ContractHour = $resource(settings.pathRest, {\n        action: 'get',\n        entity: 'HRJobHour',\n        json: {}\n      });\n\n      return {\n        getOne: function(params) {\n\n          if ((!params || typeof params !== 'object') ||\n            (!params.jobcontract_revision_id) ||\n            (params.jobcontract_revision_id && typeof + params.jobcontract_revision_id !== 'number')) {\n            return null;\n          }\n\n          params.sequential = 1;\n          params.debug = settings.debug;\n\n          var deffered = $q.defer(),\n            val;\n\n          ContractHour.get({\n            json: params\n          },\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to fetch contract hours', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to fetch contract hours');\n          });\n\n          return deffered.promise;\n        },\n        getOptions: function(fieldName, callAPI) {\n          var deffered = $q.defer(),\n            data;\n\n          if (!callAPI) {\n            var data = settings.CRM.options.HRJobHour || {};\n\n            if (fieldName && typeof fieldName === 'string') {\n              data = data[fieldName];\n            }\n\n            deffered.resolve(data || {});\n          } else {\n            //TODO call2API\n          }\n\n          return deffered.promise;\n        },\n        getFields: function(params) {\n\n          if (params && typeof params !== 'object') {\n            return null;\n          }\n\n          if (!params || typeof params !== 'object') {\n            params = {};\n          }\n\n          var deffered = $q.defer(),\n            crmFields = settings.CRM.fields;\n\n          if (crmFields && crmFields.HRJobHour) {\n            deffered.resolve(crmFields.HRJobHour);\n          } else {\n            params.sequential = 1;\n\n            ContractHour.get({\n              action: 'getfields',\n              json: params\n            },\n            function(data) {\n\n              if (!data.values) {\n                deffered.reject('Unable to fetch contract hours fields');\n              }\n\n              deffered.resolve(data.values);\n            },\n            function() {\n              deffered.reject('Unable to fetch contract hours fields');\n            });\n          }\n\n          return deffered.promise;\n        },\n        save: function(contractHour) {\n\n          if (!contractHour || typeof contractHour !== 'object') {\n            return null;\n          }\n\n          var deffered = $q.defer(),\n            params = angular.extend({\n              sequential: 1,\n              debug: settings.debug\n            }, contractHour),\n            val;\n\n          ContractHour.save({\n            action: 'create',\n            json: params\n          },\n          null,\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to create contract hours', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to create contract hours');\n          });\n\n          return deffered.promise;\n        },\n        model: function(fields) {\n\n          var deffered = $q.defer();\n\n          function createModel(fields) {\n            var i = 0,\n              len = fields.length,\n              model = {};\n\n            for (i; i < len; i++) {\n              model[fields[i].name] = '';\n            }\n\n            if (typeof model.id !== 'undefined') {\n              model.id = null;\n            }\n\n            if (typeof model.jobcontract_revision_id !== 'undefined') {\n              model.jobcontract_revision_id = null;\n            }\n\n            return model;\n          }\n\n          if (fields) {\n            deffered.resolve(createModel(fields));\n          } else {\n            this.getFields().then(function(fields) {\n              deffered.resolve(createModel(fields));\n            });\n          }\n\n          return deffered.promise;\n        }\n      }\n\n    }]);\n\n});\n\n//# sourceURL=/job-contract/services/contract-hour.js"),eval("define('job-contract/services/contract-health',[\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function(services) {\n  'use strict';\n\n  services.factory('ContractHealthService', ['$resource', 'settings', '$q', 'UtilsService', '$log',\n    function($resource, settings, $q, UtilsService, $log) {\n      $log.debug('Service: ContractHealthService');\n\n      var ContractHealth = $resource(settings.pathRest, {\n        action: 'get',\n        entity: 'HRJobHealth',\n        json: {}\n      });\n\n      return {\n        getOne: function(params) {\n\n          if ((!params || typeof params !== 'object') ||\n            (!params.jobcontract_revision_id) ||\n            (params.jobcontract_revision_id && typeof + params.jobcontract_revision_id !== 'number')) {\n            return null;\n          }\n\n          params.sequential = 1;\n          params.debug = settings.debug;\n\n          var deffered = $q.defer(),\n            val;\n\n          ContractHealth.get({\n            json: params\n          },\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to fetch contract Health', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to fetch contract Health');\n          });\n\n          return deffered.promise;\n        },\n        getOptions: function(fieldName, callAPI) {\n          var deffered = $q.defer(),\n            params = {},\n            data;\n\n          if (!callAPI) {\n            var data = settings.CRM.options.HRJobHealth || {};\n\n            if (fieldName && typeof fieldName === 'string') {\n              data = data[fieldName];\n            }\n\n            deffered.resolve(data || {});\n          } else {\n            params.sequential = 1;\n\n            if (fieldName && typeof fieldName === 'string') {\n              params.field = fieldName;\n            }\n\n            ContractHealth.get({\n              action: 'getoptions',\n              json: params\n            },\n            function(data) {\n              if (!data.values) {\n                deffered.reject('Unable to fetch contract insurance options');\n              }\n              deffered.resolve(data.values);\n            },\n            function() {\n              deffered.reject('Unable to fetch contract insurance options');\n            });\n          }\n\n          return deffered.promise;\n        },\n        getFields: function(params) {\n\n          if (params && typeof params !== 'object') {\n            return null;\n          }\n\n          if (!params || typeof params !== 'object') {\n            params = {};\n          }\n\n          var deffered = $q.defer(),\n            crmFields = settings.CRM.fields;\n\n          if (crmFields && crmFields.HRJobHealth) {\n            deffered.resolve(crmFields.HRJobHealth);\n          } else {\n            params.sequential = 1;\n\n            ContractHealth.get({\n              action: 'getfields',\n              json: params\n            },\n            function(data) {\n\n              if (!data.values) {\n                deffered.reject('Unable to fetch contract insurance fields');\n              }\n\n              deffered.resolve(data.values);\n            },\n            function() {\n              deffered.reject('Unable to fetch contract insurance fields');\n            });\n          }\n\n          return deffered.promise;\n        },\n        save: function(contractHealth) {\n\n          if (!contractHealth || typeof contractHealth !== 'object') {\n            return null;\n          }\n\n          var deffered = $q.defer(),\n            params = angular.extend({\n              sequential: 1,\n              debug: settings.debug\n            }, contractHealth),\n            val;\n\n          ContractHealth.save({\n            action: 'create',\n            json: params\n          },\n          null,\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to create contract insurance', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to create contract insurance');\n          });\n\n          return deffered.promise;\n        },\n        model: function(fields) {\n\n          var deffered = $q.defer();\n\n          function createModel(fields) {\n            var i = 0,\n              len = fields.length,\n              model = {};\n\n            for (i; i < len; i++) {\n              model[fields[i].name] = '';\n            }\n\n            if (typeof model.id !== 'undefined') {\n              model.id = null;\n            }\n\n            if (typeof model.jobcontract_revision_id !== 'undefined') {\n              model.jobcontract_revision_id = null;\n            }\n\n            return model;\n          }\n\n          if (fields) {\n            deffered.resolve(createModel(fields));\n          } else {\n            this.getFields().then(function(fields) {\n              deffered.resolve(createModel(fields));\n            });\n          }\n\n          return deffered.promise;\n        }\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/services/contract-health.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract-leave',[\n  'common/lodash',\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function (_, services) {\n  'use strict';\n\n  services.factory('ContractLeaveService', ['$resource', '$q', 'settings', 'UtilsService', '$log', 'AbsenceType',\n    function ($resource, $q, settings, UtilsService, $log, AbsenceType) {\n      $log.debug('Service: ContractLeaveService');\n\n      var ContractLeave = $resource(settings.pathRest, {\n        action: 'get',\n        entity: 'HRJobLeave',\n        json: {}\n      });\n\n      /**\n       * The API returns values as strings, so we convert them to booleans to\n       * make it easy to use them inside conditions\n       *\n       * @param {Object} values - The values object as returned by the API\n       */\n      function adjustAddPublicHolidaysValue (values) {\n        _.each(values, function (value) {\n          value.add_public_holidays = !!parseInt(value.add_public_holidays);\n        });\n      }\n\n      /**\n       * Gets Absence Types and populates calculation units to them\n       *\n       * @return {Promise} resolved with absence types\n       */\n      function getAbsenceTypes () {\n        return AbsenceType.all({ options: { sort: 'id ASC' } })\n        .then(AbsenceType.loadCalculationUnits)\n        .then(function (absenceTypes) {\n          return _.indexBy(absenceTypes, 'id');\n        });\n      }\n\n      return {\n        getOne: function (params) {\n          var deffered = $q.defer();\n\n          if ((!params || typeof params !== 'object') ||\n            (!params.jobcontract_revision_id) ||\n            (params.jobcontract_revision_id && typeof +params.jobcontract_revision_id !== 'number') ||\n            (params.id && typeof +params.id !== 'number') ||\n            (params.leaveType && typeof +params.leaveType !== 'number')) {\n            return null;\n          }\n\n          params.sequential = 1;\n          params.debug = settings.debug;\n\n          ContractLeave.get({\n            json: params\n          },\n          function (data) {\n            if (UtilsService.errorHandler(data, 'Unable to fetch contract leave', deffered)) {\n              return;\n            }\n\n            adjustAddPublicHolidaysValue(data.values);\n\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to fetch contract leave');\n          });\n\n          return deffered.promise;\n        },\n        getOptions: function (fieldName, callAPI) {\n          var data;\n          var deffered = $q.defer();\n\n          if (!callAPI) {\n            data = settings.CRM.options.HRJobLeave || {};\n\n            if (fieldName && typeof fieldName === 'string') {\n              data = data[fieldName];\n            }\n\n            deffered.resolve(data || {});\n          } else {\n            // TODO call2API\n          }\n\n          return deffered.promise;\n        },\n        getFields: function (params) {\n          var deffered = $q.defer();\n          var crmFields = settings.CRM.fields;\n\n          if (params && typeof params !== 'object') {\n            return null;\n          }\n\n          if (!params || typeof params !== 'object') {\n            params = {};\n          }\n\n          if (crmFields && crmFields.HRJobLeave) {\n            deffered.resolve(crmFields.HRJobLeave);\n          } else {\n            params.sequential = 1;\n\n            ContractLeave.get({\n              action: 'getfields',\n              json: params\n            },\n            function (data) {\n              if (!data.values) {\n                deffered.reject('Unable to fetch contract leave fields');\n              }\n\n              deffered.resolve(data.values);\n            },\n            function () {\n              deffered.reject('Unable to fetch contract leave fields');\n            });\n          }\n\n          return deffered.promise;\n        },\n        save: function (contractLeave) {\n          var deffered = $q.defer();\n          var params = {\n            sequential: 1,\n            values: contractLeave,\n            debug: settings.debug\n          };\n\n          if (!contractLeave || typeof contractLeave !== 'object') {\n            return null;\n          }\n\n          ContractLeave.save({\n            action: 'replace',\n            json: params\n          },\n          null,\n          function (data) {\n            if (UtilsService.errorHandler(data, 'Unable to create contract leave', deffered)) {\n              return;\n            }\n\n            adjustAddPublicHolidaysValue(data.values);\n\n            deffered.resolve(data.values);\n          },\n          function () {\n            deffered.reject('Unable to create contract details');\n          });\n\n          return deffered.promise;\n        },\n        model: function (fields, leaveType) {\n          var deffered = $q.defer();\n          var leaveTypePromise = !leaveType || typeof leaveType !== 'object' ? getAbsenceTypes() : leaveType;\n\n          function createModel (leaveType, fields) {\n            var i = 0;\n            var len = fields.length;\n            var model = [];\n            var modelEntry = {};\n\n            for (i; i < len; i++) {\n              modelEntry[fields[i].name] = '';\n            }\n\n            if (typeof modelEntry.id !== 'undefined') {\n              modelEntry.id = null;\n            }\n\n            if (typeof modelEntry.jobcontract_revision_id !== 'undefined') {\n              modelEntry.jobcontract_revision_id = null;\n            }\n\n            if (typeof modelEntry.location !== 'undefined') {\n              modelEntry.location = null;\n            }\n\n            if ((!leaveType || typeof leaveType !== 'object') ||\n              (!modelEntry || typeof modelEntry !== 'object' || typeof modelEntry.leave_type === 'undefined')) {\n              return null;\n            }\n\n            /**\n             * This is a little helper method to calculate the estimated leave amount for a\n             * leave type.\n             *\n             * If this leave type has \"add_public_holidays\" set, the estimated amount will be\n             * the leave amount + the given number of Public Holidays. Otherwise, the estimated\n             * amount is the same as the leave amount.\n             *\n             * @param {number} numberOfPublicHolidays\n             * @returns {number}\n             */\n            modelEntry.getEstimatedLeaveAmount = function (numberOfPublicHolidays) {\n              if (this.add_public_holidays && numberOfPublicHolidays) {\n                return parseFloat(this.leave_amount) + numberOfPublicHolidays;\n              }\n\n              return this.leave_amount;\n            };\n\n            _.each(leaveType, function (type, typeId) {\n              modelEntry.leave_type = type.id;\n              modelEntry.leave_type_title = type.title;\n              modelEntry.leave_calculation_unit_name = type.calculation_unit_name;\n              modelEntry.leave_calculation_unit_label = type.calculation_unit_label;\n              modelEntry.leave_amount = 0;\n              modelEntry.is_add_public_holidays_readonly = type.calculation_unit_name === 'hours';\n\n              model.push(_.cloneDeep(modelEntry));\n            });\n\n            return model;\n          }\n\n          if (fields) {\n            $q.when(leaveTypePromise).then(function (options) {\n              deffered.resolve(createModel(options, fields));\n            });\n          } else {\n            this.getFields().then(function (fields) {\n              $q.when(leaveTypePromise).then(function (options) {\n                deffered.resolve(createModel(options, fields));\n              });\n            });\n          }\n\n          return deffered.promise;\n        }\n      };\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/services/contract-leave.js"),eval("define('job-contract/services/contract-pay',[\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function(services) {\n  'use strict';\n\n  services.factory('ContractPayService', ['$resource', 'settings', '$q', 'UtilsService', '$log',\n    function($resource, settings, $q, UtilsService, $log) {\n      $log.debug('Service: ContractPayService');\n\n      var ContractPay = $resource(settings.pathRest, {\n        action: 'get',\n        entity: 'HRJobPay',\n        json: {}\n      });\n\n      return {\n        getOne: function(params) {\n\n          if ((!params || typeof params !== 'object') ||\n            (!params.jobcontract_revision_id) ||\n            (params.jobcontract_revision_id && typeof + params.jobcontract_revision_id !== 'number')) {\n            return null;\n          }\n\n          params.sequential = 1;\n          params.debug = settings.debug;\n\n          var deffered = $q.defer(),\n            val;\n\n          ContractPay.get({\n            json: params\n          },\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to fetch contract pay', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to fetch contract pay');\n          });\n\n          return deffered.promise;\n        },\n        getOptions: function(fieldName, callAPI) {\n          var deffered = $q.defer(),\n            data;\n\n          if (!callAPI) {\n            var data = settings.CRM.options.HRJobPay || {};\n\n            if (fieldName && typeof fieldName === 'string') {\n              data = data[optionGroup];\n            }\n\n            deffered.resolve(data || {});\n          } else {\n            //TODO call2API\n          }\n\n          return deffered.promise;\n        },\n        getFields: function(params) {\n\n          if (params && typeof params !== 'object') {\n            return null;\n          }\n\n          if (!params || typeof params !== 'object') {\n            params = {};\n          }\n\n          var deffered = $q.defer(),\n            crmFields = settings.CRM.fields;\n\n          if (crmFields && crmFields.HRJobPay) {\n            deffered.resolve(crmFields.HRJobPay);\n          } else {\n            params.sequential = 1;\n\n            ContractPay.get({\n              action: 'getfields',\n              json: params\n            },\n            function(data) {\n\n              if (!data.values) {\n                deffered.reject('Unable to fetch contract pay fields');\n              }\n\n              deffered.resolve(data.values);\n            },\n            function() {\n              deffered.reject('Unable to fetch contract pay fields');\n            });\n          }\n\n          return deffered.promise;\n        },\n        save: function(contractPay) {\n\n          if (!contractPay || typeof contractPay !== 'object') {\n            return null;\n          }\n\n          var deffered = $q.defer(),\n            params = angular.extend({\n              sequential: 1,\n              debug: settings.debug\n            }, contractPay),\n            val;\n\n          ContractPay.save({\n            action: 'create',\n            json: params\n          },\n          null,\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to create contract pay', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to create contract pay');\n          });\n\n          return deffered.promise;\n        },\n        model: function(fields) {\n\n          var deffered = $q.defer();\n\n          function createModel(fields) {\n            var i = 0,\n              len = fields.length,\n              model = {};\n\n            for (i; i < len; i++) {\n              model[fields[i].name] = '';\n            }\n\n            if (typeof model.id !== 'undefined') {\n              model.id = null;\n            }\n\n            if (typeof model.jobcontract_revision_id !== 'undefined') {\n              model.jobcontract_revision_id = null;\n            }\n\n            if (typeof model.annual_benefits !== 'undefined') {\n              model.annual_benefits = [];\n            }\n\n            if (typeof model.annual_deductions !== 'undefined') {\n              model.annual_deductions = [];\n            }\n\n            return model;\n          }\n\n          if (fields) {\n            deffered.resolve(createModel(fields));\n          } else {\n            this.getFields().then(function(fields) {\n              deffered.resolve(createModel(fields));\n            });\n          }\n\n          return deffered.promise;\n        }\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/services/contract-pay.js"),eval("define('job-contract/services/contract-pension',[\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function(services) {\n  'use strict';\n\n  services.factory('ContractPensionService', ['$resource', 'settings', '$q', 'UtilsService', '$log',\n    function($resource, settings, $q, UtilsService, $log) {\n      $log.debug('Service: ContractPensionService');\n\n      var ContractPension = $resource(settings.pathRest, {\n        action: 'get',\n        entity: 'HRJobPension',\n        json: {}\n      });\n\n      return {\n        getOne: function(params) {\n\n          if ((!params || typeof params !== 'object') ||\n            (!params.jobcontract_revision_id) ||\n            (params.jobcontract_revision_id && typeof + params.jobcontract_revision_id !== 'number')) {\n            return null;\n          }\n\n          params.sequential = 1;\n          params.debug = settings.debug;\n\n          var deffered = $q.defer(),\n            val;\n\n          ContractPension.get({\n            json: params\n          },\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to fetch contract pension', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to fetch contract pension');\n          });\n\n          return deffered.promise;\n        },\n        getOptions: function(fieldName, callAPI) {\n          var deffered = $q.defer(),\n            data;\n\n          if (!callAPI) {\n            var data = settings.CRM.options.HRJobPension || {};\n\n            if (fieldName && typeof fieldName === 'string') {\n              data = data[optionGroup];\n            }\n\n            deffered.resolve(data || {});\n          } else {\n            //TODO call2API\n          }\n\n          return deffered.promise;\n        },\n        getFields: function(params) {\n\n          if (params && typeof params !== 'object') {\n            return null;\n          }\n\n          if (!params || typeof params !== 'object') {\n            params = {};\n          }\n\n          var deffered = $q.defer(),\n            crmFields = settings.CRM.fields;\n\n          if (crmFields && crmFields.HRJobPension) {\n            deffered.resolve(crmFields.HRJobPension);\n          } else {\n            params.sequential = 1;\n\n            ContractPension.get({\n              action: 'getfields',\n              json: params\n            },\n            function(data) {\n\n              if (!data.values) {\n                deffered.reject('Unable to fetch contract pension fields');\n              }\n\n              deffered.resolve(data.values);\n            },\n            function() {\n              deffered.reject('Unable to fetch contract pension fields');\n            });\n          }\n\n          return deffered.promise;\n        },\n        save: function(contractPension) {\n\n          if (!contractPension || typeof contractPension !== 'object') {\n            return null;\n          }\n\n          var deffered = $q.defer(),\n            params = angular.extend({\n              sequential: 1,\n              debug: settings.debug\n            }, contractPension),\n            val;\n\n          ContractPension.save({\n            action: 'create',\n            json: params\n          },\n          null,\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to create contract pension', deffered)) {\n              return\n            }\n\n            val = data.values;\n            deffered.resolve(val.length == 1 ? val[0] : null);\n          },\n          function() {\n            deffered.reject('Unable to create contract pension');\n          });\n\n          return deffered.promise;\n        },\n        model: function(fields) {\n\n          var deffered = $q.defer();\n\n          function createModel(fields) {\n            var i = 0,\n              len = fields.length,\n              model = {};\n\n            for (i; i < len; i++) {\n              model[fields[i].name] = '';\n            }\n\n            if (typeof model.id !== 'undefined') {\n              model.id = null;\n            }\n\n            if (typeof model.jobcontract_revision_id !== 'undefined') {\n              model.jobcontract_revision_id = null;\n            }\n\n            return model;\n          }\n\n          if (fields) {\n            deffered.resolve(createModel(fields));\n          } else {\n            this.getFields().then(function(fields) {\n              deffered.resolve(createModel(fields));\n            });\n          }\n\n          return deffered.promise;\n        }\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/services/contract-pension.js"),eval("define('job-contract/controllers/contract-list',[\n  'job-contract/controllers/controllers',\n  'job-contract/filters/get-obj-by-id',\n  'job-contract/services/contract-details',\n  'job-contract/services/contract-hour',\n  'job-contract/services/contract-health',\n  'job-contract/services/contract-leave',\n  'job-contract/services/contract-pay',\n  'job-contract/services/contract-pension',\n  'job-contract/services/utils',\n  'common/services/pub-sub',\n], function(controllers) {\n  'use strict';\n\n  controllers.controller('ContractListCtrl', ['$scope', '$rootElement', '$rootScope', '$uibModal', '$q', '$filter', '$sce',\n    'contractList', 'ContractService', 'ContractDetailsService', 'ContractHourService', 'ContractPayService',\n    'ContractLeaveService', 'ContractHealthService', 'ContractPensionService', 'UtilsService', 'settings', '$log', 'pubSub', '$window',\n    function($scope, $rootElement, $rootScope, $modal, $q, $filter, $sce, contractList, ContractService, ContractDetailsService,\n      ContractHourService, ContractPayService, ContractLeaveService, ContractHealthService, ContractPensionService,\n      UtilsService, settings, $log, pubSub, $window) {\n      $log.debug('Controller: ContractListCtrl');\n\n      var entityServices = {\n          details: ContractDetailsService,\n          hour: ContractHourService,\n          pay: ContractPayService,\n          leave: ContractLeaveService,\n          health: ContractHealthService,\n          pension: ContractPensionService\n        },\n        promiseUtils = {\n          hoursLocation: UtilsService.getHoursLocation(),\n          payScaleGrade: UtilsService.getPayScaleGrade(),\n          absenceTypes: UtilsService.getAbsenceTypes()\n        },\n        entityName, promiseFields = {},\n        promiseModel = {};\n\n      $scope.contractListLoaded = false;\n      $scope.contractCurrent = [];\n      $scope.contractPast = [];\n      $scope.utils = {\n        contractListLen: contractList.length\n      };\n\n      $scope.tooltips = {\n        changeContractTerms: $sce.trustAsHtml('<div>' +\n          '<p class=\"text-left\"><strong>Change Contract Terms:</strong><br>' +\n          'When an employeees job or role changes, i.e. promotion, secondment or move,' +\n          'you can use this wizard to update the details of the contract and record a new' +\n          'revision of the contract. A contract history is kept so you can always see the' +\n          'previous version of the contract.</p>' +\n          '<p class=\"text-left\"><strong>Correct an error on the contract record:</strong><br>' +\n          'If you notice an issue or error with the job terms you can correct these without' +\n          'creating a new job history record. These changes are not stored as a new revision' +\n          'of the contract.</p>' +\n          '</div>')\n      };\n\n      for (entityName in entityServices) {\n        promiseFields[entityName] = entityServices[entityName].getFields();\n      }\n\n      $q.all(promiseFields).then(function(fields) {\n        $scope.fields = fields;\n\n        $log.debug('FIELDS:');\n        $log.debug(fields);\n\n        for (entityName in entityServices) {\n          promiseModel[entityName] = entityServices[entityName].model(fields[entityName]);\n        }\n\n        return $q.all(promiseModel);\n\n      }).then(function(model) {\n        $scope.model = model;\n\n        $log.debug('MODEL:');\n        $log.debug(model);\n\n        contractList = $filter('orderBy')(contractList, '-is_primary');\n\n        angular.forEach(contractList, function(contract) {\n          +contract.is_current ? $scope.contractCurrent.push(contract) : $scope.contractPast.push(contract);\n        });\n\n        $scope.$watchCollection('contractCurrent', function() {\n          $scope.utils.contractListLen = $scope.contractCurrent.length + $scope.contractPast.length;\n        });\n\n        $scope.$watchCollection('contractPast', function() {\n          $scope.utils.contractListLen = $scope.contractCurrent.length + $scope.contractPast.length;\n        });\n\n        $rootScope.$broadcast('hrjc-loader-hide');\n        $scope.contractListLoaded = true;\n      });\n\n      $q.all(promiseUtils).then(function(utils) {\n        angular.extend($scope.utils, utils);\n      });\n\n      $scope.toggleIsPrimary = function(contractId) {\n        function unsetIsPrimary(contractArray) {\n          var i = 0,\n            len = contractArray.length;\n\n          for (i; i < len; i++) {\n            if (+contractArray[i].id != +contractId && +contractArray[i].is_primary) {\n              contractArray[i].is_primary = '0';\n              return contractArray[i].id;\n            }\n          }\n\n          return null;\n        }\n\n        unsetIsPrimary($scope.contractCurrent) || unsetIsPrimary($scope.contractPast);\n\n        ($filter('getObjById')($scope.contractCurrent, contractId) || $filter('getObjById')($scope.contractPast, contractId) || {}).is_primary = '1';\n\n        $scope.contractCurrent = $filter('orderBy')($scope.contractCurrent, '-is_primary');\n        $scope.contractPast = $filter('orderBy')($scope.contractPast, '-is_primary');\n      };\n\n      $scope.modalContract = function(action) {\n\n        if (!action || action !== 'new') {\n          return null;\n        }\n\n        var modalInstance,\n          options = {\n            appendTo: $rootElement.find('div').eq(0),\n            templateUrl: settings.pathApp + 'views/modalForm.html?v=2222',\n            size: 'lg',\n            controller: 'ModalContractNewCtrl',\n            windowClass: 'modal-contract',\n            resolve: {\n              model: function() {\n                return $scope.model;\n              },\n              utils: function() {\n                return $q.all(angular.extend(promiseUtils, {\n                  contractListLen: $scope.utils.contractListLen\n                }));\n              }\n            }\n          }\n\n        modalInstance = $modal.open(options);\n\n        modalInstance.result.then(function(contract) {\n          ContractService.updateHeaderInfo(); +\n          contract.is_current ? $scope.contractCurrent.push(contract) : $scope.contractPast.push(contract);\n\n          if (+contract.is_primary) {\n            $scope.toggleIsPrimary(contract.id);\n          }\n\n          $window.location.assign(UtilsService.getManageEntitlementsPageURL(contract.contact_id));\n        });\n      }\n\n      $scope.delete = function(contractId) {\n\n        function removeContractById(contractArray, id) {\n          var i = 0,\n            len = contractArray.length;\n\n          for (i; i < len; i++) {\n            if (+contractArray[i].id == id) {\n              $scope.$emit('hrjc-loader-hide');\n              contractArray.splice(i, 1);\n              return id;\n            }\n          }\n\n          return null;\n        }\n\n        var modalInstance = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          templateUrl: settings.pathApp + 'views/modalDialog.html',\n          size: 'sm',\n          controller: 'ModalDialogCtrl',\n          resolve: {\n            content: function() {\n              return {\n                msg: 'Are you sure you want to delete this job contract?'\n              };\n            }\n          }\n        });\n\n        modalInstance.result.then(function(confirm) {\n          if (confirm) {\n            $scope.$emit('hrjc-loader-show');\n            ContractService.delete(contractId).then(function(result) {\n              if (!result.is_error) {\n                ContractService.updateHeaderInfo();\n                removeContractById($scope.contractCurrent, contractId) || removeContractById($scope.contractPast, contractId);\n                pubSub.publish('contract:deleted', {\n                  contactId: settings.contactId,\n                  contractId: contractId\n                });\n                pubSub.publish('contract-refresh');\n              }\n            });\n          }\n        })\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/contract-list.js"),eval("define('job-contract/services/contact',[\n    'job-contract/services/services',\n    'job-contract/services/utils'\n], function (services) {\n    'use strict';\n\n    services.factory('ContactService', ['$resource', 'settings', '$q', 'UtilsService','$log',\n        function ($resource, settings, $q, UtilsService,$log) {\n            $log.debug('Service: ContactService');\n\n        var Contact = $resource(settings.pathRest, {\n            action: 'getlist',\n            entity: 'contact',\n            json: {}\n        });\n\n        return {\n            getOne: function(id) {\n\n                if (!id || typeof +id !== 'number') {\n                    return null\n                }\n\n                var deffered = $q.defer(),\n                    val;\n\n                Contact.get({json: {\n                    id: id,\n                    debug: settings.debug\n                }}, function(data){\n\n                    if (UtilsService.errorHandler(data,'Unable to fetch contact',deffered)) {\n                        return\n                    }\n\n                    val = data.values;\n                    deffered.resolve(val.length == 1 ? val[0] : null);\n                },function(){\n                    deffered.reject('Unable to fetch contact');\n                });\n\n                return deffered.promise;\n            },\n            search: function(input, params){\n\n                if ((!input || typeof input === 'undefined') ||\n                    (params && typeof params !== 'object')) {\n                    return null\n                }\n\n                var deffered = $q.defer(),\n                    params = params || {};\n\n                Contact.get({json: {\n                    input: input,\n                    params: params,\n                    debug: settings.debug\n                }}, function(data){\n\n                    if (UtilsService.errorHandler(data,'Unable to fetch contact list',deffered)) {\n                        return\n                    }\n\n                    deffered.resolve(data.values);\n\n                },function(){\n                    deffered.reject('Unable to fetch contact list');\n                });\n\n                return deffered.promise;\n            }\n        }\n\n    }]);\n\n});\n\n//# sourceURL=/job-contract/services/contact.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/controllers/contract',[\n  'common/lodash',\n  'common/moment',\n  'job-contract/controllers/controllers',\n  'job-contract/services/contract-details',\n  'job-contract/services/contract-hour',\n  'job-contract/services/contract-pay',\n  'job-contract/services/contract-leave',\n  'job-contract/services/contract-pension',\n  'job-contract/services/contract-health',\n  'job-contract/services/contact',\n  'job-contract/services/utils',\n  'common/filters/angular-date/format-date'\n], function (_, moment, controllers) {\n  'use strict';\n\n  controllers.controller('ContractCtrl', ['$scope', '$route', '$filter', '$uibModal', '$rootElement', '$q', '$window', 'settings',\n    'API', 'ContractService', 'ContractDetailsService', 'ContractHourService', 'ContractPayService', 'ContractLeaveService',\n    'ContractHealthService', 'ContractPensionService', 'ContractFilesService', 'ContactService', 'ContractRevisionList', '$log',\n    'UtilsService',\n    function ($scope, $route, $filter, $modal, $rootElement, $q, $window, settings, API, ContractService, ContractDetailsService,\n      ContractHourService, ContractPayService, ContractLeaveService, ContractHealthService,\n      ContractPensionService, ContractFilesService, ContactService, ContractRevisionList, $log, UtilsService) {\n      $log.debug('Controller: ContractCtrl');\n\n      var promiseFiles;\n      var contractId = $scope.contract.id;\n      var vm = this;\n\n      $scope.contractLoaded = false;\n      $scope.revisionsShown = false;\n      $scope.isCollapsed = true;\n      $scope.files = {};\n      $scope.revisionCurrent = {};\n      $scope.revisionList = [];\n      $scope.revisionDataList = [];\n\n      _.extend($scope, _.cloneDeep($scope.model));\n\n      function updateContractView (newScope) {\n        var contractRevisionIdObj = {\n          id: null,\n          jobcontract_id: contractId,\n          jobcontract_revision_id: newScope.details.jobcontract_revision_id\n        };\n\n        _.extend($scope.details, newScope.details);\n        _.extend($scope.hour, newScope.hour || contractRevisionIdObj);\n        _.extend($scope.pay, newScope.pay || contractRevisionIdObj);\n\n        if (newScope.health &&\n          newScope.health.provider &&\n          newScope.health.provider !== $scope.health.provider) {\n          ContactService.getOne(newScope.health.provider).then(function (contact) {\n            $scope.health.provider_contact = contact;\n          });\n        }\n\n        if (newScope.health &&\n          newScope.health.provider_life_insurance &&\n          newScope.health.provider_life_insurance !== $scope.health.provider_life_insurance) {\n          ContactService.getOne(newScope.health.provider_life_insurance).then(function (contact) {\n            $scope.health.provider_life_insurance_contact = contact;\n          });\n        }\n\n        _.extend($scope.health, newScope.health || contractRevisionIdObj);\n        _.extend($scope.pension, newScope.pension || contractRevisionIdObj);\n\n        _.each($scope.leave, function (leaveType, leaveTypeId) {\n          _.extend(leaveType, newScope.leave ? newScope.leave[leaveTypeId] || contractRevisionIdObj : contractRevisionIdObj);\n        });\n      }\n\n      /**\n       * Updates the contract list view,\n       * by sorting the contract into current or past\n       * depending on the period end date of the contract.\n       *\n       * @param {string || date} newEndDate the date specified by the user\n       */\n      function updateContractList (newEndDate) {\n        var isCurrentContract = !newEndDate ? true : (moment().diff(newEndDate, 'day') <= 0);\n        var contract = $scope.$parent.contract;\n        var currentContracts = $scope.$parent.contractCurrent;\n        var pastContracts = $scope.$parent.contractPast;\n        var currentContractIndex = currentContracts.indexOf(contract);\n        var pastContractIndex = pastContracts.indexOf(contract);\n\n        if (isCurrentContract) {\n          contract.is_current = '1';\n          if (currentContractIndex + 1) {\n            _.extend(currentContracts[currentContractIndex], contract);\n          } else {\n            pastContracts.splice(pastContractIndex);\n            currentContracts.push(contract);\n          }\n        } else {\n          contract.is_current = '0';\n          if (pastContractIndex + 1) {\n            _.extend(pastContracts[pastContractIndex], contract);\n          } else {\n            pastContracts.push(contract);\n            currentContracts.splice(currentContractIndex);\n          }\n        }\n      }\n\n      function updateContractFiles () {\n        promiseFiles = $q.all({\n          details: ContractFilesService.get($scope.details.jobcontract_revision_id, 'civicrm_hrjobcontract_details'),\n          pension: ContractFilesService.get($scope.pension.jobcontract_revision_id, 'civicrm_hrjobcontract_pension')\n        });\n\n        promiseFiles.then(function (files) {\n          $scope.files = files;\n        });\n\n        return promiseFiles;\n      }\n\n      ContractService\n        .fullDetails(contractId)\n        .then(function (results) {\n          updateContractView(results);\n\n          $scope.contractLoaded = true;\n\n          $scope.$watch('contract.is_primary', function () {\n            $scope.isCollapsed = !+$scope.contract.is_primary;\n          });\n\n          $scope.$broadcast('hrjc-loader-show');\n          // Fetching revision list form ContractRevisionList service\n          ContractRevisionList.fetchRevisions(contractId).then(function (result) {\n            $scope.revisionList = result.revisionList;\n            $scope.revisionDataList = result.revisionDataList;\n            $scope.$broadcast('hrjc-loader-hide');\n          });\n        })\n        .then(updateContractFiles);\n\n      /**\n       * Fetches the Revision Details for given revision\n       * @param  {object} revision\n       * @return {object}\n       */\n      vm.fetchRevisionDetails = function (revision) {\n        var entity, revisionDetails;\n\n        return $q.all([\n          ContractDetailsService.getOne({\n            jobcontract_revision_id: revision.details_revision_id\n          }),\n          ContractHourService.getOne({\n            jobcontract_revision_id: revision.hour_revision_id\n          }),\n          ContractHealthService.getOne({\n            jobcontract_revision_id: revision.health_revision_id\n          }),\n          ContractPayService.getOne({\n            jobcontract_revision_id: revision.pay_revision_id\n          }),\n          ContractPensionService.getOne({\n            jobcontract_revision_id: revision.pension_revision_id\n          }),\n          ContractLeaveService.getOne({\n            jobcontract_revision_id: revision.leave_revision_id\n          })\n        ])\n        .then(function (results) {\n          revisionDetails = {\n            'details': results[0],\n            'hour': results[1],\n            'health': results[2],\n            'pay': results[3],\n            'pension': results[4],\n            'leave': results[5]\n          };\n          entity = { contract: $scope.contract };\n          _.extend(entity, _.cloneDeep($scope.model));\n          _.extend(entity.details, revisionDetails.details);\n          _.extend(entity.hour, revisionDetails.hour);\n          _.extend(entity.health, revisionDetails.health);\n          _.extend(entity.pay, revisionDetails.pay);\n          _.extend(entity.pension, revisionDetails.pension);\n          _.each(entity.leave, function (leaveType, leaveTypeId) {\n            _.extend(leaveType, revisionDetails.leave ? revisionDetails.leave[leaveTypeId] : '');\n          });\n\n          return entity;\n        });\n      };\n\n      $scope.modalContract = function (action, revisionEntityIdObj) {\n        var modalInstance, dateEffectiveRevisionCreated, dateEffectiveRevisionCurrent,\n          dateToday, revisionData, isCurrentRevision, i, objExt;\n        var revisionListEntitiesView = ['details', 'hour', 'pay'];\n        var options = {\n          controller: 'ModalContractCtrl',\n          appendTo: $rootElement.find('div').eq(0),\n          templateUrl: settings.pathApp + 'views/modalForm.html?v=4448',\n          windowClass: 'modal-contract',\n          size: 'lg',\n          resolve: {\n            action: function () {\n              return action || 'view';\n            },\n            content: function () {\n              return null;\n            },\n            entity: function () {\n              if (!revisionEntityIdObj) {\n                return {\n                  contract: $scope.contract,\n                  details: $scope.details,\n                  hour: $scope.hour,\n                  pay: $scope.pay,\n                  leave: $scope.leave,\n                  health: $scope.health,\n                  pension: $scope.pension\n                };\n              }\n\n              return vm.fetchRevisionDetails(revisionEntityIdObj);\n            },\n            files: function () {\n              if (!revisionEntityIdObj) {\n                return promiseFiles;\n              }\n\n              return $q.all({\n                details: ContractFilesService.get(revisionEntityIdObj.details_revision_id, 'civicrm_hrjobcontract_details'),\n                pension: ContractFilesService.get(revisionEntityIdObj.pension_revision_id, 'civicrm_hrjobcontract_pension')\n              });\n            },\n            utils: function () {\n              return $scope.utils;\n            }\n          }\n        };\n\n        $scope.$broadcast('hrjc-loader-show');\n\n        switch (action) {\n          case 'edit':\n            options.resolve.content = function () {\n              return {\n                allowSave: true,\n                isDisabled: false,\n                copy: {\n                  close: 'Cancel',\n                  save: 'Save without making a new revision',\n                  title: 'Edit contract'\n                }\n              };\n            };\n            break;\n          case 'change':\n            options.resolve.content = function () {\n              return {\n                allowSave: true,\n                isDisabled: false,\n                copy: {\n                  close: 'Cancel',\n                  save: 'Save and make a new revision',\n                  title: 'Change contract terms'\n                }\n              };\n            };\n            break;\n        }\n\n        modalInstance = $modal.open(options);\n\n        modalInstance.result.then(function (results) {\n          if (!results) {\n            return;\n          }\n\n          ContractService.updateHeaderInfo();\n          updateContractView(results);\n          updateContractList(results.details.period_end_date);\n\n          if (results.revisionCreated) {\n            dateEffectiveRevisionCreated = moment(new Date(results.revisionCreated.effective_date));\n            dateEffectiveRevisionCurrent = moment(new Date($scope.revisionCurrent.effective_date));\n            dateToday = moment();\n            revisionData = {\n              revisionEntityIdObj: results.revisionCreated,\n              details: results.details,\n              hour: results.hour,\n              pay: results.pay\n            };\n            isCurrentRevision = dateEffectiveRevisionCurrent.diff(dateToday, 'day') <= 0 || dateEffectiveRevisionCurrent.diff(dateEffectiveRevisionCreated, 'day') <= 0;\n\n            if (results.files) {\n              if (isCurrentRevision) {\n                updateContractFiles().then(function (files) {\n                  revisionData.files = files;\n                });\n              } else {\n                $q.all({\n                  details: ContractFilesService.get(results.revisionCreated.details_revision_id, 'civicrm_hrjobcontract_details')\n                }).then(function (files) {\n                  revisionData.files = files;\n                });\n              }\n            }\n\n            $scope.revisionList.unshift(results.revisionCreated);\n            $scope.revisionDataList.unshift(revisionData);\n          } else {\n            if ($scope.contract.is_primary !== results.contract.is_primary) {\n              $scope.$parent.$parent.toggleIsPrimary($scope.contract.id);\n            }\n\n            _.each($scope.revisionDataList, function (revisionData) {\n              i = 0;\n              objExt = {};\n              while (revisionListEntitiesView[i]) {\n                if (revisionData.revisionEntityIdObj[revisionListEntitiesView[i] + '_revision_id'] ===\n                  $scope.revisionCurrent[revisionListEntitiesView[i] + '_revision_id']) {\n                  objExt[revisionListEntitiesView[i]] = results[revisionListEntitiesView[i]];\n\n                  if (revisionListEntitiesView[i] === 'details' && results.files) {\n                    updateContractFiles().then(function (files) {\n                      objExt.files = files;\n                      _.extend(revisionData, objExt);\n                    });\n                  }\n\n                  _.extend(revisionData, objExt);\n                }\n                i++;\n              }\n            });\n          }\n\n          CRM.refreshParent('#hrjobroles');\n          $window.location.assign(UtilsService.getManageEntitlementsPageURL($scope.contract.contact_id));\n        });\n      };\n\n      /**\n       * Marks that the revisions (in a different tab) have been shown\n       */\n      $scope.showRevisions = function () {\n        $scope.revisionsShown = true;\n      };\n\n      $scope.modalRevision = function (entity) {\n        var options;\n        var promiseEntityRevisionDataList = [];\n        var apiMethod = entity !== 'leave' ? 'getOne' : 'get';\n        var i = 0;\n        var len = $scope.revisionList.length;\n\n        $scope.$broadcast('hrjc-loader-show');\n        if (!entity) {\n          return null;\n        }\n\n        for (i; i < len; i++) {\n          promiseEntityRevisionDataList.push(API[apiMethod]('HRJob' + $filter('capitalize')(entity), {\n            jobcontract_revision_id: $scope.revisionList[i][entity + '_revision_id']\n          }));\n        }\n\n        options = {\n          appendTo: $rootElement.find('div').eq(0),\n          size: 'lg',\n          controller: 'ModalRevisionCtrl',\n          templateUrl: settings.pathApp + 'views/modalRevision.html?v=1234',\n          windowClass: 'modal-revision',\n          resolve: {\n            entity: function () {\n              return entity;\n            },\n            fields: function () {\n              return $scope.$parent.$parent.fields[entity];\n            },\n            model: function () {\n              return $scope.model[entity];\n            },\n            utils: function () {\n              return $scope.utils;\n            },\n            revisionDataList: function () {\n              return $q.all(promiseEntityRevisionDataList);\n            },\n            revisionList: function () {\n              return $scope.revisionList;\n            },\n            modalContract: function () {\n              return $scope.modalContract;\n            }\n          }\n        };\n        return $modal.open(options);\n      };\n\n      $scope.$on('updateContractView', function () {\n        $scope.$broadcast('hrjc-loader-show');\n\n        ContractService\n          .fullDetails($scope.revisionCurrent.jobcontract_id)\n          .then(function (results) {\n            updateContractView(results);\n            $scope.$broadcast('hrjc-loader-hide');\n          })\n          .then(updateContractFiles);\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/contract.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/services/contract',[\n  'common/lodash',\n  'job-contract/services/services'\n], function (_, services) {\n  'use strict';\n\n  services.factory('Contract', ['$resource', 'settings', '$log', function ($resource, settings, $log) {\n    $log.debug('Service: Contract');\n\n    return $resource(settings.pathRest, {\n      action: 'get',\n      entity: 'HRJobContract',\n      json: {}\n    });\n  }]);\n\n  services.factory('ContractService', [\n    '$log', '$q', 'Contract', 'ContractRevisionService', 'settings', 'UtilsService', 'DOMEventTrigger', 'AbsenceType',\n    function ($log, $q, Contract, ContractRevisionService, settings, UtilsService, DOMEventTrigger, AbsenceType) {\n      $log.debug('Service: ContractService');\n\n      /**\n       * The API returns values as strings, so we convert them to booleans to\n       * make it easy to use them inside conditions\n       *\n       * @param {Object} contract as returned by the API\n       * @param {Object} absenceTypes indexed by their IDs\n       */\n      function adjustAddPublicHolidaysValue (contract, absenceTypes) {\n        _.each(contract.leave, function (leave) {\n          leave.add_public_holidays =\n            absenceTypes[leave.leave_type].calculation_unit_name !== 'hours' &&\n            !!parseInt(leave.add_public_holidays);\n        });\n      }\n\n      /**\n       * Filters out disabled or non-existing anymore Absence Types\n       * from the contract leave details\n       *\n       * @param  {Object} contractLeaves leave property of contract (as returned by the API)\n       * @param  {Array}  absenceTypes as returned by API\n       * @return {Array}  filtered out contract leave details\n       */\n      function filterOutDisabledAbsenceTypes (contractLeaves, absenceTypes) {\n        return _.filter(contractLeaves, function (leave) {\n          if (_.find(absenceTypes, { id: leave.leave_type })) {\n            return leave;\n          }\n        });\n      }\n\n      return {\n        get: function (contactId) {\n          var deffered = $q.defer();\n          var params = {};\n\n          if (!CRM || !CRM.jobContractTabApp || !CRM.jobContractTabApp.contractList) {\n            params = {\n              sequential: 1,\n              contact_id: settings.contactId,\n              deleted: 0\n            };\n\n            if (contactId && typeof +contactId === 'number') {\n              params.contact_id = contactId;\n            }\n\n            Contract.get({\n              json: params\n            }, function (data) {\n              if (UtilsService.errorHandler(data, 'Unable to fetch contract list', deffered)) {\n                return;\n              }\n\n              deffered.resolve(data.values);\n            }, function () {\n              deffered.reject('Unable to fetch contract list');\n            });\n          } else {\n            deffered.resolve(CRM.jobContractTabApp.contractList);\n          }\n\n          return deffered.promise;\n        },\n\n        /**\n         * Perform an ajax request and call HrJobContract => getcurrentcontract\n         * API method which is used to get the current contract for the contact\n         * or null if it is not exist.\n         *\n         * @param contactId :the current contact ID\n         */\n        getCurrentContract: function (contactId) {\n          var deffered = $q.defer();\n\n          Contract.get({\n            action: 'getcurrentcontract',\n            json: {\n              'contact_id': contactId\n            }\n          }, function (data) {\n            if (data.is_error) {\n              deffered.reject('Unable to fetch the current contract');\n            }\n            deffered.resolve(data.values);\n          }, function () {\n            deffered.reject('Unable to fetch the current contract');\n          });\n\n          return deffered.promise;\n        },\n\n        /**\n         * Triggers the update of the contact header via the `hrui` extension\n         * by emitting a DOM event with the contract data\n         */\n        updateHeaderInfo: function () {\n          this.getCurrentContract(settings.contactId)\n            .then(function (currentContract) {\n              DOMEventTrigger('updateContactHeader', {\n                contract: currentContract\n              });\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n        },\n        getOne: function (contractId, contactId) {\n          var val;\n          var deffered = $q.defer();\n          var params = {\n            deleted: 0,\n            sequential: 1,\n            contact_id: settings.contactId,\n            id: contractId\n          };\n\n          if (!contractId || typeof +contractId !== 'number') {\n            return null;\n          }\n\n          if (contactId && typeof +contactId === 'number') {\n            params.contact_id = contactId;\n          }\n\n          Contract.get({\n            json: params\n          }, function (data) {\n            val = data.values;\n            deffered.resolve(val.length === 1 ? val[0] : null);\n          }, function () {\n            deffered.reject('Unable to fetch contract data');\n          });\n\n          return deffered.promise;\n        },\n        getRevision: function (contractId) {\n          var deffered = $q.defer();\n          var params = {\n            deleted: 0,\n            options: {\n              limit: 0\n            },\n            sequential: 1,\n            jobcontract_id: contractId\n          };\n\n          if (!contractId || typeof +contractId !== 'number') {\n            return null;\n          }\n\n          ContractRevisionService.get({\n            json: params\n          }, function (data) {\n            deffered.resolve(data.values);\n          }, function () {\n            deffered.reject('Unable to fetch contract revisions');\n          });\n\n          return deffered.promise;\n        },\n        getRevisionOptions: function (fieldName, callAPI) {\n          var data;\n          var deffered = $q.defer();\n\n          if (!callAPI) {\n            data = settings.CRM.options.HRJobContractRevision || {};\n\n            if (fieldName && typeof fieldName === 'string') {\n              data = data[fieldName];\n            }\n\n            deffered.resolve(data || {});\n          } else {\n            // TODO call2API\n          }\n\n          return deffered.promise;\n        },\n        save: function (contractDetails) {\n          var val;\n          var deffered = $q.defer();\n          var params = _.extend({\n            deleted: 0,\n            sequential: 1\n          }, contractDetails);\n\n          if ((!contractDetails || typeof contractDetails !== 'object') ||\n            (!contractDetails.id || typeof +contractDetails.id !== 'number')) {\n            return null;\n          }\n\n          Contract.save({\n            action: 'create',\n            json: params\n          }, null, function (data) {\n            val = data.values;\n            deffered.resolve(val.length === 1 ? val[0] : null);\n          }, function () {\n            deffered.reject('Unable to fetch contract contract data');\n          });\n\n          return deffered.promise;\n        },\n        saveRevision: function (revisionDetails) {\n          var val;\n          var deffered = $q.defer();\n          var params = _.extend({\n            deleted: 0,\n            sequential: 1\n          }, revisionDetails);\n\n          if ((!revisionDetails || typeof revisionDetails !== 'object') ||\n            (!revisionDetails.id || typeof +revisionDetails.id !== 'number')) {\n            return null;\n          }\n\n          ContractRevisionService.save({\n            action: 'create',\n            json: params\n          }, null, function (data) {\n            val = data.values;\n            deffered.resolve(val.length === 1 ? val[0] : null);\n          }, function () {\n            deffered.reject('Unable to fetch contract revision');\n          });\n\n          return deffered.promise;\n        },\n        delete: function (contractId) {\n          var deffered = $q.defer();\n\n          if (!contractId || typeof +contractId !== 'number') {\n            return null;\n          }\n\n          Contract.delete({\n            action: 'deletecontract',\n            json: {\n              id: contractId\n            }\n          }, function (data) {\n            deffered.resolve(data);\n          }, function () {\n            deffered.reject('Could not delete contract ID:' + contractId);\n          });\n\n          return deffered.promise;\n        },\n        deleteRevision: function (revisionId) {\n          var val;\n          var deffered = $q.defer();\n\n          if (!revisionId || typeof +revisionId !== 'number') {\n            return null;\n          }\n\n          ContractRevisionService.save({\n            action: 'create',\n            json: {\n              sequential: 1,\n              deleted: 1,\n              id: revisionId\n            }\n          }, null, function (data) {\n            val = data.values;\n            deffered.resolve(val.length === 1 ? val[0] : null);\n          }, function () {\n            deffered.reject('Unable to delete contract revision id: ' + revisionId);\n          });\n\n          return deffered.promise;\n        },\n\n        /**\n         * Returns the full details of a contract via the related custom api endpoint\n         *\n         * @param  {int} contractId\n         * @return {Promise} resolves with the api response\n         */\n        fullDetails: function (contractId) {\n          var deferred = $q.defer();\n\n          if (!contractId || typeof +contractId !== 'number') {\n            return null;\n          }\n\n          AbsenceType.all()\n          .then(AbsenceType.loadCalculationUnits)\n          .then(function (absenceTypes) {\n            return Contract.get({\n              action: 'getfulldetails',\n              json: {\n                jobcontract_id: contractId\n              }\n            }, function (contract) {\n              contract.leave = filterOutDisabledAbsenceTypes(contract.leave, absenceTypes);\n\n              adjustAddPublicHolidaysValue(contract, _.indexBy(absenceTypes, 'id'));\n              deferred.resolve(contract);\n            }, function () {\n              deferred.reject('Could not fetch full details for contract ID:' + contractId);\n            });\n          });\n\n          return deferred.promise;\n        }\n      };\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/services/contract.js"),eval("define('job-contract/controllers/revision-list',[\n  'common/lodash',\n  'job-contract/controllers/controllers',\n  'job-contract/services/contract'\n], function(_, controllers) {\n  'use strict';\n\n  controllers.controller('RevisionListCtrl', ['$rootScope', '$scope', '$filter', '$q', '$uibModal', '$rootElement', 'settings', 'ContractService',\n    'ContractDetailsService', 'ContractHourService', 'ContractPayService', 'ContractFilesService', '$log', 'ContractRevisionService', 'ContractRevisionList',\n    function($rootScope, $scope, $filter, $q, $modal, $rootElement, settings, ContractService,\n      ContractDetailsService, ContractHourService, ContractPayService, ContractFilesService, $log, ContractRevisionService, ContractRevisionList) {\n      $log.debug('Controller: RevisionListCtrl');\n\n      var contractId = $scope.contract.id,\n        revisionDataListLocal = $scope.revisionDataList;\n\n      $scope.currentPage = 1;\n      $scope.itemsPerPage = 5;\n      $scope.maxSize = 5;\n      $scope.changeReasons = $rootScope.options.contract.change_reason;\n      $scope.sortCol = 'revisionEntityIdObj.effective_date';\n      $scope.sortReverse = true;\n      $scope.display = {\n        effectiveDate: true,\n        position: true,\n        payScale: true,\n        totalSalary: true,\n        hours: true,\n        placeOfWork: true,\n        recordedBy: true,\n        changeReason: true\n      };\n\n      function init(){\n        if(!$scope.revisionDataList){\n          $scope.$broadcast('hrjc-loader-show');\n\n          // Fetching revision list form ContractRevisionList service\n          ContractRevisionList.fetchRevisions(contractId).then(function(result){\n            $scope.revisionList = result.revisionList;\n            $scope.revisionDataList = result.revisionDataList;\n            $scope.$broadcast('hrjc-loader-hide');\n          });\n        }\n      }\n\n      function setCurrentRevision() {\n        var revisionCurrent, i = 0;\n\n        if ($scope.revisionList.length) {\n          var revisionList = $filter('orderBy')($scope.revisionList, ['effective_date', 'id']);\n\n          angular.forEach(revisionList, function(revision) {\n            if (new Date(revision.effective_date).setHours(0, 0, 0, 0) <= new Date().setHours(0, 0, 0, 0)) {\n              revisionCurrent = revision;\n            }\n          });\n\n          if (!revisionCurrent) {\n            do {\n              revisionCurrent = revisionList[i];\n              i++;\n            } while (revisionList[i] && revisionList[i - 1].effective_date == revisionList[i].effective_date);\n          }\n\n          angular.extend($scope.revisionCurrent, revisionCurrent);\n          return revisionCurrent.id;\n        }\n        return null;\n      }\n\n      function urlCSVBuild() {\n        var url = settings.pathReport + (settings.pathReport.indexOf('?') > -1 ? '&' : '?'),\n          fields = $scope.fields;\n\n        angular.forEach(fields, function(entityFields, entityName) {\n          url += 'fields[' + entityName + '_revision_id]=1&';\n          angular.forEach(entityFields, function(field) {\n            url += 'fields[' + entityName + '_' + field.name + ']=1&';\n          })\n        });\n\n        url += 'fields[sort_name]=1' +\n          '&fields[first_name]=1' +\n          '&fields[last_name]=1' +\n          '&fields[external_identifier]=1' +\n          '&fields[email]=1' +\n          '&fields[street_address]=1' +\n          '&fields[city]=1' +\n          '&fields[name]=1' +\n          '&fields[contract_contact_id]=1' +\n          '&fields[contract_contract_id]=1' +\n          '&fields[jobcontract_revision_id]=1' +\n          '&fields[change_reason]=1' +\n          '&fields[created_date]=1' +\n          '&fields[effective_date]=1' +\n          '&fields[modified_date]=1' +\n          '&order_bys[1][column]=id&order_bys[1][order]=ASC' +\n          '&order_bys[2][column]=civicrm_hrjobcontract_revision_revision_id&order_bys[2][order]=ASC' +\n          '&order_bys[3][column]=-&order_bys[3][order]=ASC' +\n          '&order_bys[4][column]=-&order_bys[4][order]=ASC' +\n          '&order_bys[5][column]=-&order_bys[5][order]=ASC' +\n          '&contract_id_op=eq&permission=access+CiviReport' +\n          '&row_count=' +\n          '&_qf_Summary_submit_csv=Preview+CSV' +\n          '&groups=' +\n          '&contract_id_value=' + contractId +\n          '&group_bys[civicrm_hrjobcontract_revision_revision_id]=1';\n\n        return url;\n      };\n\n      init();\n\n      $scope.createPage = function() {\n        var start = (($scope.currentPage - 1) * $scope.itemsPerPage),\n          end = start + $scope.itemsPerPage;\n\n        $scope.revisionDataListPage = revisionDataListLocal.slice(start, end);\n      }\n\n      $scope.sortBy = function(sortCol, sortReverse) {\n\n        if (typeof sortCol !== 'undefined') {\n\n          if ($scope.sortCol == sortCol) {\n            $scope.sortReverse = !$scope.sortReverse;\n          } else {\n            $scope.sortCol = sortCol;\n          }\n\n        }\n\n        if (typeof sortReverse !== 'undefined') {\n          $scope.sortReverse = sortReverse;\n        }\n\n        revisionDataListLocal = $filter('orderBy')($scope.revisionDataList, $scope.sortCol, $scope.sortReverse);\n      };\n\n      $scope.urlCSV = urlCSVBuild();\n\n      $scope.deleteRevision = function(revisionId, e) {\n\n        if ($scope.revisionList.length == 1) {\n          e.stopPropagation();\n          return;\n        }\n\n        if (!revisionId || typeof + revisionId !== 'number') {\n          return;\n        }\n\n        var modalInstance = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          templateUrl: settings.pathApp + 'views/modalDialog.html',\n          size: 'sm',\n          controller: 'ModalDialogCtrl',\n          resolve: {\n            content: function() {\n              return {\n                msg: 'Are you sure you want to delete this job contract revision?'\n              };\n            }\n          }\n        });\n\n        modalInstance.result.then(function(confirm) {\n          if (confirm) {\n            $scope.$broadcast('hrjc-loader-show');\n            ContractService.deleteRevision(revisionId).then(function(results) {\n              var i = 0,\n                len = $scope.revisionList.length;\n              if (!results.is_error) {\n\n                for (i; i < len; i++) {\n                  if ($scope.revisionList[i].id == revisionId) {\n                    $scope.revisionList.splice(i, 1);\n                    $scope.revisionDataList.splice(i, 1);\n                    break;\n                  }\n                }\n\n                $scope.sortBy();\n                $scope.createPage();\n\n                if ($scope.revisionCurrent.id != setCurrentRevision()) {\n                  $scope.$emit('updateContractView');\n                  return\n                }\n\n                $scope.$broadcast('hrjc-loader-hide');\n              }\n            });\n          }\n        })\n\n      }\n\n      $scope.modalRevisionEdit = function(revisionEntityIdObj) {\n        var date = revisionEntityIdObj.effective_date,\n          reasonId = revisionEntityIdObj.change_reason;\n\n        var modalChangeReason = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          templateUrl: settings.pathApp + 'views/modalChangeReason.html?v=' + (new Date()).getTime(),\n          controller: 'ModalChangeReasonCtrl',\n          resolve: {\n            content: function() {\n              return {\n                copy: {\n                  title: 'Edit revision data'\n                }\n              }\n            },\n            date: function() {\n              return date;\n            },\n            reasonId: function() {\n              return reasonId;\n            }\n          }\n        });\n\n        modalChangeReason.result.then(function(results) {\n          if (results.date != date || results.reasonId != reasonId) {\n            ContractService.saveRevision({\n              id: revisionEntityIdObj.id,\n              change_reason: results.reasonId,\n              effective_date: results.date\n            }).then(function() {\n              revisionEntityIdObj.effective_date = results.date;\n              revisionEntityIdObj.change_reason = results.reasonId;\n\n              $scope.sortBy();\n              $scope.createPage();\n\n              if ($scope.revisionCurrent.id != setCurrentRevision()) {\n                $scope.$emit('updateContractView');\n              }\n            });\n          }\n        });\n      };\n\n      $scope.$watch('currentPage', function() {\n        $scope.createPage();\n      });\n\n      $scope.$watch('revisionDataList.length', function(lengthNow, lengthPrev) {\n        revisionDataListLocal = $scope.revisionDataList;\n        if (lengthNow > lengthPrev) {\n          setCurrentRevision();\n        }\n        $scope.sortBy();\n        $scope.createPage();\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/revision-list.js"),eval("define('job-contract/controllers/modal/modal-change-reason',[\n  'common/moment',\n  'job-contract/controllers/controllers',\n  'job-contract/services/contract'\n], function(moment, controllers) {\n  'use strict';\n\n  controllers.controller('ModalChangeReasonCtrl', ['$scope', '$log', '$uibModalInstance', 'content', 'date', 'reasonId', 'settings', 'ContractRevisionService',\n    function($scope, $log, $modalInstance, content, date, reasonId, settings, ContractRevisionService) {\n      $log.debug('Controller: ModalChangeReasonCtrl');\n\n      var content = content || {},\n        copy = content.copy || {};\n\n      copy.title = copy.title || 'Revision data';\n\n      $scope.change_reason = reasonId || '';\n      $scope.copy = copy;\n      $scope.effective_date = date || '';\n      $scope.isPast = false;\n\n      $scope.dpOpen = function($event, opened) {\n        $event.preventDefault();\n        $event.stopPropagation();\n\n        $scope[opened] = true;\n      }\n\n      $scope.save = function() {\n        ContractRevisionService.validateEffectiveDate({\n            contact_id: settings.contactId,\n            effective_date: $scope.effective_date\n          })\n          .then(function(result) {\n            if (result.success) {\n              $modalInstance.close({\n                reasonId: $scope.change_reason,\n                date: $scope.effective_date ? moment($scope.effective_date).format('YYYY-MM-DD') : ''\n              });\n            } else {\n              CRM.alert(result.message, 'Error', 'error');\n              $scope.$broadcast('hrjc-loader-hide');\n            }\n          });\n      };\n\n      $scope.cancel = function() {\n        $modalInstance.dismiss('cancel');\n      };\n\n      $scope.$watch('effective_date', function(dateSelected) {\n        $scope.isPast = (new Date(dateSelected).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0));\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-change-reason.js"),eval("define('job-contract/services/contract-revision',[\n  'common/lodash',\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function (_, services) {\n  'use strict';\n\n  services.factory('ContractRevisionService', [\n    '$filter', '$resource', 'settings', '$q', 'UtilsService', '$log',\n    function ($filter, $resource, settings, $q, UtilsService, $log) {\n      $log.debug('Service: ContractRevisionService');\n\n      /**\n       * If parameter passed is a Date object, it converts it into a string\n       *\n       * @param {Date} dateObj\n       * @return {string/any}\n       */\n      function convertToDateString(dateObj) {\n        var dateString = $filter('formatDate')(dateObj, 'YYYY-MM-DD');\n\n        return dateString !== 'Unspecified' ? dateString : dateObj;\n      }\n\n      return _.assign($resource(settings.pathRest, {\n        action: 'get',\n        entity: 'HRJobContractRevision',\n        json: {}\n      }), {\n\n        /**\n         * Validate if a given effective date isn't the equal to any other\n         * contract revision effective date for a given contact\n         *\n         * @param {object} params A list of parameters to pass to the API end-point\n         *   which must contain 'contact_id' and 'effective_date'\n         * @returns {*}\n         */\n        validateEffectiveDate: function (params) {\n          params.effective_date = convertToDateString(params.effective_date);\n          params.sequential = 0;\n          params.debug = settings.debug;\n\n          return this.save({\n            action: 'validateeffectivedate',\n            json: params\n          }, null)\n          .$promise.then(function (result) {\n            return result.values;\n          });\n        }\n      });\n  }]);\n});\n\n//# sourceURL=/job-contract/services/contract-revision.js"),eval("define('job-contract/services/contract-files',[\n  'job-contract/services/services',\n  'job-contract/services/utils'\n], function(services) {\n  'use strict';\n\n  services.factory('ContractFilesService', ['$resource', 'settings', '$q', 'UtilsService', 'FileUploader', '$log',\n    function($resource, settings, $q, UtilsService, FileUploader, $log) {\n      $log.debug('Service: ContractFilesService');\n\n      var ContractFiles = $resource(settings.pathFile + ':action');\n      FileUploader.prototype.queueDelete = [];\n\n      return {\n        delete: function(fileId, entityId, entityTable) {\n\n          if ((!fileId || typeof + fileId !== 'number') ||\n            (!entityId || typeof + entityId !== 'number') ||\n            (!entityTable || typeof entityTable !== 'string')) {\n            return null;\n          }\n\n          var deffered = $q.defer();\n\n          ContractFiles.save({\n            action: 'delete',\n            entityTable: entityTable,\n            entityID: entityId,\n            fileID: fileId\n          },\n          null,\n          function(data) {\n            if (data.values && !+data.values[0].result) {\n              data.is_error = 1;\n            }\n\n            if (UtilsService.errorHandler(data, 'Unable to delete file', deffered)) {\n              return\n            }\n\n            deffered.resolve(data.values[0]);\n          },\n          function() {\n            deffered.reject('Unable to delete file');\n          });\n\n          return deffered.promise;\n        },\n        get: function(entityId, entityTable) {\n\n          if ((!entityId || typeof + entityId !== 'number') ||\n            (!entityTable || typeof entityTable !== 'string')) {\n            return null;\n          }\n\n          var deffered = $q.defer();\n\n          ContractFiles.get({\n            action: 'list',\n            entityTable: entityTable,\n            entityID: entityId\n          },\n          function(data) {\n\n            if (UtilsService.errorHandler(data, 'Unable to fetch files', deffered)) {\n              return\n            }\n\n            deffered.resolve(data.values);\n          },\n          function() {\n            deffered.reject('Unable to fetch files');\n          });\n\n          return deffered.promise;\n        },\n        uploader: function(entityTable, queueLimit) {\n\n          if (!entityTable || typeof entityTable !== 'string') {\n            return null;\n          }\n\n          var uploaderSettings = {\n            url: settings.pathFile + 'upload',\n            formData: [{\n              entityTable: entityTable\n            }]\n          }\n\n          if (queueLimit && typeof queueLimit === 'number') {\n            uploaderSettings.queueLimit = queueLimit;\n          }\n\n          return new FileUploader(uploaderSettings);\n        },\n        upload: function(uploaderInstance, revisionId) {\n\n          if (!uploaderInstance || typeof uploaderInstance !== 'object' ||\n            !revisionId || typeof + revisionId !== 'number') {\n            return null;\n          }\n\n          var deffered = $q.defer(),\n            results = [];\n\n          uploaderInstance.onBeforeUploadItem = function(item) {\n            item.formData.push({\n              entityID: revisionId\n            });\n          };\n\n          uploaderInstance.onCompleteItem = function(item, response) {\n            results.push(response);\n          };\n\n          uploaderInstance.onErrorItem = function(item, response, status, headers) {\n            deffered.reject('Could not upload file: ' + item.file.name);\n            $log.error(' ===== Item Error: ' + status + ' ======');\n            $log.error(' =====  - item ======');\n            $log.error(item);\n            $log.error(' =====  - response ======');\n            $log.error(response);\n            $log.error(' =====  - headers ======');\n            $log.error(headers);\n          };\n\n          uploaderInstance.onCompleteAll = function() {\n            deffered.resolve(results);\n          };\n\n          uploaderInstance.uploadAll();\n\n          return deffered.promise\n        }\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/services/contract-files.js"),eval("define('job-contract/controllers/modal/modal-contract',[\n  'common/angular',\n  'job-contract/controllers/controllers',\n  'job-contract/services/contract',\n  'job-contract/services/contract-revision',\n  'job-contract/services/contract-details',\n  'job-contract/services/contract-hour',\n  'job-contract/services/contract-pay',\n  'job-contract/services/contract-leave',\n  'job-contract/services/contract-health',\n  'job-contract/services/contract-pension',\n  'job-contract/services/contract-files',\n  'job-contract/services/utils',\n  'common/services/pub-sub',\n], function(angular, controllers) {\n  'use strict';\n\n  controllers.controller('ModalContractCtrl', ['$scope', '$uibModal', '$uibModalInstance', '$q', '$rootElement', '$rootScope', '$filter',\n    'ContractService', 'ContractRevisionService', 'ContractDetailsService', 'ContractHourService', 'ContractPayService', 'ContractLeaveService',\n    'ContractHealthService', 'ContractPensionService', 'ContractFilesService', 'action', 'entity',\n    'content', 'files', 'UtilsService', 'utils', 'settings', '$log', 'pubSub',\n    function($scope, $modal, $modalInstance, $q, $rootElement, $rootScope, $filter, ContractService, ContractRevisionService,\n      ContractDetailsService, ContractHourService, ContractPayService, ContractLeaveService, ContractHealthService,\n      ContractPensionService, ContractFilesService, action, entity, content, files,\n      UtilsService, utils, settings, $log, pubSub) {\n      $log.debug('Controller: ModalContractCtrl');\n\n      var content = content || {},\n        copy = content.copy || {},\n        action = action || 'view';\n\n      copy.close = copy.close || 'Close',\n        copy.save = copy.save || 'Save changes',\n        copy.title = copy.title || 'Contract';\n\n      $scope.allowSave = typeof content.allowSave !== 'undefined' ? content.allowSave : false;\n      $scope.entity = {};\n      $scope.action = action;\n      $scope.copy = copy;\n      $scope.fileMaxSize = settings.CRM.maxFileSize || 0;\n      $scope.files = {};\n      $scope.filesTrash = {};\n      $scope.isDisabled = typeof content.isDisabled !== 'undefined' ? content.isDisabled : true;\n      $scope.isPrimaryDisabled = +entity.contract.is_primary;\n      $scope.showIsPrimary = utils.contractListLen > 1 && action != 'change';\n      $scope.uploader = {\n        details: {\n          contract_file: ContractFilesService.uploader('civicrm_hrjobcontract_details')\n        },\n        pension: {\n          evidence_file: ContractFilesService.uploader('civicrm_hrjobcontract_pension', 1)\n        }\n      };\n      $scope.utils = utils;\n\n      angular.copy(entity, $scope.entity);\n      angular.copy(files, $scope.files);\n      $scope.entity.details.period_start_date = convertToDateObject($scope.entity.details.period_start_date);\n      $scope.entity.details.period_end_date = convertToDateObject($scope.entity.details.period_end_date);\n\n      // Init\n      (function init() {\n        angular.forEach($scope.files, function(entityFiles, entityName) {\n          $scope.filesTrash[entityName] = [];\n        });\n\n        $modalInstance.opened.then(function() {\n          $rootScope.$broadcast('hrjc-loader-hide');\n        });\n\n        angular.forEach($scope.uploader, function(entity) {\n          angular.forEach(entity, function(field) {\n            field.onAfterAddingAll = function() {\n              $scope.filesValidate();\n            }\n          });\n        });\n\n        $rootScope.$broadcast('hrjc-loader-show');\n        fetchInsurancePlanTypes().then(function () {\n          $rootScope.$broadcast('hrjc-loader-hide');\n        });\n      }());\n\n      $scope.cancel = function() {\n\n        if (action == 'view' ||\n          (angular.equals(entity, $scope.entity) && angular.equals(files, $scope.files) &&\n            !$scope.uploader.details.contract_file.queue.length && !$scope.uploader.pension.evidence_file.queue.length)) {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.dismiss('cancel');\n          return;\n        }\n\n        //DEBUG\n        if (settings.debug) {\n          angular.forEach(entity, function(entityData, entityName) {\n            if (!angular.equals(entityData, $scope.entity[entityName])) {\n              $log.debug('======================');\n              $log.debug('Changed entity: ' + entityName);\n              $log.debug('Before:');\n              $log.debug(entityData);\n              $log.debug('After:');\n              $log.debug($scope.entity[entityName]);\n            }\n          });\n        }\n\n        var modalInstance = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          templateUrl: settings.pathApp + 'views/modalDialog.html?v=' + (new Date()).getTime(),\n          size: 'sm',\n          controller: 'ModalDialogCtrl',\n          resolve: {\n            content: function() {\n              return {\n                copyCancel: 'No',\n                title: 'Alert',\n                msg: 'Are you sure you want to cancel? Changes will be lost!'\n              };\n            }\n          }\n        });\n\n        modalInstance.result.then(function(confirm) {\n          if (confirm) {\n            $scope.$broadcast('hrjc-loader-hide');\n            $modalInstance.dismiss('cancel');\n          }\n        });\n      };\n\n      $scope.fileMoveToTrash = function(index, entityName) {\n        var entityFiles = $scope.files[entityName],\n          entityFilesTrash = $scope.filesTrash[entityName];\n\n        entityFilesTrash.push(entityFiles[index]);\n        entityFiles.splice(index, 1);\n      };\n\n      $scope.filesValidate = function() {\n        var entityName,\n          fieldName,\n          fileMaxSize = $scope.fileMaxSize,\n          uploader = $scope.uploader,\n          uploaderEntity,\n          uploaderEntityField,\n          uploaderEntityFieldQueue,\n          isValid = true,\n          i, len;\n\n        for (entityName in uploader) {\n          uploaderEntity = uploader[entityName];\n\n          for (fieldName in uploaderEntity) {\n            uploaderEntityField = uploaderEntity[fieldName],\n              uploaderEntityFieldQueue = uploaderEntityField.queue,\n              i = 0, len = uploaderEntityFieldQueue.length;\n\n            for (; i < len && isValid; i++) {\n              isValid = uploaderEntityFieldQueue[i].file.size < fileMaxSize;\n            }\n          }\n        }\n\n        $scope.contractForm.$setValidity('maxFileSize', isValid);\n      };\n\n      if ($scope.allowSave) {\n        $scope.save = function() {\n          $scope.$broadcast('hrjc-loader-show');\n          ContractDetailsService.validateDates({\n            contact_id: settings.contactId,\n            period_start_date: $scope.entity.details.period_start_date,\n            period_end_date: $scope.entity.details.period_end_date,\n            jobcontract_id: entity.contract.id\n          }).then(function(result) {\n            if (result.success) {\n\n              confirmUpdateEntitlements()\n                .then(function () {\n                  processContractUpdate();\n                });\n\n            } else {\n              CRM.alert(result.message, 'Error', 'error');\n              $scope.$broadcast('hrjc-loader-hide');\n            }\n          }, function(reason) {});\n          $scope.$broadcast('hrjc-loader-hide');\n        }\n      }\n\n      function processContractUpdate() {\n        if (angular.equals(entity, $scope.entity) &&\n          angular.equals(files, $scope.files) &&\n          !$scope.uploader.details.contract_file.queue.length &&\n          !$scope.uploader.pension.evidence_file.queue.length) {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.dismiss('cancel');\n          return;\n        }\n\n        switch (action) {\n          case 'edit':\n            if ($scope.entity.contract.is_primary == entity.contract.is_primary) {\n              confirmEdit().then(function(confirmed) {\n                switch (confirmed) {\n                  case 'edit':\n                    contractEdit();\n                    break;\n                  case 'change':\n                    changeReason().then(function(results) {\n                      contractChange(results.reasonId, results.date);\n                    });\n                    break;\n                }\n              });\n            } else {\n              contractEdit();\n            }\n            break;\n          case 'change':\n            changeReason().then(function(results) {\n              contractChange(results.reasonId, results.date);\n            });\n            break;\n          default:\n            $scope.$broadcast('hrjc-loader-hide');\n            $modalInstance.dismiss('cancel');\n            return;\n        }\n      }\n\n      /**\n       * Shows a confirmation dialog warning the user that, if they proceed, the staff\n       * leave entitlement will be updated.\n       *\n       * @returns {*}\n       */\n      function confirmUpdateEntitlements() {\n        var modalUpdateEntitlements = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          size: 'sm',\n          templateUrl: settings.pathApp+'views/modalDialog.html?v='+(new Date()).getTime(),\n          controller: 'ModalDialogCtrl',\n          resolve: {\n            content: {\n              title: 'Update leave entitlements?',\n              msg: 'The system will now update the staff member leave entitlement.',\n              copyConfirm: 'Proceed'\n            }\n          }\n        });\n\n        return modalUpdateEntitlements.result;\n      }\n\n      /**\n       * # TO DO: This should probably happen inside the service that returns the data #\n       *\n       * Converts a date string into a Date object (if string is not empty)\n       *\n       * @param {string} dateString\n       * @param {Date/null}\n       */\n      function convertToDateObject(dateString) {\n        var dateObj = $filter('formatDate')(dateString, Date);\n\n        return dateObj !== 'Unspecified' ? dateObj : dateString;\n      }\n\n      function changeReason() {\n        var modalChangeReason = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          templateUrl: settings.pathApp + 'views/modalChangeReason.html?v=' + (new Date()).getTime(),\n          controller: 'ModalChangeReasonCtrl',\n          resolve: {\n            content: function() {\n              return {\n                copy: {\n                  title: copy.title\n                }\n              }\n            },\n            date: null,\n            reasonId: null\n          }\n        });\n\n        return modalChangeReason.result;\n      }\n\n      function confirmEdit() {\n        var modalConfirmEdit = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          templateUrl: settings.pathApp + 'views/modalConfirmEdit.html?v=' + (new Date()).getTime(),\n          controller: 'ModalDialogCtrl',\n          resolve: {\n            content: function() {\n              return {\n                msg: 'Save without making a new revision?'\n              }\n            }\n          }\n        });\n\n        return modalConfirmEdit.result;\n      }\n\n      function contractEdit() {\n        $scope.$broadcast('hrjc-loader-show');\n        $scope.entity.details.period_end_date = $scope.entity.details.period_end_date || '';\n\n        var entityNew = angular.copy($scope.entity),\n          filesTrash = $scope.filesTrash,\n          uploader = $scope.uploader,\n          entityName, file, i, len, modalInstance;\n\n        var promiseContractEdit = {\n            contract: ContractService.save(entityNew.contract),\n            details: ContractDetailsService.save(entityNew.details),\n            hour: ContractHourService.save(entityNew.hour),\n            pay: ContractPayService.save(entityNew.pay),\n            leave: ContractLeaveService.save(entityNew.leave),\n            health: ContractHealthService.save(entityNew.health),\n            pension: ContractPensionService.save(entityNew.pension)\n          },\n          promiseFilesEditUpload = [],\n          promiseFilesEditDelete = [];\n\n        for (entityName in filesTrash) {\n          i = 0, len = filesTrash[entityName].length;\n          for (i; i < len; i++) {\n            file = filesTrash[entityName][i];\n            promiseFilesEditDelete.push(ContractFilesService.delete(file.fileID, file.entityID, file.entityTable));\n          }\n        }\n\n        angular.extend(promiseContractEdit, {\n          files: !!promiseFilesEditDelete.length ? $q.all(promiseFilesEditDelete) : false\n        });\n\n        $q.all(promiseContractEdit).then(function(results) {\n\n          angular.forEach(uploader, function(entity) {\n            angular.forEach(entity, function(field) {\n              angular.forEach(field.queue, function(item) {\n                if (item.file.size > $scope.fileMaxSize) {\n                  item.remove();\n                }\n              });\n            });\n          });\n\n          if (uploader.details.contract_file.queue.length) {\n            promiseFilesEditUpload.push(ContractFilesService.upload(uploader.details.contract_file, entityNew.details.jobcontract_revision_id));\n          }\n\n          if (uploader.pension.evidence_file.queue.length) {\n            promiseFilesEditUpload.push(ContractFilesService.upload(uploader.pension.evidence_file, entityNew.pension.jobcontract_revision_id));\n          }\n\n          //TODO (incorrect date format in the API response)\n          results.details.period_start_date = entityNew.details.period_start_date;\n          results.details.period_end_date = entityNew.details.period_end_date;\n          //\n\n          //TODO (incorrect JSON format in the API response)\n          results.pay.annual_benefits = entityNew.pay.annual_benefits;\n          results.pay.annual_deductions = entityNew.pay.annual_deductions;\n\n          if (promiseFilesEditUpload.length) {\n            modalInstance = $modal.open({\n              appendTo: $rootElement.find('div').eq(0),\n              templateUrl: settings.pathApp + 'views/modalProgress.html?v=' + (new Date()).getTime(),\n              size: 'sm',\n              controller: 'ModalProgressCtrl',\n              resolve: {\n                uploader: function() {\n                  return uploader;\n                },\n                promiseFilesUpload: function() {\n                  return promiseFilesEditUpload;\n                }\n              }\n            });\n\n            results.files = modalInstance.result;\n            return $q.all(results);\n          }\n\n          return results;\n\n        }).then(function(results) {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.close(results);\n          pubSub.publish('contract-refresh');\n        }, function(reason) {\n          $scope.$broadcast('hrjc-loader-hide');\n          CRM.alert(reason, 'Error', 'error');\n        });\n      }\n\n      function contractChange(reasonId, date) {\n        $scope.$broadcast('hrjc-loader-show');\n\n        ContractRevisionService.validateEffectiveDate({\n          contact_id: settings.contactId,\n          effective_date: date\n        }).then(function(result) {\n          if (result.success) {\n            saveContractChange(reasonId, date);\n          } else {\n            CRM.alert(result.message, 'Error', 'error');\n            $scope.$broadcast('hrjc-loader-hide');\n          }\n        }, function(reason) {});\n      }\n\n      function saveContractChange(reasonId, date) {\n        var entityNew = angular.copy($scope.entity),\n          filesTrash = $scope.filesTrash,\n          uploader = $scope.uploader,\n          entityName, field, fieldName, file, entityChangedList = [],\n          entityChangedListLen = 0,\n          entityFilesTrashLen, fieldQueueLen = 0,\n          i = 0,\n          ii, isChanged, item, modalInstance,\n          promiseContractChange = {},\n          promiseFilesChangeDelete = [],\n          promiseFilesChangeUpload = [],\n          revisionId, entityServices = {\n            details: ContractDetailsService,\n            hour: ContractHourService,\n            pay: ContractPayService,\n            leave: ContractLeaveService,\n            health: ContractHealthService,\n            pension: ContractPensionService\n          };\n\n        for (entityName in entityServices) {\n          isChanged = !angular.equals(entity[entityName], entityNew[entityName]);\n\n          if (!isChanged) {\n            isChanged = !!filesTrash[entityName] && !!filesTrash[entityName].length;\n\n            if (!isChanged && uploader[entityName]) {\n              for (fieldName in uploader[entityName]) {\n                field = uploader[entityName][fieldName];\n                if (field.queue.length) {\n                  isChanged = true;\n                  break;\n                }\n              }\n            }\n\n          }\n\n          if (isChanged) {\n            entityChangedList[i] = {};\n            entityChangedList[i].name = entityName;\n            entityChangedList[i].data = entityNew[entityName];\n            entityChangedList[i].service = entityServices[entityName];\n            i++;\n            entityChangedListLen = i;\n          }\n        }\n\n        if (entityChangedListLen) {\n          UtilsService.prepareEntityIds(entityChangedList[0].data, entity.contract.id);\n\n          entityChangedList[0].service.save(entityChangedList[0].data).then(function(results) {\n            revisionId = !angular.isArray(results) ? results.jobcontract_revision_id : results[0].jobcontract_revision_id,\n              i = 1;\n            promiseContractChange[entityChangedList[0].name] = results;\n\n            for (i; i < entityChangedListLen; i++) {\n              entityName = entityChangedList[i].name;\n\n              UtilsService.prepareEntityIds(entityChangedList[i].data, entity.contract.id, revisionId);\n              promiseContractChange[entityName] = entityChangedList[i].service.save(entityChangedList[i].data);\n            }\n\n            return $q.all(angular.extend(promiseContractChange, {\n              revisionCreated: ContractService.saveRevision({\n                id: revisionId,\n                change_reason: reasonId,\n                effective_date: date\n              })\n            }, {\n              files: false\n            }));\n\n          }).then(function(results) {\n\n            for (entityName in entityServices) {\n              results[entityName] = results[entityName] || entityNew[entityName];\n\n              if (filesTrash[entityName] && filesTrash[entityName].length) {\n                i = 0, entityFilesTrashLen = filesTrash[entityName].length;\n                for (i; i < entityFilesTrashLen; i++) {\n                  file = filesTrash[entityName][i];\n                  promiseFilesChangeDelete.push(ContractFilesService.delete(file.fileID, revisionId, file.entityTable));\n                }\n              }\n            }\n\n            //TODO (incorrect date format in the API response)\n            results.details.period_start_date = entityNew.details.period_start_date;\n            results.details.period_end_date = entityNew.details.period_end_date;\n            results.revisionCreated.effective_date = date || '';\n            //\n\n            //TODO (incorrect JSON format in the API response)\n            results.pay.annual_benefits = entityNew.pay.annual_benefits;\n            results.pay.annual_deductions = entityNew.pay.annual_deductions;\n\n            angular.extend(results.revisionCreated, {\n              details_revision_id: results.details.jobcontract_revision_id,\n              health_revision_id: results.health.jobcontract_revision_id,\n              hour_revision_id: results.hour.jobcontract_revision_id,\n              jobcontract_id: entity.contract.id,\n              leave_revision_id: results.leave[0].jobcontract_revision_id,\n              pay_revision_id: results.pay.jobcontract_revision_id,\n              pension_revision_id: results.pension.jobcontract_revision_id\n            });\n\n            if (promiseFilesChangeDelete.length) {\n              results.files = $q.all(promiseFilesChangeDelete);\n              return $q.all(results);\n            }\n\n            return results\n\n          }).then(function(results) {\n\n            i = 0;\n            for (i; i < entityChangedListLen; i++) {\n              entityName = entityChangedList[i].name;\n\n              if (uploader[entityName]) {\n                for (fieldName in uploader[entityName]) {\n                  field = uploader[entityName][fieldName];\n                  fieldQueueLen = field.queue.length;\n                  ii = 0;\n\n                  for (ii; ii < fieldQueueLen; ii++) {\n                    item = field.queue[ii];\n                    if (item.file.size > $scope.fileMaxSize) {\n                      item.remove();\n                      ii--;\n                      fieldQueueLen--;\n                    }\n                  }\n\n                  if (fieldQueueLen) {\n                    promiseFilesChangeUpload.push(ContractFilesService.upload(field, revisionId));\n                  }\n                }\n              }\n            }\n\n            if (promiseFilesChangeUpload.length) {\n              modalInstance = $modal.open({\n                appendTo: $rootElement.find('div').eq(0),\n                templateUrl: settings.pathApp + 'views/modalProgress.html',\n                size: 'sm',\n                controller: 'ModalProgressCtrl',\n                resolve: {\n                  uploader: function() {\n                    return uploader;\n                  },\n                  promiseFilesUpload: function() {\n                    return promiseFilesChangeUpload;\n                  }\n                }\n              });\n\n              results.files = modalInstance.result;\n              return $q.all(results);\n            }\n\n            return results;\n\n          }).then(function(results) {\n            $scope.$broadcast('hrjc-loader-hide');\n            $modalInstance.close(results);\n            pubSub.publish('contract-refresh');\n          });\n        } else {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.close();\n        }\n      }\n\n      /*\n       * Fetch updated Health and Life Insurance Plan Types\n       */\n      function fetchInsurancePlanTypes() {\n        return $q.all([\n          { name: \"hrjobcontract_health_health_plan_type\", key: 'plan_type' },\n          { name: \"hrjobcontract_health_life_insurance_plan_type\", key: 'plan_type_life_insurance' }\n        ].map(function (planTypeData) {\n          ContractHealthService.getOptions(planTypeData.name, true)\n          .then(function (planTypes) {\n            $rootScope.options.health[planTypeData.key] = _.transform(planTypes, function(acc, type) {\n              acc[type.key] = type.value;\n            }, {});\n          });\n        }));\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-contract.js"),
eval("define('job-contract/controllers/modal/modal-contract-new',[\n  'common/moment',\n  'common/angular',\n  'job-contract/controllers/controllers',\n  'job-contract/services/contract',\n  'job-contract/services/contract-details',\n  'job-contract/services/contract-hour',\n  'job-contract/services/contract-pay',\n  'job-contract/services/contract-leave',\n  'job-contract/services/contract-health',\n  'job-contract/services/contract-pension',\n  'job-contract/services/contract-files',\n  'job-contract/services/utils',\n  'common/services/pub-sub',\n], function(moment, angular, controllers) {\n  'use strict';\n\n  controllers.controller('ModalContractNewCtrl', ['$rootScope', '$scope', '$uibModalInstance', '$q', '$uibModal', '$rootElement', '$sce',\n    'Contract', 'ContractService', 'ContractDetailsService', 'ContractHourService', 'ContractPayService', 'ContractLeaveService',\n    'ContractHealthService', 'ContractPensionService', 'ContractFilesService', 'model', 'UtilsService', 'utils',\n    'settings', '$log', 'pubSub',\n    function($rootScope, $scope, $modalInstance, $q, $modal, $rootElement, $sce, Contract, ContractService, ContractDetailsService,\n      ContractHourService, ContractPayService, ContractLeaveService, ContractHealthService, ContractPensionService,\n      ContractFilesService, model, UtilsService, utils, settings, $log, pubSub) {\n      $log.debug('Controller: ModalContractNewCtrl');\n\n      $scope.allowSave = true;\n      $scope.action = 'new';\n      $scope.copy = {\n        close: 'Cancel',\n        save: 'Add New Job Contract',\n        title: 'Add New Job Contract'\n      };\n      $scope.entity = {};\n      $scope.isDisabled = false;\n      $scope.showIsPrimary = utils.contractListLen;\n\n      $scope.fileMaxSize = settings.CRM.maxFileSize || 0;\n      $scope.uploader = {\n        details: {\n          contract_file: ContractFilesService.uploader('civicrm_hrjobcontract_details')\n        },\n        pension: {\n          evidence_file: ContractFilesService.uploader('civicrm_hrjobcontract_pension', 1)\n        }\n      };\n      $scope.utils = utils;\n\n      angular.copy(model, $scope.entity);\n      $scope.entity.contract = {\n        is_primary: 0\n      };\n\n      // Since we are adding a new Contract, we set the values for each leave type with the AbsenceTypes values\n      setDefaultLeaveValuesFromAbsenceType();\n\n      $scope.tooltips = {\n        fileSize: $sce.trustAsHtml('<p>' +\n          'THE FILE IS TOO LARGE AND CANNOT BE UPLOADED. PLEASE REDUCE THE SIZE OF THE FILE AND TRY AGAIN.' +\n          '</p>'),\n        fte: $sce.trustAsHtml('<div>' +\n          '<strong>FTE</strong> stands for' +\n          'Full Time Equivalent. This is a useful measure for' +\n          'an organisation that has peopleworking part-time.' +\n          'For a full-time person, FTE is always equal to' +\n          '1.0, whereas for a part-time person, the FTE will represent' +\n          'the fraction of standard hours that the person works on a' +\n          'regular basis.<br>' +\n          'E.g. if the standard working day at an organisation' +\n          'comprises of 8 hours, then a person who regularly works for' +\n          '8 hours each day would be considered to be full- time and' +\n          'would have an FTE value of 1.0. A person who regularly works' +\n          'for only 4 hours each day would be considered to be a' +\n          'part-time person and would have an FTE value of 0.5. If the' +\n          'organisation had 10 people, each with an FTE of 1.0 the' +\n          'actual headcount of full-time people would be 10 and the' +\n          'FTE headcount (equal to actual headcount multiplied by the' +\n          'FTE value) would also be 10. However, if the organisation' +\n          'had another 10 people who each worked part-time with an FTE' +\n          'value of 0.5 the actual headcount of part-time people would' +\n          'be 10 while the FTE headcount would only be 5. Thus for an' +\n          'organisation that had a total of 10 full-time people, and 10' +\n          'part-time people (each with an FTE of 0.5) the actual' +\n          'headcount for the organisation would be 20 while the FTE' +\n          'headcount would be 15.' +\n          '</div>')\n      };\n\n      // Init\n      (function init() {\n        angular.forEach($scope.uploader, function(entity){\n          angular.forEach(entity, function(field){\n            field.onAfterAddingAll = function(){\n              $scope.filesValidate();\n            }\n          });\n        });\n\n        $rootScope.$broadcast('hrjc-loader-show');\n        fetchInsurancePlanTypes().then(function () {\n          $rootScope.$broadcast('hrjc-loader-hide');\n        });\n      }());\n\n      $scope.filesValidate = function() {\n        var entityName,\n          fieldName,\n          fileMaxSize = $scope.fileMaxSize,\n          uploader = $scope.uploader,\n          uploaderEntity,\n          uploaderEntityField,\n          uploaderEntityFieldQueue,\n          isValid = true,\n          i, len;\n\n        for (entityName in uploader) {\n          uploaderEntity = uploader[entityName];\n\n          for (fieldName in uploaderEntity) {\n            uploaderEntityField = uploaderEntity[fieldName],\n              uploaderEntityFieldQueue = uploaderEntityField.queue,\n              i = 0, len = uploaderEntityFieldQueue.length;\n\n            for (; i < len && isValid; i++) {\n              isValid = uploaderEntityFieldQueue[i].file.size < fileMaxSize;\n            }\n          }\n        }\n\n        $scope.contractForm.$setValidity('maxFileSize', isValid);\n\n      };\n\n      $scope.cancel = function() {\n        $modalInstance.dismiss('cancel');\n      };\n\n      $scope.save = function() {\n        $scope.$broadcast('hrjc-loader-show');\n\n        ContractDetailsService.validateDates({\n          contact_id: settings.contactId,\n          period_start_date: $scope.entity.details.period_start_date,\n          period_end_date: $scope.entity.details.period_end_date\n        }).then(function(result) {\n          if (result.success) {\n\n            confirmUpdateEntitlements()\n              .then(function () {\n                  saveContract();\n                },\n                function () {\n                  $scope.$broadcast('hrjc-loader-hide');\n                });\n\n          } else {\n            CRM.alert(result.message, 'Error', 'error');\n            $scope.$broadcast('hrjc-loader-hide');\n          }\n        }, function(reason) {});\n      };\n\n      /**\n       * Shows a confirmation dialog warning the user that, if they proceed, the staff\n       * leave entitlement will be updated.\n       *\n       * @returns {*}\n       */\n      function confirmUpdateEntitlements() {\n        var modalUpdateEntitlements = $modal.open({\n          appendTo: $rootElement.find('div').eq(0),\n          size: 'sm',\n          templateUrl: settings.pathApp+'views/modalDialog.html?v='+(new Date()).getTime(),\n          controller: 'ModalDialogCtrl',\n          resolve: {\n            content: {\n              title: 'Update leave entitlements?',\n              msg: 'The system will now update the staff member leave entitlement.',\n              copyConfirm: 'Proceed'\n            }\n          }\n        });\n\n        return modalUpdateEntitlements.result;\n      }\n\n      /**\n       * Saves a new contract\n       */\n      function saveContract() {\n        var contract = new Contract();\n\n        contract.$save({\n          action: 'create',\n          json: {\n            sequential: 1,\n            contact_id: settings.contactId,\n            is_primary: utils.contractListLen ? $scope.entity.contract.is_primary : 1\n          }\n        }, function(data) {\n          var contract = data.values[0],\n            contractId = contract.id,\n            entityDetails = angular.copy($scope.entity.details),\n            entityHour = $scope.entity.hour,\n            entityPay = $scope.entity.pay,\n            entityLeave = $scope.entity.leave,\n            entityHealth = $scope.entity.health,\n            entityPension = $scope.entity.pension,\n            modalInstance,\n            promiseContractNew,\n            promiseUpload = [],\n            uploader = $scope.uploader,\n            revisionId;\n\n          contract.is_current = !entityDetails.period_end_date || moment().diff(entityDetails.period_end_date, \"day\") <= 0;\n\n          UtilsService.prepareEntityIds(entityDetails, contractId);\n\n          ContractDetailsService.save(entityDetails).then(function(results) {\n            revisionId = results.jobcontract_revision_id;\n          }, function(reason) {\n            CRM.alert(reason, 'Error', 'error');\n            ContractService.delete(contractId);\n            $modalInstance.dismiss();\n            return $q.reject();\n          }).then(function() {\n\n            angular.forEach($scope.entity, function(entity) {\n              UtilsService.prepareEntityIds(entity, contractId, revisionId);\n            });\n\n            promiseContractNew = [\n              ContractHourService.save(entityHour),\n              ContractPayService.save(entityPay),\n              ContractLeaveService.save(entityLeave),\n              ContractHealthService.save(entityHealth),\n              ContractPensionService.save(entityPension)\n            ];\n\n            if ($scope.uploader.details.contract_file.queue.length) {\n              promiseUpload.push(ContractFilesService.upload(uploader.details.contract_file, revisionId));\n            }\n\n            if ($scope.uploader.pension.evidence_file.queue.length) {\n              promiseUpload.push(ContractFilesService.upload(uploader.pension.evidence_file, revisionId));\n            }\n\n            if (promiseUpload.length) {\n              modalInstance = $modal.open({\n                appendTo: $rootElement.find('div').eq(0),\n                templateUrl: settings.pathApp + 'views/modalProgress.html',\n                size: 'sm',\n                controller: 'ModalProgressCtrl',\n                resolve: {\n                  uploader: function() {\n                    return uploader;\n                  },\n                  promiseFilesUpload: function() {\n                    return promiseUpload;\n                  }\n                }\n              });\n\n              promiseContractNew.push(modalInstance.result);\n            }\n\n            return $q.all(promiseContractNew);\n          }).then(function() {\n              $scope.$broadcast('hrjc-loader-hide');\n              $modalInstance.close(contract);\n\n              pubSub.publish('contract:created', settings.contactId);\n              pubSub.publish('contract-refresh');\n            },\n            function (reason) {\n              CRM.alert(reason, 'Error', 'error');\n              ContractService.delete(contractId).then(function(result){\n                $scope.$broadcast('hrjc-loader-hide');\n                if (result.is_error) {\n                  CRM.alert((result.error_message || 'Unknown error'), 'Error', 'error');\n                }\n              }, function(error){\n                $scope.$broadcast('hrjc-loader-hide');\n                CRM.alert((error || 'Unknown error'), 'Error', 'error');\n              });\n            });\n        }, function(reason) {\n          $scope.$broadcast('hrjc-loader-hide');\n          $modalInstance.dismiss();\n          CRM.alert((reason.statusText || 'Unknown error'), 'Error', 'error');\n          return $q.reject();\n        });\n\n      }\n\n      /*\n       * Fetch updated Health and Life Insurance Plan Types\n       */\n      function fetchInsurancePlanTypes() {\n        return $q.all([\n          { name: \"hrjobcontract_health_health_plan_type\", key: 'plan_type' },\n          { name: \"hrjobcontract_health_life_insurance_plan_type\", key: 'plan_type_life_insurance' }\n        ].map(function (planTypeData) {\n          ContractHealthService.getOptions(planTypeData.name, true)\n          .then(function (planTypes) {\n            $rootScope.options.health[planTypeData.key] = _.transform(planTypes, function(acc, type) {\n              acc[type.key] = type.value;\n            }, {});\n          });\n        }));\n      }\n\n      /**\n       * This method sets the Leave default values based on their respective Absence Type.\n       *\n       * It will set both the leave amount and if public holidays should be added to it.\n       */\n      function setDefaultLeaveValuesFromAbsenceType() {\n        if(!$scope.entity.leave) {\n          return;\n        }\n\n        $scope.entity.leave.forEach(function (leave, index) {\n          var absenceTypeID = $scope.entity.leave[index].leave_type;\n\n          $scope.entity.leave[index].leave_amount = utils.absenceTypes[absenceTypeID].default_entitlement;\n          $scope.entity.leave[index].add_public_holidays = utils.absenceTypes[absenceTypeID].add_public_holiday_to_entitlement;\n        });\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-contract-new.js"),eval("define('job-contract/controllers/modal/modal-dialog',[\n    'job-contract/controllers/controllers'\n], function (controllers) {\n    'use strict';\n\n    controllers.controller('ModalDialogCtrl',['$scope','$uibModalInstance', '$timeout', 'content', '$log',\n        function ($scope, $modalInstance, $timeout, content, $log) {\n            $log.debug('Controller: ModalDialogCtrl');\n\n            $scope.title = content.title || 'CiviHR Job Contract';\n            $scope.msg = content.msg || '';\n            $scope.copyConfirm = content.copyConfirm || 'Yes';\n            $scope.copyCancel = content.copyCancel || 'Cancel';\n\n            $scope.confirm = function (action) {\n                $modalInstance.close(action || true);\n            };\n\n            $scope.cancel = function () {\n                $modalInstance.dismiss('Cancel');\n            };\n        }]);\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-dialog.js"),eval("define('job-contract/controllers/modal/modal-progress',[\n    'job-contract/controllers/controllers'\n], function (controllers) {\n    'use strict';\n\n    controllers.controller('ModalProgressCtrl',['$scope','$uibModalInstance', '$q', '$timeout', 'uploader',\n        'promiseFilesUpload', '$log',\n        function ($scope, $modalInstance, $q, $timeout, uploader, promiseFilesUpload, $log) {\n            $log.debug('Controller: ModalProgressCtrl');\n\n            var entityName, fieldName;\n\n            $scope.uploader = uploader;\n\n            for (entityName in uploader) {\n                for (fieldName in uploader[entityName]){\n                    if (uploader[entityName][fieldName].queue.length) {\n                        uploader[entityName][fieldName].item = uploader[entityName][fieldName].queue[0].file.name;\n                    }\n                    uploader[entityName][fieldName].onProgressItem = function(item){\n                        this.item = item.file.name;\n                    };\n                }\n            }\n\n            $q.all(promiseFilesUpload).then(function(results){\n                $timeout(function(){\n                    $modalInstance.close(results);\n                },500);\n            });\n\n            $scope.cancel = function () {\n                $modalInstance.dismiss('File upload canceled');\n            };\n\n        }]);\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-progress.js"),eval("define('job-contract/controllers/modal/modal-revision',[\n    'job-contract/controllers/controllers'\n], function (controllers) {\n    'use strict';\n\n    controllers.controller('ModalRevisionCtrl',['$scope', '$rootScope', '$uibModalInstance', '$filter','$q','settings',\n        'revisionDataList', 'revisionList', 'entity', 'fields', 'model', 'modalContract','utils','ContactService','$log',\n        function ($scope, $rootScope, $modalInstance, $filter, $q, settings, revisionDataList, revisionList, entity,\n                 fields, model, modalContract, utils, ContactService, $log) {\n            $log.debug('Controller: ModalRevisionCtrl');\n\n            $scope.$broadcast('hrjc-loader-show');\n            $scope.currentPage = 1;\n            $scope.entity = entity;\n            $scope.fields = angular.copy(fields);\n            $scope.itemsPerPage = 5;\n            $scope.revisionDataList = [];\n            $scope.revisionList = [];\n            $scope.sortCol = 'effective_date';\n            $scope.subFields = {};\n            $scope.maxSize = 5;\n            $scope.modalContract = modalContract;\n            $scope.sortReverse = true;\n\n            (function(){\n                var i = 0, len = $scope.fields.length, field;\n                for (i; i < len; i++) {\n                    field = $scope.fields[i];\n                    field.selected = true;\n                    field.isArray = field.name == 'leave_type' || field.name == 'leave_amount';\n\n                    if (field.name == 'id' || field.name == 'jobcontract_revision_id') {\n                        field.display = false;\n                        continue;\n                    }\n\n                    field.display = true;\n                }\n\n                $scope.fields.unshift({\n                    name: 'effective_date',\n                    title: 'Effective Date',\n                    display: true,\n                    selected: true,\n                    isArray: false,\n                    extends: true\n                });\n\n                $scope.fields.push({\n                    name: 'editor_name',\n                    title: 'Change Recorded By',\n                    display: true,\n                    selected: true,\n                    isArray: false,\n                    extends: true\n                },{\n                    name: 'change_reason',\n                    title: 'Reason For Change',\n                    display: true,\n                    selected: true,\n                    isArray: false,\n                    extends: true\n                })\n\n            })();\n\n            (function(){\n                var i = 0, iNext, isLast, len = revisionDataList.length, isUnique;\n                for (i; i < len; i++){\n                    iNext = i+1;\n                    isLast = iNext == len;\n\n                    if (!revisionDataList[i]) {\n                        revisionDataList[i] = model;\n                    }\n\n                    if (!isLast && !revisionDataList[iNext]) {\n                        revisionDataList[iNext] = model;\n                    }\n\n                    if (angular.isArray(revisionDataList[i])) {\n                        revisionDataList[i] = {\n                            jobcontract_revision_id: revisionDataList[i][0].jobcontract_revision_id,\n                            data: revisionDataList[i]\n                        }\n                    }\n\n                    angular.extend(revisionDataList[i],{\n                      effective_date: $filter('date')(revisionList[i].effective_date, 'yyyy/MM/dd') || '',\n                      editor_name: revisionList[i].editor_name || '',\n                      change_reason: $rootScope.options.contract.change_reason[revisionList[i].change_reason] || '',\n                      details_revision_id: revisionList[i].details_revision_id,\n                      health_revision_id: revisionList[i].health_revision_id,\n                      hour_revision_id: revisionList[i].hour_revision_id,\n                      leave_revision_id: revisionList[i].leave_revision_id,\n                      pay_revision_id: revisionList[i].pay_revision_id,\n                      pension_revision_id: revisionList[i].pension_revision_id,\n                      role_revision_id: revisionList[i].role_revision_id\n                    })\n                    $scope.revisionDataList.push(revisionDataList[i]);\n                }\n            })();\n\n            switch (entity) {\n                case 'hour':\n                    (function(){\n                        var hoursLocation;\n                        angular.forEach($scope.revisionDataList, function(revisionData){\n                            if (revisionData.location_standard_hours) {\n                                hoursLocation = $filter('filter')(utils.hoursLocation,{id: revisionData.location_standard_hours})[0];\n                                revisionData.location_standard_hours = hoursLocation.location + ': ' +\n                                hoursLocation.standard_hours + 'h per ' +\n                                hoursLocation.periodicity;\n                            }\n                        });\n                    })();\n                    break;\n                case 'health':\n                    angular.forEach($scope.revisionDataList, function(revisionData){\n                        if (revisionData.provider) {\n                            ContactService.getOne(revisionData.provider).then(function(contact){\n                                revisionData.provider = contact.label;\n                            });\n                        }\n\n                        if (revisionData.provider_life_insurance) {\n                            ContactService.getOne(revisionData.provider_life_insurance).then(function(contact){\n                                revisionData.provider_life_insurance = contact.label;\n                            });\n                        }\n                    });\n                    break;\n                case 'pay':\n                    (function(){\n                        var payScaleGrade;\n                        angular.forEach($scope.revisionDataList, function(revisionData){\n                            if (revisionData.pay_scale) {\n                                payScaleGrade = $filter('filter')(utils.payScaleGrade,{id: revisionData.pay_scale})[0] || $filter('filter')(utils.payScaleGrade,{pay_scale: revisionData.pay_scale})[0];\n                                revisionData.pay_scale = payScaleGrade.pay_scale +\n                                (payScaleGrade.currency ? ' - ' + $rootScope.options.pay.pay_currency[payScaleGrade.currency] : '') +\n                                (payScaleGrade.amount ? ' ' + payScaleGrade.amount : '') +\n                                (payScaleGrade.pay_frequency ? ' per ' + payScaleGrade.pay_frequency : '');\n                            }\n                        });\n                    })();\n\n                    $filter('filter')($scope.fields,{name: 'pay_is_auto_est'})[0].pseudoconstant = true;\n\n                    $scope.subFields = {\n                        annual_benefits: [{\n                            name: 'name',\n                            title: 'Benefit',\n                            pseudoconstant: 'benefit_name'\n                        },{\n                            name: 'type',\n                            title: 'Type',\n                            pseudoconstant: 'benefit_type'\n                        },{\n                            name: 'amount_pct',\n                            title: '% amount',\n                            pseudoconstant: false\n                        },{\n                            name: 'amount_abs',\n                            title: 'Absolute amount',\n                            pseudoconstant: false\n                        }],\n                        annual_deductions: [{\n                            name: 'name',\n                            title: 'Deduction',\n                            pseudoconstant: 'deduction_name'\n                        },{\n                            name: 'type',\n                            title: 'Type',\n                            pseudoconstant: 'deduction_type'\n                        },{\n                            name: 'amount_pct',\n                            title: '% amount',\n                            pseudoconstant: false\n                        },{\n                            name: 'amount_abs',\n                            title: 'Absolute amount',\n                            pseudoconstant: false\n                        }]\n                    }\n                    break;\n                case 'pension':\n                    $filter('filter')($scope.fields,{name: 'is_enrolled'})[0].pseudoconstant = true;\n                    break;\n            }\n\n            function urlCSVBuild(){\n                var url = settings.pathReport + (settings.pathReport.indexOf('?') > -1 ? '&' : '?' ),\n                    entityName = $scope.entity,\n                    fieldName, prefix;\n\n                angular.forEach($scope.fields, function(field){\n                    fieldName = field.name != 'editor_name' ? field.name : 'editor_uid';\n                    prefix = !field.extends ? (entityName + '_') : '';\n\n                    if (field.selected) {\n                        url += 'fields['+prefix+fieldName+']=1&';\n                    }\n                });\n\n                url += 'fields[sort_name]=1' +\n                        '&fields[first_name]=1' +\n                        '&fields[last_name]=1' +\n                        '&fields[external_identifier]=1' +\n                        '&fields[email]=1' +\n                        '&fields[street_address]=1' +\n                        '&fields[city]=1' +\n                        '&fields[name]=1' +\n                        '&fields[contract_contact_id]=1' +\n                        '&fields[contract_contract_id]=1' +\n                        '&fields[jobcontract_revision_id]=1' +\n                        '&fields[change_reason]=1' +\n                        '&fields[created_date]=1' +\n                        '&fields[effective_date]=1' +\n                        '&fields[modified_date]=1' +\n                        '&order_bys[1][column]=id&order_bys[1][order]=ASC' +\n                        '&order_bys[2][column]=civicrm_hrjobcontract_revision_revision_id&order_bys[2][order]=ASC' +\n                        '&order_bys[3][column]=-&order_bys[3][order]=ASC' +\n                        '&order_bys[4][column]=-&order_bys[4][order]=ASC' +\n                        '&order_bys[5][column]=-&order_bys[5][order]=ASC' +\n                        '&contract_id_op=eq&permission=access+CiviReport' +\n                        '&row_count=' +\n                        '&_qf_Summary_submit_csv=Preview+CSV' +\n                        '&groups=' +\n                        '&contract_id_value='+revisionList[0].jobcontract_id +\n                        '&group_bys[civicrm_hrjobcontract_revision_revision_id]=1';\n\n                return url;\n            };\n            $scope.urlCSV = urlCSVBuild();\n\n            $scope.createPage = function(){\n                var start = (($scope.currentPage - 1) * $scope.itemsPerPage),\n                    end = start + $scope.itemsPerPage;\n\n                $scope.revisionDataListPage = $scope.revisionDataList.slice(start, end);\n            }\n\n            $scope.sortBy = function(sortCol, sortReverse){\n\n                if (typeof sortCol !== 'undefined') {\n\n                    if ($scope.sortCol == sortCol) {\n                        $scope.sortReverse = !$scope.sortReverse;\n                    } else {\n                        $scope.sortCol = sortCol;\n                    }\n\n                }\n\n                if (typeof sortReverse !== 'undefined') {\n                    $scope.sortReverse = sortReverse;\n                }\n\n                $scope.revisionDataList = $filter('orderBy')($scope.revisionDataList, $scope.sortCol, $scope.sortReverse);\n            };\n            $scope.sortBy();\n\n            $scope.toggleFieldsSelected = function (field) {\n                field.selected = !field.selected;\n                $scope.urlCSV = urlCSVBuild();\n            };\n\n            $modalInstance.opened.then(function(){\n                $rootScope.$broadcast('hrjc-loader-hide');\n            });\n\n            $scope.cancel = function () {\n                $modalInstance.dismiss('cancel');\n            };\n\n            $scope.$watch('currentPage', function() {\n                $scope.createPage();\n            });\n        }]);\n});\n\n//# sourceURL=/job-contract/controllers/modal/modal-revision.js"),eval("define('job-contract/controllers/form/form-general',[\n    'common/moment',\n    'job-contract/controllers/controllers',\n    'common/filters/angular-date/format-date'\n], function (moment, controllers){\n  'use strict';\n\n  controllers.controller('FormGeneralCtrl',['$scope', '$log', 'HR_settings',\n    function ($scope, $log, HR_settings) {\n      $log.debug('Controller: FormGeneralCtrl');\n\n      var entityDetails = $scope.entity.details;\n\n      $scope.format = HR_settings.DATE_FORMAT;\n      $scope.datepickerOptions = initDatepickerOptions();\n\n      $scope.dpOpen = function($event, opened){\n        $event.preventDefault();\n        $event.stopPropagation();\n\n        $scope[opened] = true;\n      };\n\n      $scope.$watch('entity.details.period_start_date', function(){\n        $scope.datepickerOptions.end.minDate = getLimitDate(entityDetails.period_start_date, 'min');\n        $scope.duration = duration(entityDetails.period_start_date, entityDetails.period_end_date);\n      });\n\n      $scope.$watch('entity.details.period_end_date', function(){\n        if (entityDetails.period_end_date) {\n          $scope.datepickerOptions.start.maxDate = getLimitDate(entityDetails.period_end_date, 'max');\n        } else {\n          $scope.datepickerOptions.start.maxDate = null;\n          entityDetails.end_reason = null;\n        }\n\n        $scope.duration = duration(entityDetails.period_start_date, entityDetails.period_end_date);\n      });\n\n      $scope.$watch('entity.details.position', function(newVal, oldVal){\n        if (newVal !== oldVal && entityDetails.title === oldVal) {\n          $scope.contractForm.detailsTitle.$setViewValue(newVal);\n          $scope.contractForm.detailsTitle.$render();\n        }\n      });\n\n      $scope.$watch('entity.details.notice_amount', function(newVal, oldVal){\n        if (+newVal && !entityDetails.notice_unit) {\n          $scope.contractForm.detailsNoticeUnit.$setValidity('required', false);\n          $scope.contractForm.detailsNoticeUnit.$dirty = true;\n        }\n\n        if (newVal !== oldVal && entityDetails.notice_amount_employee === oldVal) {\n          entityDetails.notice_amount_employee = newVal;\n        }\n      });\n\n      $scope.$watch('entity.details.notice_amount_employee', function(newVal){\n        if (+newVal && !entityDetails.notice_unit_employee) {\n          $scope.contractForm.detailsNoticeUnitEmployee.$setValidity('required', false);\n          $scope.contractForm.detailsNoticeUnitEmployee.$dirty = true;\n        }\n      });\n\n      $scope.$watch('entity.details.notice_unit', function(newVal, oldVal){\n        if (newVal !== oldVal && entityDetails.notice_unit_employee === oldVal) {\n          entityDetails.notice_unit_employee = newVal;\n        }\n      });\n\n      /**\n       * Calculates the duration of the period between the given start and end\n       * dates, in years, months and days. Calculation includes both start and\n       * end dates in duration.\n       *\n       * Special handling for month and year diffs is used by moment.js, \n       * optimized to ensure that duration from 1st day of month to last day of \n       * month is calculated as \"1 month\".  This implies that duration between \n       * nth day of a month and (n-1)th day of next month is exactly \"1 month\" \n       * (eg. 2017-01-15 => 2017-02-14 = \"1 month\").  The analogue is expected\n       * of years calculation (ie. duration between nth day of a month and\n       * (n-1)th day of that same month in next year is calculated as \"1 year\", \n       * even on leap years). \n       * \n       * @param  {Date} dateStart\n       * @param  {Date} dateEnd\n       * \n       * @return {string}\n       *   Duration in years, months and days\n       */\n      function duration(dateStart, dateEnd){\n        if (!dateStart || !dateEnd) {\n          return null;\n        }\n\n        var days, months, m, years;\n\n        m = moment(dateEnd);\n        m.add(1, 'days');\n        years = m.diff(dateStart, 'years');\n\n        m.add(-years, 'years');\n        months = m.diff(dateStart, 'months');\n\n        m.add(-months, 'months');\n        days = m.diff(dateStart, 'days');\n\n        years = years > 0  ? (years > 1 ? years + ' years ' : years + ' year ') :  '';\n        months = months > 0 ? (months > 1 ? months + ' months ' : months + ' month ') :  '';\n        days = days > 0 ? (days > 1 ? days + ' days' : days + ' day') : '';\n\n        return (years + months + days) || '0 days';\n      }\n\n      /**\n       * Return the max or min date allowed based on the given date\n       * (basically adds a day for `min`, subtracts it for `max`)\n       *\n       * @param  {Date} date\n       * @param  {string} type either 'max' or 'min'\n       * @return {[Date]}\n       */\n      function getLimitDate(date, type) {\n        type = type || 'min';\n\n        return moment(date)[(type === 'max' ? 'subtract' : 'add')](1, 'day').toDate();\n      }\n\n      /**\n       * Initializes the datepicker options\n       *\n       * @return {Object}\n       */\n      function initDatepickerOptions() {\n        return {\n          start: {\n            maxDate: entityDetails.period_end_date ? getLimitDate(entityDetails.period_end_date, 'max') : null\n          },\n          end: {\n            minDate: entityDetails.period_start_date ? getLimitDate(entityDetails.period_start_date, 'min') : null\n          }\n        };\n      }\n  }]);\n});\n\n//# sourceURL=/job-contract/controllers/form/form-general.js"),
eval("/*\nfraction.js\nA Javascript fraction library.\n\nCopyright (c) 2009  Erik Garrison <erik@hypervolu.me>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n\n/* Fractions */\n/* \n *\n * Fraction objects are comprised of a numerator and a denomenator.  These\n * values can be accessed at fraction.numerator and fraction.denomenator.\n *\n * Fractions are always returned and stored in lowest-form normalized format.\n * This is accomplished via Fraction.normalize.\n *\n * The following mathematical operations on fractions are supported:\n *\n * Fraction.equals\n * Fraction.add\n * Fraction.subtract\n * Fraction.multiply\n * Fraction.divide\n *\n * These operations accept both numbers and fraction objects.  (Best results\n * are guaranteed when the input is a fraction object.)  They all return a new\n * Fraction object.\n *\n * Usage:\n *\n * TODO\n *\n */\n\n/*\n * The Fraction constructor takes one of:\n *   an explicit numerator (integer) and denominator (integer),\n *   a string representation of the fraction (string),\n *   or a floating-point number (float)\n *\n * These initialization methods are provided for convenience.  Because of\n * rounding issues the best results will be given when the fraction is\n * constructed from an explicit integer numerator and denomenator, and not a\n * decimal number.\n *\n *\n * e.g. new Fraction(1, 2) --> 1/2\n *      new Fraction('1/2') --> 1/2\n *      new Fraction('2 3/4') --> 11/4  (prints as 2 3/4)\n *\n */\ndefine('job-contract/vendor/fraction',[],function(){\n    var Fraction = function(numerator, denominator)\n    {\n        /* double argument invocation */\n        if (typeof numerator !== 'undefined' && denominator) {\n            if (typeof(numerator) === 'number' && typeof(denominator) === 'number') {\n                this.numerator = numerator;\n                this.denominator = denominator;\n            } else if (typeof(numerator) === 'string' && typeof(denominator) === 'string') {\n                // what are they?\n                // hmm....\n                // assume they are ints?\n                this.numerator = parseInt(numerator);\n                this.denominator = parseInt(denominator);\n            }\n        /* single-argument invocation */\n        } else if (typeof denominator === 'undefined') {\n            num = numerator; // swap variable names for legibility\n            if (typeof(num) === 'number') {  // just a straight number init\n                this.numerator = num;\n                this.denominator = 1;\n            } else if (typeof(num) === 'string') {\n                var a, b;  // hold the first and second part of the fraction, e.g. a = '1' and b = '2/3' in 1 2/3\n                           // or a = '2/3' and b = undefined if we are just passed a single-part number\n                var arr = num.split(' ')\n                if (arr[0]) a = arr[0]\n                if (arr[1]) b = arr[1]\n                /* compound fraction e.g. 'A B/C' */\n                //  if a is an integer ...\n                if (a % 1 === 0 && b && b.match('/')) {\n                    return (new Fraction(a)).add(new Fraction(b));\n                } else if (a && !b) {\n                    /* simple fraction e.g. 'A/B' */\n                    if (typeof(a) === 'string' && a.match('/')) {\n                        // it's not a whole number... it's actually a fraction without a whole part written\n                        var f = a.split('/');\n                        this.numerator = f[0]; this.denominator = f[1];\n                    /* string floating point */\n                    } else if (typeof(a) === 'string' && a.match('\\.')) {\n                        return new Fraction(parseFloat(a));\n                    /* whole number e.g. 'A' */\n                    } else { // just passed a whole number as a string\n                        this.numerator = parseInt(a);\n                        this.denominator = 1;\n                    }\n                } else {\n                    return undefined; // could not parse\n                }\n            }\n        }\n        this.normalize();\n    }\n\n\n    Fraction.prototype.clone = function()\n    {\n        return new Fraction(this.numerator, this.denominator);\n    }\n\n\n    /* pretty-printer, converts fractions into whole numbers and fractions */\n    Fraction.prototype.toString = function()\n    {\n        if (this.denominator==='NaN') return 'NaN'\n        var wholepart = (this.numerator/this.denominator>0) ?\n          Math.floor(this.numerator / this.denominator) :\n          Math.ceil(this.numerator / this.denominator)\n        var numerator = this.numerator % this.denominator\n        var denominator = this.denominator;\n        var result = [];\n        if (wholepart != 0)\n            result.push(wholepart);\n        if (numerator != 0)\n            result.push(((wholepart===0) ? numerator : Math.abs(numerator)) + '/' + denominator);\n        return result.length > 0 ? result.join(' ') : 0;\n    }\n\n\n    /* destructively rescale the fraction by some integral factor */\n    Fraction.prototype.rescale = function(factor)\n    {\n        this.numerator *= factor;\n        this.denominator *= factor;\n        return this;\n    }\n\n\n    Fraction.prototype.add = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction) {\n            b = b.clone();\n        } else {\n            b = new Fraction(b);\n        }\n        td = a.denominator;\n        a.rescale(b.denominator);\n        b.rescale(td);\n\n        a.numerator += b.numerator;\n\n        return a.normalize();\n    }\n\n\n    Fraction.prototype.subtract = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction) {\n            b = b.clone();  // we scale our argument destructively, so clone\n        } else {\n            b = new Fraction(b);\n        }\n        td = a.denominator;\n        a.rescale(b.denominator);\n        b.rescale(td);\n\n        a.numerator -= b.numerator;\n\n        return a.normalize();\n    }\n\n\n    Fraction.prototype.multiply = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction)\n        {\n            a.numerator *= b.numerator;\n            a.denominator *= b.denominator;\n        } else if (typeof b === 'number') {\n            a.numerator *= b;\n        } else {\n            return a.multiply(new Fraction(b));\n        }\n        return a.normalize();\n    }\n\n    Fraction.prototype.divide = function(b)\n    {\n        var a = this.clone();\n        if (b instanceof Fraction)\n        {\n            a.numerator *= b.denominator;\n            a.denominator *= b.numerator;\n        } else if (typeof b === 'number') {\n            a.denominator *= b;\n        } else {\n            return a.divide(new Fraction(b));\n        }\n        return a.normalize();\n    }\n\n    Fraction.prototype.equals = function(b)\n    {\n        if (!(b instanceof Fraction)) {\n            b = new Fraction(b);\n        }\n        // fractions that are equal should have equal normalized forms\n        var a = this.clone().normalize();\n        var b = b.clone().normalize();\n        return (a.numerator === b.numerator && a.denominator === b.denominator);\n    }\n\n\n    /* Utility functions */\n\n    /* Destructively normalize the fraction to its smallest representation.\n     * e.g. 4/16 -> 1/4, 14/28 -> 1/2, etc.\n     * This is called after all math ops.\n     */\n    Fraction.prototype.normalize = (function()\n    {\n\n        var isFloat = function(n)\n        {\n            return (typeof(n) === 'number' &&\n                    ((n > 0 && n % 1 > 0 && n % 1 < 1) ||\n                     (n < 0 && n % -1 < 0 && n % -1 > -1))\n                   );\n        }\n\n        var roundToPlaces = function(n, places)\n        {\n            if (!places) {\n                return Math.round(n);\n            } else {\n                var scalar = Math.pow(10, places);\n                return Math.round(n*scalar)/scalar;\n            }\n        }\n\n        return (function() {\n\n            // XXX hackish.  Is there a better way to address this issue?\n            //\n            /* first check if we have decimals, and if we do eliminate them\n             * multiply by the 10 ^ number of decimal places in the number\n             * round the number to nine decimal places\n             * to avoid js floating point funnies\n             */\n            if (isFloat(this.denominator)) {\n                var rounded = roundToPlaces(this.denominator, 9);\n                var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);\n                this.denominator = Math.round(this.denominator * scaleup); // this !!! should be a whole number\n                //this.numerator *= scaleup;\n                this.numerator *= scaleup;\n            }\n            if (isFloat(this.numerator)) {\n                var rounded = roundToPlaces(this.numerator, 9);\n                var scaleup = Math.pow(10, rounded.toString().split('.')[1].length);\n                this.numerator = Math.round(this.numerator * scaleup); // this !!! should be a whole number\n                //this.numerator *= scaleup;\n                this.denominator *= scaleup;\n            }\n            var gcf = Fraction.gcf(this.numerator, this.denominator);\n            this.numerator /= gcf;\n            this.denominator /= gcf;\n            if ((this.numerator < 0 && this.denominator < 0) || (this.numerator > 0 && this.denominator < 0)) {\n                this.numerator *= -1;\n                this.denominator *= -1;\n            }\n            return this;\n        });\n\n    })();\n\n\n    /* Takes two numbers and returns their greatest common factor.\n     */\n    Fraction.gcf = function(a, b)\n    {\n\n        var common_factors = [];\n        var fa = Fraction.primeFactors(a);\n        var fb = Fraction.primeFactors(b);\n        // for each factor in fa\n        // if it's also in fb\n        // put it into the common factors\n        fa.forEach(function (factor)\n        {\n            var i = fb.indexOf(factor);\n            if (i >= 0) {\n                common_factors.push(factor);\n                fb.splice(i,1); // remove from fb\n            }\n        });\n\n        if (common_factors.length === 0)\n            return 1;\n\n        var gcf = (function() {\n            var r = common_factors[0];\n            var i;\n            for (i=1;i<common_factors.length;i++)\n            {\n                r = r * common_factors[i];\n            }\n            return r;\n        })();\n\n        return gcf;\n\n    };\n\n\n    // Adapted from:\n    // http://www.btinternet.com/~se16/js/factor.htm\n    Fraction.primeFactors = function(n)\n    {\n\n        var num = Math.abs(n);\n        var factors = [];\n        var _factor = 2;  // first potential prime factor\n\n        while (_factor * _factor <= num)  // should we keep looking for factors?\n        {\n          if (num % _factor === 0)  // this is a factor\n            {\n                factors.push(_factor);  // so keep it\n                num = num/_factor;  // and divide our search point by it\n            }\n            else\n            {\n                _factor++;  // and increment\n            }\n        }\n\n        if (num != 1)                    // If there is anything left at the end...\n        {                                // ...this must be the last prime factor\n            factors.push(num);           //    so it too should be recorded\n        }\n\n        return factors;                  // Return the prime factors\n    }\n\n    return Fraction;\n});\n//# sourceURL=/job-contract/vendor/fraction.js"),eval("define('job-contract/controllers/form/form-hour',[\n  'job-contract/vendor/fraction',\n  'job-contract/controllers/controllers'\n], function (Fraction, controllers) {\n  'use strict';\n\n  controllers.controller('FormHourCtrl',['$scope', '$rootScope', '$filter', '$log',\n    function ($scope, $rootScope, $filter, $log) {\n      $log.debug('Controller: FormHourCtrl');\n\n      var entityHour = $scope.entity.hour,\n        utilsHoursLocation = $scope.utils.hoursLocation,\n        locStandHrs = {},\n        hourTypeMapping = {\n          0: 'CASUAL',\n          4: 'PART_TIME',\n          8: 'FULL_TIME'\n        };\n\n      $scope.hrsTypeDefined = false;\n      $scope.hrsAmountDefined = false;\n      entityHour.location_standard_hours = entityHour.location_standard_hours || \"1\";\n      locStandHrs = $filter('getObjById')(utilsHoursLocation, entityHour.location_standard_hours);\n\n      function updateHours(locStandHrs, hrsTypeId) {\n        $scope.hrsTypeDefined = !!entityHour.hours_type;\n        $scope.hrsAmountDefined = !!entityHour.hours_amount;\n        entityHour.hours_unit = locStandHrs.periodicity;\n\n        // reset if hours are not defined or if new choice is \"full time\"\n        if ($scope.hrsTypeDefined && (!$scope.hrsAmountDefined || hourTypeMapping[+hrsTypeId] === 'FULL_TIME')) {\n          switch(hourTypeMapping[+hrsTypeId]) {\n            case 'FULL_TIME':\n              entityHour.hours_amount = locStandHrs.standard_hours;\n              break;\n            case 'PART_TIME':\n              entityHour.hours_amount = Math.round(locStandHrs.standard_hours / 2);\n              break;\n            case 'CASUAL':\n              entityHour.hours_amount = 0;\n              break;\n            default:\n              entityHour.hours_amount = '';\n          }\n        } else if (!$scope.hrsAmountDefined && !$scope.hrsAmountDefined) {\n          entityHour.hours_amount = '';\n          entityHour.hours_unit = '';\n        }\n      }\n\n      function updateFTE(hrsStandard, hrsAmount){\n\n        hrsAmount = parseFloat(hrsAmount) || 0,\n        hrsStandard = parseFloat(hrsStandard) || 0;\n\n        var fteFraction = new Fraction(hrsAmount, hrsStandard);\n\n        entityHour.fte_num = String(+entityHour.hours_type ? fteFraction.numerator : 0);\n        entityHour.fte_denom = String(+entityHour.hours_type ? fteFraction.denominator : 0);\n        entityHour.hours_fte = String(parseFloat(((entityHour.fte_num/entityHour.fte_denom) || 0).toFixed(2)));\n\n        $scope.fteFraction = entityHour.fte_num + '/' + entityHour.fte_denom;\n      }\n\n      $scope.$watch('entity.hour.location_standard_hours', function(locStandHrsId){\n        locStandHrs = $filter('getObjById')(utilsHoursLocation, locStandHrsId);\n        updateHours(locStandHrs, entityHour.hours_type);\n        updateFTE(locStandHrs.standard_hours, entityHour.hours_amount);\n      });\n\n      $scope.$watch('entity.hour.hours_type', function(hrsTypeId, hrsTypeIdPrev){\n        if (hrsTypeId != hrsTypeIdPrev) {\n          updateHours(locStandHrs, hrsTypeId);\n          updateFTE(locStandHrs.standard_hours, entityHour.hours_amount);\n        }\n      });\n\n      $scope.$watch('entity.hour.hours_amount', function(hrsAmount, hrsAmountPrev){\n        if (hrsAmount != hrsAmountPrev) {\n          updateFTE(locStandHrs.standard_hours, hrsAmount);\n        }\n      });\n\n      $scope.$watch('entity.hour.hours_unit', function(hrsUnit, hrsUnitPrev){\n        if (hrsUnit != hrsUnitPrev) {\n          updateFTE(locStandHrs.standard_hours, entityHour.hours_amount);\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/form/form-hour.js"),eval("/* eslint-env amd, jasmine */\n\ndefine('job-contract/controllers/form/form-health',[\n  'job-contract/controllers/controllers',\n  'job-contract/services/contact'\n], function (controllers) {\n  'use strict';\n\n  controllers.controller('FormHealthCtrl', ['$scope', 'ContactService', '$log',\n    function ($scope, ContactService, $log) {\n      $log.debug('Controller: FormHealthCtrl');\n\n      $scope.contacts = {\n        Health_Insurance_Provider: [],\n        Life_Insurance_Provider: []\n      };\n\n      $scope.refreshContacts = function (input, contactSubType) {\n        if (!input) {\n          return;\n        }\n\n        ContactService.search(input, {\n          contact_type: 'Organization',\n          contact_sub_type: contactSubType\n        }).then(function (results) {\n          $scope.contacts[contactSubType] = results;\n        });\n      };\n\n      if ($scope.entity.health.provider) {\n        ContactService.getOne($scope.entity.health.provider).then(function (result) {\n          $scope.contacts.Health_Insurance_Provider.push(result);\n        });\n      }\n\n      if ($scope.entity.health.provider_life_insurance) {\n        ContactService.getOne($scope.entity.health.provider_life_insurance).then(function (result) {\n          $scope.contacts.Life_Insurance_Provider.push(result);\n        });\n      }\n    }\n  ]);\n});\n\n//# sourceURL=/job-contract/controllers/form/form-health.js"),eval("define('job-contract/controllers/form/form-pay',[\n    'job-contract/controllers/controllers'\n], function (controllers) {\n    'use strict';\n\n    controllers.controller('FormPayCtrl',['$scope','$filter','settings', '$log',\n        function ($scope, $filter, settings, $log) {\n            $log.debug('Controller: FormPayCtrl');\n\n            var entityPay = $scope.entity.pay || {},\n                defaults = {\n                    pay_amount: 0,\n                    pay_currency: settings.CRM.defaultCurrency,\n                    pay_cycle: '2',\n                    pay_unit: 'Year'\n                },\n                utilsPayScaleGrade = $scope.utils.payScaleGrade,\n                workPerYear = {\n                    Year: 1,\n                    Month: 12,\n                    Bimonthly: 24,\n                    Week: 52,\n                    Biweekly: 104,\n                    Fortnight: 26,\n                    Day: 260,\n                    Hour: 2080\n                };\n\n            entityPay.is_paid = entityPay.is_paid || 0;\n            entityPay.pay_is_auto_est = '0';\n            entityPay.annual_benefits = entityPay.annual_benefits || [];\n            entityPay.annual_deductions = entityPay.annual_deductions || [];\n\n            $scope.collapseBenDed = !entityPay.annual_benefits.length && !entityPay.annual_deductions.length;\n            $scope.benefits_per_cycle = (0).toFixed(2);\n            $scope.benefits_per_cycle_net = 0;\n            $scope.deductions_per_cycle = (0).toFixed(2);\n\n            function getCycles() {\n                var cycles = 1;\n\n                switch (+entityPay.pay_cycle) {\n                    case 1:\n                        cycles = workPerYear.Week;\n                        break;\n                    case 2:\n                        cycles = workPerYear.Month;\n                        break;\n                    case 3:\n                        cycles = workPerYear.Biweekly;\n                        break;\n                    case 4:\n                        cycles = workPerYear.Bimonthly;\n                        break;\n                }\n\n                return cycles;\n            }\n\n            $scope.add = function(array){\n                array.push({\n                    \"name\": \"\",\n                    \"type\": \"\",\n                    \"amount_pct\": \"\",\n                    \"amount_abs\": \"\"\n                });\n            };\n\n            $scope.applyPayScaleGradeData = function(){\n                if (entityPay.pay_scale) {\n                    var payScaleGrade = $filter('getObjById')(utilsPayScaleGrade, entityPay.pay_scale);\n                    entityPay.pay_amount = payScaleGrade.amount || defaults.pay_amount;\n                    entityPay.pay_currency = payScaleGrade.currency || defaults.pay_currency;\n                    entityPay.pay_unit = payScaleGrade.pay_frequency || defaults.pay_unit;\n                }\n            };\n\n            $scope.calcAnnualPayEst = function(){\n                if (+entityPay.is_paid) {\n                    entityPay.pay_annualized_est = (entityPay.pay_amount * workPerYear[entityPay.pay_unit] || 0).toFixed(2);\n                }\n            };\n\n            $scope.calcBenefitsPerCycle = function(){\n                if (+entityPay.is_paid) {\n                    var i = 0, len = entityPay.annual_benefits.length, annualBenefits = 0;\n                    for (i; i < len; i++) {\n\n                        if (+entityPay.annual_benefits[i].type == 2) {\n                            entityPay.annual_benefits[i].amount_abs = (entityPay.annual_benefits[i].amount_pct/100 * entityPay.pay_annualized_est).toFixed(2);\n                        }\n\n                        annualBenefits += +entityPay.annual_benefits[i].amount_abs;\n                    }\n                    $scope.benefits_per_cycle = (annualBenefits / getCycles()).toFixed(2);\n                }\n            };\n\n            $scope.calcBenefitsPerCycleNet = function(){\n                if (+entityPay.is_paid) {\n                    $scope.benefits_per_cycle_net = $scope.benefits_per_cycle - $scope.deductions_per_cycle;\n                }\n            };\n\n            $scope.calcDeductionsPerCycle = function(){\n                if (+entityPay.is_paid) {\n                    var i = 0, len = entityPay.annual_deductions.length, annualDeductions = 0;\n                    for (i; i < len; i++) {\n\n                        if (+entityPay.annual_deductions[i].type == 2) {\n                            entityPay.annual_deductions[i].amount_abs = (entityPay.annual_deductions[i].amount_pct/100 * entityPay.pay_annualized_est).toFixed(2);\n                        }\n\n                        annualDeductions += +entityPay.annual_deductions[i].amount_abs;\n                    }\n                    $scope.deductions_per_cycle = (annualDeductions / getCycles()).toFixed(2);\n                }\n            };\n\n            $scope.calcPayPerCycleGross = function(){\n                if (+entityPay.is_paid) {\n\n                    entityPay.pay_per_cycle_gross = (entityPay.pay_annualized_est / getCycles()).toFixed(2);\n                }\n            }\n\n            $scope.calcPayPerCycleNet = function(){\n                if (+entityPay.is_paid) {\n                    entityPay.pay_per_cycle_net = (+entityPay.pay_per_cycle_gross + +$scope.benefits_per_cycle_net).toFixed(2);\n                }\n            }\n\n            $scope.resetData = function(){\n                entityPay.pay_scale = '';\n                entityPay.pay_amount = '';\n                entityPay.pay_unit = '';\n                entityPay.pay_currency = '';\n                entityPay.pay_annualized_est = '';\n                entityPay.pay_is_auto_est = '';\n                entityPay.annual_benefits = [];\n                entityPay.annual_deductions = [];\n                entityPay.pay_cycle = '';\n                entityPay.pay_per_cycle_gross = '';\n                entityPay.pay_per_cycle_net = '';\n                $scope.benefits_per_cycle = '';\n                $scope.deductions_per_cycle = '';\n            };\n\n            $scope.setDefaults = function(){\n                entityPay.pay_cycle = defaults.pay_cycle;\n                entityPay.pay_currency = defaults.pay_currency;\n                entityPay.pay_is_auto_est = '0';\n                entityPay.pay_amount = (0).toFixed(2);\n            };\n\n            $scope.remove = function(array, index){\n                array.splice(index, 1);\n            };\n\n            $scope.$watch('entity.pay.pay_amount', $scope.calcAnnualPayEst);\n            $scope.$watch('entity.pay.pay_unit', $scope.calcAnnualPayEst);\n            $scope.$watch('entity.pay.pay_annualized_est', function(){\n                $scope.calcPayPerCycleGross();\n                $scope.calcBenefitsPerCycle();\n                $scope.calcDeductionsPerCycle();\n            });\n            $scope.$watch('entity.pay.annual_benefits', $scope.calcBenefitsPerCycle,true);\n            $scope.$watch('entity.pay.annual_deductions', $scope.calcDeductionsPerCycle,true);\n            $scope.$watch('benefits_per_cycle',$scope.calcBenefitsPerCycleNet);\n            $scope.$watch('deductions_per_cycle',$scope.calcBenefitsPerCycleNet);\n            $scope.$watch('benefits_per_cycle_net',$scope.calcPayPerCycleNet);\n            $scope.$watch('entity.pay.pay_per_cycle_gross',$scope.calcPayPerCycleNet);\n\n        }]);\n});\n\n//# sourceURL=/job-contract/controllers/form/form-pay.js"),eval("define('job-contract/controllers/form/form-pension',[\n  'job-contract/controllers/controllers',\n  'job-contract/services/contact'\n], function (controllers) {\n  'use strict';\n\n  controllers.controller('FormPensionCtrl',['$scope','settings','ContactService', '$log',\n    function ($scope, settings, ContactService, $log) {\n      $log.debug('Controller: FormPensionCtrl');\n\n      $scope.contacts = {\n        Pension_Provider: []\n      };\n\n      (function init() {\n        if ($scope.entity.pension.pension_type) {\n          ContactService.getOne($scope.entity.pension.pension_type).then(function (provider) {\n            $scope.contacts.Pension_Provider.push(provider);\n          });\n        }\n      }());\n\n      $scope.refreshContacts = function(input, contactSubType){\n        if (!input) {\n          return;\n        }\n\n        ContactService.search(input, {\n          contact_type: 'Organization',\n          contact_sub_type: contactSubType\n        }).then(function (contactSubTypes) {\n          $scope.contacts[contactSubType] = contactSubTypes;\n        });\n      };\n    }]);\n});\n\n//# sourceURL=/job-contract/controllers/form/form-pension.js"),eval("define('job-contract/controllers/form/form-leave',[\n  'common/lodash',\n  'job-contract/controllers/controllers'\n], function (_, controllers) {\n  'use strict';\n\n  controllers.controller('FormLeaveCtrl', [\n    '$scope', '$log', 'UtilsService',\n    function ($scope, $log, UtilsService) {\n      $log.debug('Controller: FormLeaveCtrl');\n\n      var vm = {};\n\n      vm.numberOfPublicHolidays = 0;\n\n      init();\n\n      /**\n       * Initializes the controller by setting properties and adding watchers\n       */\n      function init() {\n        loadNumberOfPublicHolidays();\n        addListeners();\n      }\n\n      /**\n       * Loads the number of Public Holidays in Current Period\n       */\n      function loadNumberOfPublicHolidays() {\n        UtilsService.getNumberOfPublicHolidaysInCurrentPeriod()\n          .then(function (number) {\n            vm.numberOfPublicHolidays = number;\n          });\n      }\n\n      /**\n       * Attach listeners to $scope\n       */\n      function addListeners() {\n        $scope.$watch('entity.leave', toggleAddPublicHolidayRadios, true);\n      }\n\n      /**\n       * This is a listener for when any of the leave types in the form changes.\n       *\n       * Only one leave type can have \"add_public_holidays\" selected. This function\n       * checks if we have a type where its value changed from false to true and, if so,\n       * set \"add_public_holidays\" to false for every other type.\n       *\n       * @param {Object} newValue - An object containing the new leave type values\n       * @param {Object} oldValue - An object containing the old leave type values\n       */\n      function toggleAddPublicHolidayRadios (newValue, oldValue) {\n        var newLeaveWithPublicHolidays = _.find(newValue, function (value, i) {\n          return value.add_public_holidays && !oldValue[i].add_public_holidays;\n        });\n\n        if (newLeaveWithPublicHolidays) {\n          newValue.forEach(function (value) {\n            if (value.leave_type != newLeaveWithPublicHolidays.leave_type) {\n              value.add_public_holidays = false;\n            }\n          });\n        }\n      }\n\n      return vm;\n    }]);\n});\n\n//# sourceURL=/job-contract/controllers/form/form-leave.js"),eval("define('job-contract/directives/directives',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('hrjc.directives', []);\n});\n\n//# sourceURL=/job-contract/directives/directives.js"),eval("define('job-contract/directives/contact',[\n    'job-contract/directives/directives'\n], function (directives) {\n    'use strict';\n\n    directives.directive('hrjcContact',['$compile', 'ContactService', 'settings',\n        '$log', function ($compile, ContactService, settings, $log) {\n        $log.debug('Directive: hrjcContact');\n\n        return {\n            restrict: 'A',\n            scope: {\n                renderAsLink: '=?hrjcContactLink',\n                contactId: '=?hrjcContact'\n            },\n            template: '{{contact.label}}',\n            link: function ($scope, el) {\n                if (!$scope.contactId) {\n                    return;\n                }\n\n                $scope.$watch('contactId',function(contactId){\n                    ContactService.getOne($scope.contactId).then(function(contact){\n                        $scope.contact = contact;\n\n                        if ($scope.renderAsLink) {\n                            el.html('<a ng-href=\"/civicrm/contact/view?reset=1&cid={{contactId}}\">{{contact.label}}</a>');\n                            $compile(el.contents())($scope);\n                        }\n                    });\n                });\n            }\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/directives/contact.js"),eval("define('job-contract/directives/loader',[\n    'job-contract/directives/directives'\n], function (directives) {\n    'use strict';\n\n    directives.directive('hrjcLoader',['$rootScope','$log', function ($rootScope, $log) {\n        $log.debug('Directive: hrjcLoader');\n\n        return {\n            link: function ($scope, el, attrs) {\n                var loader = document.createElement('div'),\n                    loaderSet = false,\n                    positionSet = false;\n\n                loader.className = 'hrjc-loader';\n\n                function isPositioned(){\n                    var elPosition = window.getComputedStyle(el[0]).position;\n                    return elPosition == 'relative' || elPosition == 'absolute' || elPosition == 'fixed'\n                }\n\n                function appendLoader() {\n                    if (!isPositioned()) {\n                        el.css('position','relative');\n                        positionSet = true;\n                    }\n\n                    el.append(loader);\n                    loaderSet = true;\n                }\n\n                function removeLoader(){\n                    loaderSet && loader.parentNode.removeChild(loader);\n                    loaderSet = false;\n\n                    if (positionSet) {\n                        el.css('position','');\n                    }\n                }\n\n                if (attrs.hrjcLoaderShow) {\n                    appendLoader();\n                }\n\n                $scope.$on('hrjc-loader-show',function(){\n                    appendLoader();\n                });\n\n                $scope.$on('hrjc-loader-hide',function(){\n                    removeLoader();\n                });\n\n            }\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/directives/loader.js"),
eval("/* eslint-env amd */\n\ndefine('job-contract/directives/number',[\n  'job-contract/directives/directives'\n], function (directives) {\n  'use strict';\n\n  directives.directive('hrjcNumber', ['$log', function ($log) {\n    $log.debug('Directive: hrjcNumber');\n\n    return {\n      require: 'ngModel',\n      link: function ($scope, el, attrs, modelCtrl) {\n        var toFixedVal = 2;\n        var notToFixed = attrs.hrjcNumberFloat || false;\n        // in Leave in Hours we break hours to 15 minutes intervals (0.25 of an hour)\n        var toHoursRound = 0.25;\n        var toHours = attrs.hrjcToHours || false;\n        var notNegative = attrs.hrjcNotNegative || false;\n\n        if (attrs.hrjcNumber && typeof +attrs.hrjcNumber === 'number') {\n          toFixedVal = attrs.hrjcNumber;\n        }\n\n        el.bind('blur', function () {\n          var viewVal = parseFloat(modelCtrl.$viewValue) || 0;\n\n          if (notNegative && viewVal < 0) {\n            viewVal = 0;\n          }\n\n          if (toHours) {\n            viewVal = Math.ceil(viewVal / toHoursRound) * toHoursRound;\n          }\n\n          modelCtrl.$setViewValue(!notToFixed ? viewVal.toFixed(toFixedVal) : Math.round(viewVal * 100) / 100);\n          modelCtrl.$render();\n        });\n      }\n    };\n  }]);\n});\n\n//# sourceURL=/job-contract/directives/number.js"),eval("define('job-contract/directives/validate',[\n    'job-contract/directives/directives'\n], function (directives) {\n    'use strict';\n\n    directives.directive('hrjcValidate',['$log', function ($log) {\n        $log.debug('Directive: hrjcValidate');\n\n        return {\n            restrict: 'A',\n            require:  '^form',\n            scope: {\n                isWarning: '=?hrjcValidateWarning'\n            },\n            link: function ($scope, el, attrs, formCtrl) {\n                var inputEl   = el[0].querySelector(\"[name]\"),\n                    inputNgEl = angular.element(inputEl),\n                    inputName = inputNgEl.attr('name'),\n                    iconEl = document.createElement('span'),\n                    iconNgEl = angular.element(iconEl);\n\n                if (!inputName) {\n                    return;\n                }\n\n                el.addClass('has-feedback');\n                iconNgEl.addClass('glyphicon form-control-feedback');\n                inputNgEl.after(iconNgEl);\n\n                function toggleSuccess(invalid, isWarning) {\n                    el.toggleClass('has-success', !invalid && !isWarning);\n                    iconNgEl.toggleClass('glyphicon-ok', !invalid && !isWarning);\n                }\n\n                function toggleWarning(invalid, isWarning) {\n                    el.toggleClass('has-warning', !invalid && isWarning);\n                    iconNgEl.toggleClass('glyphicon-warning-sign', !invalid && isWarning);\n                }\n\n                function toggleError(invalid) {\n                    el.toggleClass('has-error', invalid);\n                    iconNgEl.toggleClass('glyphicon-remove', invalid);\n                }\n\n                $scope.$watch(function() {\n                    return formCtrl[inputName] && formCtrl[inputName].$invalid;\n                }, function(invalid) {\n                    if (formCtrl[inputName].$dirty) {\n                        toggleSuccess(invalid, $scope.isWarning);\n                        toggleError(invalid);\n                    }\n                });\n\n                if (typeof $scope.isWarning !== 'undefined') {\n                    $scope.$watch('isWarning', function(isWarning) {\n                        var invalid = formCtrl[inputName].$invalid;\n                        if (formCtrl[inputName].$dirty) {\n                            toggleSuccess(invalid, isWarning);\n                            toggleWarning(invalid, isWarning);\n                        }\n                    });\n                }\n\n                inputNgEl.bind('blur', function() {\n                    toggleError(formCtrl[inputName].$invalid)\n                });\n            }\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/directives/validate.js"),eval("define('job-contract/filters/capitalize',[\n    'job-contract/filters/filters'\n], function (filters) {\n    'use strict';\n\n    filters.filter('capitalize',['$log', function ($log) {\n        $log.debug('Filter: capitalize');\n\n        return function(input) {\n            return (!!input) ? input.replace(/([^\\W_]+[^\\s-]*) */g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();}) : '';\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/filters/capitalize.js"),eval("define('job-contract/filters/format-amount',[\n    'job-contract/filters/filters'\n], function (filters) {\n    'use strict';\n\n    filters.filter('formatAmount',['$log', function ($log) {\n        $log.debug('Filter: formatAmount');\n\n        return function(input) {\n            return input && input.indexOf('.') === -1 ? input+'.00' : input\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/filters/format-amount.js"),eval("define('job-contract/filters/format-period',[\n    'job-contract/filters/filters'\n], function (filters) {\n    'use strict';\n\n    filters.filter('formatPeriod',['$filter','$log', function ($filter, $log) {\n        $log.debug('Filter: formatPeriod');\n\n        return function(period) {\n            return period ? $filter('date')(period, 'yyyy/MM/dd') : 'Unspecified';\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/filters/format-period.js"),eval("define('job-contract/filters/parse-int',[\n    'job-contract/filters/filters'\n], function (filters) {\n    'use strict';\n\n    filters.filter('parseInt',['$log', function ($log) {\n        $log.debug('Filter: parseInt');\n\n        return function(input) {\n            return input ? parseInt(input) : null;\n        }\n    }]);\n});\n\n//# sourceURL=/job-contract/filters/parse-int.js"),eval("define('job-contract/services/contract-revision-list',[\n  'common/lodash',\n  'job-contract/services/services'\n], function(_, services) {\n  'use strict';\n\n  services.factory('ContractRevisionList', [\n    '$filter', '$q', '$log', 'ContractService', 'ContractFilesService', 'ContractRevisionService',\n    function($filter, $q, $log, ContractService, ContractFilesService, ContractRevisionService) {\n      $log.debug('Service: ContractRevisionList');\n\n      /**\n       * Takes in a bulk of data, the result of a joined api call, and\n       * returns an object containing such data divided in different properties\n       *\n       * @param  {Object} aggregated\n       * @return {Object}\n       */\n      function expandAggregatedRevisionDetails(aggregated) {\n        return {\n          details: {\n            position: aggregated['details_revision_id.position'],\n            location: aggregated['details_revision_id.location'],\n          },\n          hour: {\n            hours_type: aggregated['hour_revision_id.hours_type']\n          },\n          pay: {\n            pay_annualized_est: aggregated['pay_revision_id.pay_annualized_est'],\n            pay_currency: aggregated['pay_revision_id.pay_currency'],\n            pay_scale: aggregated['pay_revision_id.pay_scale']\n          }\n        };\n      }\n\n      /**\n       * Fetches the details of the given revision, like files, pay, etc\n       *\n       * The bulk of the data is fetched via a joined api call, whose aggregated\n       * result is then expanded before being returned\n       *\n       * @param  {Object} revision\n       * @return {Promise} resolves to an object containing the details\n       */\n       function fetchRevisionDetails(revision) {\n         revision.effective_date = revision.effective_date || '';\n\n         return $q.all({\n           files: {\n             details: ContractFilesService.get(revision.details_revision_id, 'civicrm_hrjobcontract_details')\n           },\n           aggregated: ContractRevisionService.get({\n             action: 'getsingle',\n             json: {\n               sequential: 1,\n               id: revision.id,\n               return: [\n                 'details_revision_id.position',\n                 'details_revision_id.location',\n                 'hour_revision_id.hours_type',\n                 'pay_revision_id.pay_scale',\n                 'pay_revision_id.pay_annualized_est',\n                 'pay_revision_id.pay_currency'\n               ]\n             }\n           })\n           .$promise.then(function(aggregated) {\n             return aggregated;\n           })\n         })\n         .then(function(results) {\n           return _.assign({\n             revisionEntityIdObj: revision,\n             files: results.files\n           }, expandAggregatedRevisionDetails(results.aggregated));\n         });\n       }\n\n      /**\n       * Fetches available revision list for acontract\n       *\n       * @param  {integer | string} contractId\n       * @return {object}\n       */\n      function fetchRevisions(contractId) {\n        var RevisionList = [];\n        var RevisionDataList = [];\n        var deferred = $q.defer();\n\n        ContractService.getRevision(contractId)\n          .then(function(revisionList) {\n            RevisionList = $filter('orderBy')(revisionList, ['-effective_date', '-id']);\n\n            return $q.all(RevisionList.map(fetchRevisionDetails));\n          })\n          .then(function(results) {\n            RevisionDataList = results;\n            deferred.resolve({\n              revisionList: RevisionList,\n              revisionDataList: results\n            });\n          });\n\n        return deferred.promise;\n      }\n\n      return {\n        fetchRevisions: fetchRevisions\n      }\n  }]);\n});\n\n//# sourceURL=/job-contract/services/contract-revision-list.js"),eval("// Copyright CiviCRM LLC 2013. See http://civicrm.org/licensing\n(function ($, _) {\n\n    var gid = CRM.grID;\n    var joinDate = $('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(2) .crm-custom-data').html();\n    var finalDate =$('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(3) .crm-custom-data').html();\n\n    function extendMoment(){\n        var STRINGS = {\n            nodiff: '',\n            year: 'year',\n            years: 'years',\n            month: 'month',\n            months: 'months',\n            day: 'day',\n            days: 'days',\n            hour: 'hour',\n            hours: 'hours',\n            minute: 'minute',\n            minutes: 'minutes',\n            second: 'second',\n            seconds: 'seconds',\n            delimiter: ' '\n        };\n        moment.fn.preciseDiff = function(d2) {\n            return moment.preciseDiff(this, d2);\n        };\n        moment.preciseDiff = function(d1, d2) {\n            var m1 = moment(d1), m2 = moment(d2);\n            if (m1.isSame(m2)) {\n                return STRINGS.nodiff;\n            }\n            if (m1.isAfter(m2)) {\n                var tmp = m1;\n                m1 = m2;\n                m2 = tmp;\n            }\n\n            var yDiff = m2.year() - m1.year();\n            var mDiff = m2.month() - m1.month();\n            var dDiff = m2.date() - m1.date();\n//code commented to show only year,month and days on job summary\n            /*\n             var hourDiff = m2.hour() - m1.hour();\n             var minDiff = m2.minute() - m1.minute();\n             var secDiff = m2.second() - m1.second();\n\n             if (secDiff < 0) {\n             secDiff = 60 + secDiff;\n             minDiff--;\n             }\n             if (minDiff < 0) {\n             minDiff = 60 + minDiff;\n             hourDiff--;\n             }\n             if (hourDiff < 0) {\n             hourDiff = 24 + hourDiff;\n             dDiff--;\n             }\n             */\n            if (dDiff < 0) {\n                var daysInLastFullMonth = moment(m2.year() + '-' + (m2.month() + 1), \"YYYY-MM\").subtract('months', 1).daysInMonth();\n                if (daysInLastFullMonth < m1.date()) { // 31/01 -> 2/03\n                    dDiff = daysInLastFullMonth + dDiff + (m1.date() - daysInLastFullMonth);\n                } else {\n                    dDiff = daysInLastFullMonth + dDiff;\n                }\n                mDiff--;\n            }\n            if (mDiff < 0) {\n                mDiff = 12 + mDiff;\n                yDiff--;\n            }\n\n            function pluralize(num, word) {\n                return num + ' ' + STRINGS[word + (num === 1 ? '' : 's')];\n            }\n            var result = [];\n\n            if (yDiff) {\n                result.push(pluralize(yDiff, 'year'));\n            }\n            if (mDiff) {\n                if (yDiff) {\n                    result.push(','); //HR-350\n                }\n                result.push(pluralize(mDiff, 'month'));\n            }\n            if (dDiff) {\n                if (mDiff) {\n                    result.push('and'); //HR-350\n                }\n                result.push(pluralize(dDiff, 'day'));\n            }\n//code commented to show only year,month and days on job summary\n            /*\n             if (hourDiff) {\n             result.push(pluralize(hourDiff, 'hour'));\n             }\n             if (minDiff) {\n             result.push(pluralize(minDiff, 'minute'));\n             }\n             if (secDiff) {\n             result.push(pluralize(secDiff, 'second'));\n             }\n             */\n            return result.join(STRINGS.delimiter);\n        };\n    };\n\n    function lengthEmployment(joinDate,finalDate,gid) {\n\n        if (!moment.preciseDiff){\n            extendMoment();\n        }\n\n        var join_date = moment(joinDate,\"MMMM DD, YYYY\");\n        var duration = '';\n        if(finalDate) {\n            var final_date = moment(finalDate,\"MMMM DD, YYYY\");\n        }\n        var now = moment();\n        if (finalDate) {\n            var diff =  final_date.diff(now, 'days');\n        }\n        else {\n            var diff =  now.diff(join_date, 'days');\n        }\n        if (diff < 0 ) {\n            duration = moment.preciseDiff(join_date,final_date);\n        }\n        else {\n            duration = moment().preciseDiff(join_date);\n        }\n        var diffDate =  now.diff(join_date, 'days');\n        if (diffDate <= 0 ) {\n            duration = '0 days';\n        }\n\n        $('#initial_join_date').remove();\n        var length = \"<div class='crm-summary-row' id='initial_join_date'><div class='crm-label'>Length Of Employment</div><div class='crm-content crm-custom-data lengthEmployment'></div></div>\";\n        $('#custom-set-content-'+gid+' .crm-inline-block-content').append(length);\n        $('.lengthEmployment').html(duration);\n        if (finalDate && (diff < 0)) {\n            $('.lengthEmployment').css({'color':'#FF0000'});\n        }\n    }\n\n    if (joinDate) {\n      lengthEmployment(joinDate,finalDate,gid);\n    }\n\n    $(document).on(\"click\", \"#_qf_CustomData_upload\", function() {\n      $(document).ajaxSuccess(function(data, textStatus, jqXHR) {\n        if(jqXHR.extraData) {\n          if (jqXHR.extraData.class_name == 'CRM_Contact_Form_Inline_CustomData' && jqXHR.extraData.groupID == gid) {\n            setTimeout(function(){\n\t      var joinDate = $('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(2) .crm-custom-data').html();\n\t      var finalDate =$('#custom-set-content-'+gid+' .crm-inline-block-content div:nth-child(3) .crm-custom-data').html();\n\t      if (joinDate) {\n                lengthEmployment(joinDate,finalDate,gid);\n\t      }\n            },300 );\n          }\n        }\n      });\n    });\n\n}(CRM.$, CRM._));\n\n//# sourceURL=/job-contract/vendor/jobsummary.js"),eval("/* eslint-env amd */\n\ndefine('job-contract/app',[\n  'common/angular',\n  'common/ui-select',\n  'common/services/dom-event-trigger',\n  'common/services/angular-date/date-format',\n  'common/modules/routers/compu-ng-route',\n  'common/modules/directives',\n  'common/directives/angular-date/date-input',\n  'common/filters/time-unit-applier.filter',\n  'leave-absences/shared/models/absence-type.model',\n  'job-contract/controllers/controllers',\n  'job-contract/controllers/contract-list',\n  'job-contract/controllers/contract',\n  'job-contract/controllers/revision-list',\n  'job-contract/controllers/modal/modal-change-reason',\n  'job-contract/controllers/modal/modal-contract',\n  'job-contract/controllers/modal/modal-contract-new',\n  'job-contract/controllers/modal/modal-dialog',\n  'job-contract/controllers/modal/modal-progress',\n  'job-contract/controllers/modal/modal-revision',\n  'job-contract/controllers/form/form-general',\n  'job-contract/controllers/form/form-hour',\n  'job-contract/controllers/form/form-health',\n  'job-contract/controllers/form/form-pay',\n  'job-contract/controllers/form/form-pension',\n  'job-contract/controllers/form/form-leave',\n  'job-contract/directives/directives',\n  'job-contract/directives/contact',\n  'job-contract/directives/directives',\n  'job-contract/directives/loader',\n  'job-contract/directives/number',\n  'job-contract/directives/validate',\n  'job-contract/filters/filters',\n  'job-contract/filters/capitalize',\n  'job-contract/filters/get-obj-by-id',\n  'job-contract/filters/format-amount',\n  'job-contract/filters/format-period',\n  'job-contract/filters/parse-int',\n  'job-contract/services/services',\n  'job-contract/services/contract',\n  'job-contract/services/contract-revision-list',\n  'job-contract/vendor/job-summary'\n], function (angular) {\n  'use strict';\n\n  angular.module('hrjc', [\n    'ngAnimate',\n    'compuNgRoute',\n    'ngResource',\n    'angularFileUpload',\n    'ui.bootstrap',\n    'ui.select',\n    'common.angularDate',\n    'common.services',\n    'common.directives',\n    'common.filters',\n    'leave-absences.models',\n    'hrjc.controllers',\n    'hrjc.directives',\n    'hrjc.filters',\n    'hrjc.services'\n  ])\n    .constant('settings', {\n      classNamePrefix: 'hrjc-',\n      contactId: CRM.jobContractTabApp.contactId,\n      debug: +CRM.debug,\n      pathApp: CRM.jobContractTabApp.path,\n      pathFile: CRM.url('civicrm/hrjobcontract/file/'),\n      pathReport: CRM.url('civicrm/report/hrjobcontract/summary'),\n      pathRest: CRM.url('civicrm/ajax/rest'),\n      pathTpl: CRM.jobContractTabApp.path + 'views/',\n      CRM: {\n        options: CRM.FieldOptions || {},\n        defaultCurrency: CRM.jobContractTabApp.defaultCurrency,\n        apiTsFmt: 'YYYY-MM-DD HH:mm:ss',\n        fields: CRM.jobContractTabApp.fields,\n        maxFileSize: CRM.jobContractTabApp.maxFileSize\n      }\n    })\n    .config(['settings', '$routeProvider', '$resourceProvider', '$logProvider', '$httpProvider', 'uibDatepickerConfig', 'uiSelectConfig',\n      function (settings, $routeProvider, $resourceProvider, $logProvider, $httpProvider, datepickerConfig, uiSelectConfig) {\n        $logProvider.debugEnabled(settings.debug);\n\n        $routeProvider\n          .resolveForAll({\n            format: ['DateFormat', function (DateFormat) {\n              return DateFormat.getDateFormat();\n            }]\n          })\n          .when('/', {\n            controller: 'ContractListCtrl',\n            templateUrl: settings.pathApp + 'views/contractList.html',\n            resolve: {\n              contractList: ['ContractService', function (ContractService) {\n                return ContractService.get();\n              }]\n            }\n          }\n          )\n          .otherwise({ redirectTo: '/' });\n\n        $resourceProvider.defaults.stripTrailingSlashes = false;\n        $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n        uiSelectConfig.theme = 'bootstrap';\n        datepickerConfig.showWeeks = false;\n      }\n    ])\n    .run(['settings', '$rootScope', '$q', '$log', 'ContractService', 'ContractDetailsService', 'ContractHourService',\n      'ContractPayService', 'ContractLeaveService', 'ContractHealthService', 'ContractPensionService',\n      function (settings, $rootScope, $q, $log, ContractService, ContractDetailsService, ContractHourService, ContractPayService,\n        ContractLeaveService, ContractHealthService, ContractPensionService) {\n        $log.debug('app.run');\n\n        $rootScope.pathTpl = settings.pathTpl;\n        $rootScope.prefix = settings.classNamePrefix;\n\n        $q.all({\n          contract: ContractService.getRevisionOptions(),\n          details: ContractDetailsService.getOptions(),\n          hour: ContractHourService.getOptions(),\n          pay: ContractPayService.getOptions(),\n          leave: ContractLeaveService.getOptions(),\n          health: ContractHealthService.getOptions(),\n          pension: ContractPensionService.getOptions()\n        }).then(function (results) {\n          results.pay.pay_is_auto_est = ['No', 'Yes'];\n          results.pension.is_enrolled = ['No', 'Yes', 'Opted out'];\n\n          $log.debug('OPTIONS:');\n          $log.debug(results);\n          $rootScope.options = results;\n        });\n      }\n    ]);\n});\n\n//# sourceURL=/job-contract/app.js"),eval("(function (CRM, require) {\n  var extPath = CRM.jobContractTabApp.path + 'js/src/job-contract';\n\n  require.config({\n    urlArgs: 'bust=' + (new Date()).getTime(),\n    paths: {\n      'job-contract': extPath,\n      'job-contract/vendor/fraction': extPath + '/vendor/fraction',\n      'job-contract/vendor/job-summary': extPath + '/vendor/jobsummary'\n    },\n    shim: {\n      'job-contract/vendor/job-summary': {\n        deps: ['common/moment']\n      }\n    }\n  });\n\n  require([\n    'job-contract/app'\n  ], function () {\n    'use strict';\n\n    document.dispatchEvent(typeof window.CustomEvent == \"function\" ? new CustomEvent('hrjcReady') : (function(){\n      var e = document.createEvent('Event');\n      e.initEvent('hrjcReady', true, true);\n      return e;\n    })());\n  });\n})(CRM, require);\n\n//# sourceURL=/job-contract.js");
//# sourceMappingURL=job-contract.min.js.map
=======
/*
fraction.js
A Javascript fraction library.

Copyright (c) 2009  Erik Garrison <erik@hypervolu.me>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// Copyright CiviCRM LLC 2013. See http://civicrm.org/licensing

define("job-contract/controllers/controllers",["common/angular"],function(e){"use strict";return e.module("hrjc.controllers",[])}),define("job-contract/filters/filters",["common/angular"],function(e){"use strict";return e.module("hrjc.filters",[])}),define("job-contract/filters/get-obj-by-id",["job-contract/filters/filters"],function(e){"use strict";e.filter("getObjById",["$log",function(e){return e.debug("Filter: getObjById"),function(e,t,n){if(!e)return null;for(var o=0,r=e.length;o<r;o++)if(+e[o].id==+t)return n?e[o][n]:e[o];return null}}])}),define("job-contract/services/services",["common/angular"],function(e){"use strict";return e.module("hrjc.services",[])}),define("job-contract/services/utils",["job-contract/services/services"],function(e){"use strict";e.factory("API",["$resource","$q","settings","$log",function(e,t,n,o){return o.debug("Service: UtilsService"),{resource:function(t,o,r){return!t||"string"!=typeof t||!o||"string"!=typeof o||r&&"object"!=typeof r?null:e(n.pathRest,{action:o,entity:t,json:r})},getOne:function(e,n){if(!e||"string"!=typeof e||n&&"object"!=typeof n)return null;var o,r=t.defer(),i=angular.extend({sequential:1},n);return this.resource(e,"get",i).get(function(e){o=e.values,r.resolve(1==o.length?o[0]:null)},function(){r.reject("Unable to fetch data")}),r.promise},get:function(e,n){if(!e||"string"!=typeof e||n&&"object"!=typeof n)return null;var o=t.defer(),r=angular.extend({sequential:1},n);return this.resource(e,"get",r).get(function(e){o.resolve(e.values)},function(){o.reject("Unable to fetch data")}),o.promise}}}]),e.factory("testAPI",["$resource","settings",function(e,t){return{resource:function(n,o,r){return!n||"string"!=typeof n||!o||"string"!=typeof o||r&&"object"!=typeof r?null:e(t.pathApp+"js/data/"+n+".json",{action:o,entity:n,json:r})}}}]),e.factory("UtilsService",["API","testAPI","settings","$q","$log","$timeout",function(e,t,n,o,r,i){return{getAbsenceTypes:function(){var t=o.defer();return e.resource("AbsenceType","get",{return:"id,title,default_entitlement,add_public_holiday_to_entitlement"}).get(function(e){angular.forEach(e.values,function(e){e.add_public_holiday_to_entitlement=!!parseInt(e.add_public_holiday_to_entitlement),e.default_entitlement=parseFloat(e.default_entitlement)}),t.resolve(e.values)},function(){t.reject("Unable to fetch absence types")}),t.promise},getHoursLocation:function(){var t=o.defer();return e.resource("HRHoursLocation","get",{sequential:1,is_active:1}).get(function(e){t.resolve(e.values)},function(){t.reject("Unable to fetch standard hours")}),t.promise},getPayScaleGrade:function(){var t=o.defer();return e.resource("HRPayScale","get",{sequential:1,is_active:1}).get(function(e){t.resolve(e.values)},function(){t.reject("Unable to fetch standard hours")}),t.promise},getNumberOfPublicHolidaysInCurrentPeriod:function(){var t=o.defer();return e.resource("PublicHoliday","getcountforcurrentperiod",{sequential:1}).get(function(e){var n=parseInt(e.result)||0;t.resolve(n)},function(){t.reject("Unable to fetch the number of public holidays in current period")}),t.promise},prepareEntityIds:function(e,t,n){function o(e){e.jobcontract_id=t,delete e.id,n?e.jobcontract_revision_id=n:delete e.jobcontract_revision_id}if(angular.isArray(e)){var r=0,i=e.length;for(r;r<i;r++)o(e[r])}else if(angular.isObject(e))return void o(e)},errorHandler:function(e,t,n){var o;return e.is_error?(o=e.error_message.split("_").join(" "),o=o.charAt(0).toUpperCase()+o.slice(1),r.error("Unable to save. \n"+o),n&&n.reject("Unable to save. \n"+o),e.trace&&r.error(e.trace),!0):e.values?void 0:(r.error(t||"Unknown Error"),n&&n.reject(t||"Unknown Error"),!0)},getManageEntitlementsPageURL:function(e){var t="civicrm/admin/leaveandabsences/periods/manage_entitlements",n="civicrm/contact/view",o=CRM.url(n,{cid:e,selectedChild:"hrjobcontract"});return CRM.url(t,{cid:e,returnUrl:o})}}}])}),define("job-contract/services/contract-details",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContractDetailsService",["$filter","$resource","settings","$q","UtilsService","$log",function(e,t,n,o,r,i){function a(t){var n=e("formatDate")(t,"YYYY-MM-DD");return"Unspecified"!==n?n:t}i.debug("Service: ContractDetailsService");var c=t(n.pathRest,{action:"get",entity:"HRJobDetails",json:{}});return{validateDates:function(e){if(!e||"object"!=typeof e||!e.contact_id||!e.period_start_date)return null;e.period_start_date=a(e.period_start_date),e.period_end_date=a(e.period_end_date),e.sequential=0,e.debug=n.debug;var t,i=o.defer();return c.save({action:"validatedates",json:e},null,function(e){r.errorHandler(e,'Unable to fetch API "validatedates" response',i)||(t=e.values,i.resolve(t))}),i.promise},getOne:function(e){if(!e||"object"!=typeof e||!e.jobcontract_id&&!e.jobcontract_revision_id||e.jobcontract_id&&"number"!=typeof+e.jobcontract_id||e.jobcontract_revision_id&&"number"!=typeof+e.jobcontract_revision_id)return null;e.sequential=1,e.debug=n.debug;var t,i=o.defer();return c.get({json:e},function(e){r.errorHandler(e,"Unable to fetch contract details",i)||(t=e.values,i.resolve(1==t.length?t[0]:null))},function(){i.reject("Unable to fetch contract details")}),i.promise},getOptions:function(e,t){var r,i=o.defer();return t||(r=n.CRM.options.HRJobDetails||{},e&&"string"==typeof e&&(r=r[e]),i.resolve(r||{})),i.promise},getFields:function(e){if(e&&"object"!=typeof e)return null;e&&"object"==typeof e||(e={});var t=o.defer(),r=n.CRM.fields;return r&&r.HRJobDetails?t.resolve(r.HRJobDetails):(e.sequential=1,c.get({action:"getfields",json:e},function(e){e.values||t.reject("Unable to fetch contract details fields"),t.resolve(e.values)},function(){t.reject("Unable to fetch contract details fields")})),t.promise},save:function(e){if(!e||"object"!=typeof e)return null;e.period_start_date=a(e.period_start_date),e.period_end_date=a(e.period_end_date);var t,i=o.defer(),s=angular.extend({sequential:1,debug:n.debug},e);return c.save({action:"create",json:s},null,function(e){r.errorHandler(e,"Unable to create contract details",i)||(t=e.values,i.resolve(1==t.length?t[0]:null))},function(){i.reject("Unable to create contract details")}),i.promise},model:function(e){function t(e){var t=0,n=e.length,o={};for(t;t<n;t++)o[e[t].name]="";return"undefined"!=typeof o.id&&(o.id=null),"undefined"!=typeof o.jobcontract_revision_id&&(o.jobcontract_revision_id=null),"undefined"!=typeof o.location&&(o.location=null),o}var n=o.defer();return e?n.resolve(t(e)):this.getFields().then(function(e){n.resolve(t(e))}),n.promise}}}])}),define("job-contract/services/contract-hour",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContractHourService",["$resource","settings","$q","UtilsService","$log",function(e,t,n,o,r){r.debug("Service: ContractHourService");var i=e(t.pathRest,{action:"get",entity:"HRJobHour",json:{}});return{getOne:function(e){if(!e||"object"!=typeof e||!e.jobcontract_revision_id||e.jobcontract_revision_id&&"number"!=typeof+e.jobcontract_revision_id)return null;e.sequential=1,e.debug=t.debug;var r,a=n.defer();return i.get({json:e},function(e){o.errorHandler(e,"Unable to fetch contract hours",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to fetch contract hours")}),a.promise},getOptions:function(e,o){var r,i=n.defer();if(!o){var r=t.CRM.options.HRJobHour||{};e&&"string"==typeof e&&(r=r[e]),i.resolve(r||{})}return i.promise},getFields:function(e){if(e&&"object"!=typeof e)return null;e&&"object"==typeof e||(e={});var o=n.defer(),r=t.CRM.fields;return r&&r.HRJobHour?o.resolve(r.HRJobHour):(e.sequential=1,i.get({action:"getfields",json:e},function(e){e.values||o.reject("Unable to fetch contract hours fields"),o.resolve(e.values)},function(){o.reject("Unable to fetch contract hours fields")})),o.promise},save:function(e){if(!e||"object"!=typeof e)return null;var r,a=n.defer(),c=angular.extend({sequential:1,debug:t.debug},e);return i.save({action:"create",json:c},null,function(e){o.errorHandler(e,"Unable to create contract hours",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to create contract hours")}),a.promise},model:function(e){function t(e){var t=0,n=e.length,o={};for(t;t<n;t++)o[e[t].name]="";return"undefined"!=typeof o.id&&(o.id=null),"undefined"!=typeof o.jobcontract_revision_id&&(o.jobcontract_revision_id=null),o}var o=n.defer();return e?o.resolve(t(e)):this.getFields().then(function(e){o.resolve(t(e))}),o.promise}}}])}),define("job-contract/services/contract-health",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContractHealthService",["$resource","settings","$q","UtilsService","$log",function(e,t,n,o,r){r.debug("Service: ContractHealthService");var i=e(t.pathRest,{action:"get",entity:"HRJobHealth",json:{}});return{getOne:function(e){if(!e||"object"!=typeof e||!e.jobcontract_revision_id||e.jobcontract_revision_id&&"number"!=typeof+e.jobcontract_revision_id)return null;e.sequential=1,e.debug=t.debug;var r,a=n.defer();return i.get({json:e},function(e){o.errorHandler(e,"Unable to fetch contract Health",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to fetch contract Health")}),a.promise},getOptions:function(e,o){var r,a=n.defer(),c={};if(o)c.sequential=1,e&&"string"==typeof e&&(c.field=e),i.get({action:"getoptions",json:c},function(e){e.values||a.reject("Unable to fetch contract insurance options"),a.resolve(e.values)},function(){a.reject("Unable to fetch contract insurance options")});else{var r=t.CRM.options.HRJobHealth||{};e&&"string"==typeof e&&(r=r[e]),a.resolve(r||{})}return a.promise},getFields:function(e){if(e&&"object"!=typeof e)return null;e&&"object"==typeof e||(e={});var o=n.defer(),r=t.CRM.fields;return r&&r.HRJobHealth?o.resolve(r.HRJobHealth):(e.sequential=1,i.get({action:"getfields",json:e},function(e){e.values||o.reject("Unable to fetch contract insurance fields"),o.resolve(e.values)},function(){o.reject("Unable to fetch contract insurance fields")})),o.promise},save:function(e){if(!e||"object"!=typeof e)return null;var r,a=n.defer(),c=angular.extend({sequential:1,debug:t.debug},e);return i.save({action:"create",json:c},null,function(e){o.errorHandler(e,"Unable to create contract insurance",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to create contract insurance")}),a.promise},model:function(e){function t(e){var t=0,n=e.length,o={};for(t;t<n;t++)o[e[t].name]="";return"undefined"!=typeof o.id&&(o.id=null),"undefined"!=typeof o.jobcontract_revision_id&&(o.jobcontract_revision_id=null),o}var o=n.defer();return e?o.resolve(t(e)):this.getFields().then(function(e){o.resolve(t(e))}),o.promise}}}])}),define("job-contract/services/contract-leave",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContractLeaveService",["$resource","$q","settings","UtilsService","$log",function(e,t,n,o,r){function i(e){angular.forEach(e,function(e){e.add_public_holidays=!!parseInt(e.add_public_holidays)})}r.debug("Service: ContractLeaveService");var a=e(n.pathRest,{action:"get",entity:"HRJobLeave",json:{}});return{getOne:function(e){if(!e||"object"!=typeof e||!e.jobcontract_revision_id||e.jobcontract_revision_id&&"number"!=typeof+e.jobcontract_revision_id||e.id&&"number"!=typeof+e.id||e.leaveType&&"number"!=typeof+e.leaveType)return null;e.sequential=1,e.debug=n.debug;var r=t.defer();return a.get({json:e},function(e){o.errorHandler(e,"Unable to fetch contract leave",r)||(i(e.values),r.resolve(e.values))},function(){r.reject("Unable to fetch contract leave")}),r.promise},getOptions:function(e,o){var r,i=t.defer();if(!o){var r=n.CRM.options.HRJobLeave||{};e&&"string"==typeof e&&(r=r[e]),i.resolve(r||{})}return i.promise},getFields:function(e){if(e&&"object"!=typeof e)return null;e&&"object"==typeof e||(e={});var o=t.defer(),r=n.CRM.fields;return r&&r.HRJobLeave?o.resolve(r.HRJobLeave):(e.sequential=1,a.get({action:"getfields",json:e},function(e){e.values||o.reject("Unable to fetch contract leave fields"),o.resolve(e.values)},function(){o.reject("Unable to fetch contract leave fields")})),o.promise},save:function(e){if(!e||"object"!=typeof e)return null;var r=t.defer(),c={sequential:1,values:e,debug:n.debug};return a.save({action:"replace",json:c},null,function(e){o.errorHandler(e,"Unable to create contract leave",r)||(i(e.values),r.resolve(e.values))},function(){r.reject("Unable to create contract details")}),r.promise},model:function(e,n){function o(e,t){var n=0,o=t.length,r=[],i={};for(n;n<o;n++)i[t[n].name]="";return"undefined"!=typeof i.id&&(i.id=null),"undefined"!=typeof i.jobcontract_revision_id&&(i.jobcontract_revision_id=null),"undefined"!=typeof i.location&&(i.location=null),e&&"object"==typeof e&&i&&"object"==typeof i&&"undefined"!=typeof i.leave_type?(i.getEstimatedLeaveAmount=function(e){return this.add_public_holidays&&e?parseFloat(this.leave_amount)+e:this.leave_amount},angular.forEach(e,function(e,t){i.leave_type=t,i.leave_amount=0,r.push(angular.copy(i))}),r):null}var r=t.defer(),i=n&&"object"==typeof n?n:this.getOptions("leave_type");return e?t.when(i).then(function(t){r.resolve(o(t,e))}):this.getFields().then(function(e){t.when(i).then(function(t){r.resolve(o(t,e))})}.bind(this)),r.promise}}}])}),define("job-contract/services/contract-pay",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContractPayService",["$resource","settings","$q","UtilsService","$log",function(e,t,n,o,r){r.debug("Service: ContractPayService");var i=e(t.pathRest,{action:"get",entity:"HRJobPay",json:{}});return{getOne:function(e){if(!e||"object"!=typeof e||!e.jobcontract_revision_id||e.jobcontract_revision_id&&"number"!=typeof+e.jobcontract_revision_id)return null;e.sequential=1,e.debug=t.debug;var r,a=n.defer();return i.get({json:e},function(e){o.errorHandler(e,"Unable to fetch contract pay",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to fetch contract pay")}),a.promise},getOptions:function(e,o){var r,i=n.defer();if(!o){var r=t.CRM.options.HRJobPay||{};e&&"string"==typeof e&&(r=r[optionGroup]),i.resolve(r||{})}return i.promise},getFields:function(e){if(e&&"object"!=typeof e)return null;e&&"object"==typeof e||(e={});var o=n.defer(),r=t.CRM.fields;return r&&r.HRJobPay?o.resolve(r.HRJobPay):(e.sequential=1,i.get({action:"getfields",json:e},function(e){e.values||o.reject("Unable to fetch contract pay fields"),o.resolve(e.values)},function(){o.reject("Unable to fetch contract pay fields")})),o.promise},save:function(e){if(!e||"object"!=typeof e)return null;var r,a=n.defer(),c=angular.extend({sequential:1,debug:t.debug},e);return i.save({action:"create",json:c},null,function(e){o.errorHandler(e,"Unable to create contract pay",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to create contract pay")}),a.promise},model:function(e){function t(e){var t=0,n=e.length,o={};for(t;t<n;t++)o[e[t].name]="";return"undefined"!=typeof o.id&&(o.id=null),"undefined"!=typeof o.jobcontract_revision_id&&(o.jobcontract_revision_id=null),"undefined"!=typeof o.annual_benefits&&(o.annual_benefits=[]),"undefined"!=typeof o.annual_deductions&&(o.annual_deductions=[]),o}var o=n.defer();return e?o.resolve(t(e)):this.getFields().then(function(e){o.resolve(t(e))}),o.promise}}}])}),define("job-contract/services/contract-pension",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContractPensionService",["$resource","settings","$q","UtilsService","$log",function(e,t,n,o,r){r.debug("Service: ContractPensionService");var i=e(t.pathRest,{action:"get",entity:"HRJobPension",json:{}});return{getOne:function(e){if(!e||"object"!=typeof e||!e.jobcontract_revision_id||e.jobcontract_revision_id&&"number"!=typeof+e.jobcontract_revision_id)return null;e.sequential=1,e.debug=t.debug;var r,a=n.defer();return i.get({json:e},function(e){o.errorHandler(e,"Unable to fetch contract pension",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to fetch contract pension")}),a.promise},getOptions:function(e,o){var r,i=n.defer();if(!o){var r=t.CRM.options.HRJobPension||{};e&&"string"==typeof e&&(r=r[optionGroup]),i.resolve(r||{})}return i.promise},getFields:function(e){if(e&&"object"!=typeof e)return null;e&&"object"==typeof e||(e={});var o=n.defer(),r=t.CRM.fields;return r&&r.HRJobPension?o.resolve(r.HRJobPension):(e.sequential=1,i.get({action:"getfields",json:e},function(e){e.values||o.reject("Unable to fetch contract pension fields"),o.resolve(e.values)},function(){o.reject("Unable to fetch contract pension fields")})),o.promise},save:function(e){if(!e||"object"!=typeof e)return null;var r,a=n.defer(),c=angular.extend({sequential:1,debug:t.debug},e);return i.save({action:"create",json:c},null,function(e){o.errorHandler(e,"Unable to create contract pension",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to create contract pension")}),a.promise},model:function(e){function t(e){var t=0,n=e.length,o={};for(t;t<n;t++)o[e[t].name]="";return"undefined"!=typeof o.id&&(o.id=null),"undefined"!=typeof o.jobcontract_revision_id&&(o.jobcontract_revision_id=null),o}var o=n.defer();return e?o.resolve(t(e)):this.getFields().then(function(e){o.resolve(t(e))}),o.promise}}}])}),define("job-contract/controllers/contract-list",["common/angular","common/lodash","job-contract/controllers/controllers","job-contract/filters/get-obj-by-id","job-contract/services/contract-details","job-contract/services/contract-hour","job-contract/services/contract-health","job-contract/services/contract-leave","job-contract/services/contract-pay","job-contract/services/contract-pension","job-contract/services/utils","common/services/pub-sub"],function(e,t,n){"use strict";n.controller("ContractListCtrl",["$scope","$rootElement","$rootScope","$uibModal","$q","$filter","$sce","contractList","ContractService","ContractDetailsService","ContractHourService","ContractPayService","ContractLeaveService","ContractHealthService","ContractPensionService","UtilsService","settings","$log","pubSub","$window",function(t,n,o,r,i,a,c,s,l,u,d,f,p,v,h,m,_,b,y,g){b.debug("Controller: ContractListCtrl");var j,C={details:u,hour:d,pay:f,leave:p,health:v,pension:h},$={hoursLocation:m.getHoursLocation(),payScaleGrade:m.getPayScaleGrade(),absenceTypes:m.getAbsenceTypes()},w={},S={};t.contractListLoaded=!1,t.contractCurrent=[],t.contractPast=[],t.utils={contractListLen:s.length},t.tooltips={changeContractTerms:c.trustAsHtml('<div><p class="text-left"><strong>Change Contract Terms:</strong><br>When an employeees job or role changes, i.e. promotion, secondment or move,you can use this wizard to update the details of the contract and record a newrevision of the contract. A contract history is kept so you can always see theprevious version of the contract.</p><p class="text-left"><strong>Correct an error on the contract record:</strong><br>If you notice an issue or error with the job terms you can correct these withoutcreating a new job history record. These changes are not stored as a new revisionof the contract.</p></div>')};for(j in C)w[j]=C[j].getFields();i.all(w).then(function(e){t.fields=e,b.debug("FIELDS:"),b.debug(e);for(j in C)S[j]=C[j].model(e[j]);return i.all(S)}).then(function(n){t.model=n,b.debug("MODEL:"),b.debug(n),s=a("orderBy")(s,"-is_primary"),e.forEach(s,function(e){+e.is_current?t.contractCurrent.push(e):t.contractPast.push(e)}),t.$watchCollection("contractCurrent",function(){t.utils.contractListLen=t.contractCurrent.length+t.contractPast.length}),t.$watchCollection("contractPast",function(){t.utils.contractListLen=t.contractCurrent.length+t.contractPast.length}),o.$broadcast("hrjc-loader-hide"),t.contractListLoaded=!0}),i.all($).then(function(n){e.extend(t.utils,n)}),t.toggleIsPrimary=function(e){function n(t){var n=0,o=t.length;for(n;n<o;n++)if(+t[n].id!==+e&&+t[n].is_primary)return t[n].is_primary="0",t[n].id;return null}n(t.contractCurrent)||n(t.contractPast),(a("getObjById")(t.contractCurrent,e)||a("getObjById")(t.contractPast,e)||{}).is_primary="1",t.contractCurrent=a("orderBy")(t.contractCurrent,"-is_primary"),t.contractPast=a("orderBy")(t.contractPast,"-is_primary")},t.modalContract=function(o){if(!o||"new"!==o)return null;var a,c={appendTo:n.find("div").eq(0),templateUrl:_.pathApp+"views/modalForm.html?v=2222",size:"lg",controller:"ModalContractNewCtrl",windowClass:"modal-contract",resolve:{model:function(){return t.model},utils:function(){return i.all(e.extend($,{contractListLen:t.utils.contractListLen}))}}};a=r.open(c),a.result.then(function(e){l.updateHeaderInfo(),+e.is_current?t.contractCurrent.push(e):t.contractPast.push(e),+e.is_primary&&t.toggleIsPrimary(e.id),g.location.assign(m.getManageEntitlementsPageURL(e.contact_id))})},t.delete=function(e){function o(e,n){var o=0,r=e.length;for(o;o<r;o++)if(+e[o].id===+n)return t.$emit("hrjc-loader-hide"),e.splice(o,1),n;return null}var i=r.open({appendTo:n.find("div").eq(0),templateUrl:_.pathApp+"views/modalDialog.html",size:"sm",controller:"ModalDialogCtrl",resolve:{content:function(){return{msg:"Are you sure you want to delete this job contract?"}}}});i.result.then(function(n){n&&(t.$emit("hrjc-loader-show"),l.delete(e).then(function(n){n.is_error||(l.updateHeaderInfo(),o(t.contractCurrent,e)||o(t.contractPast,e),y.publish("contract:deleted",{contactId:_.contactId,contractId:e}),y.publish("contract-refresh"))}))})}}])}),define("job-contract/services/contact",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContactService",["$resource","settings","$q","UtilsService","$log",function(e,t,n,o,r){r.debug("Service: ContactService");var i=e(t.pathRest,{action:"getlist",entity:"contact",json:{}});return{getOne:function(e){if(!e||"number"!=typeof+e)return null;var r,a=n.defer();return i.get({json:{id:e,debug:t.debug}},function(e){o.errorHandler(e,"Unable to fetch contact",a)||(r=e.values,a.resolve(1==r.length?r[0]:null))},function(){a.reject("Unable to fetch contact")}),a.promise},search:function(e,r){if(!e||"undefined"==typeof e||r&&"object"!=typeof r)return null;var a=n.defer(),r=r||{};return i.get({json:{input:e,params:r,debug:t.debug}},function(e){o.errorHandler(e,"Unable to fetch contact list",a)||a.resolve(e.values)},function(){a.reject("Unable to fetch contact list")}),a.promise}}}])}),define("job-contract/controllers/contract",["common/moment","job-contract/controllers/controllers","job-contract/services/contract-details","job-contract/services/contract-hour","job-contract/services/contract-pay","job-contract/services/contract-leave","job-contract/services/contract-pension","job-contract/services/contract-health","job-contract/services/contact","job-contract/services/utils","common/filters/angular-date/format-date"],function(e,t){"use strict";t.controller("ContractCtrl",["$scope","$route","$filter","$uibModal","$rootElement","$q","$window","settings","API","ContractService","ContractDetailsService","ContractHourService","ContractPayService","ContractLeaveService","ContractHealthService","ContractPensionService","ContractFilesService","ContactService","ContractRevisionList","$log","UtilsService",function(t,n,o,r,i,a,c,s,l,u,d,f,p,v,h,m,_,b,y,g,j){function C(e){var n={id:null,jobcontract_id:D,jobcontract_revision_id:e.details.jobcontract_revision_id};angular.extend(t.details,e.details),angular.extend(t.hour,e.hour||n),angular.extend(t.pay,e.pay||n),e.health&&e.health.provider&&e.health.provider!=t.health.provider&&b.getOne(e.health.provider).then(function(e){t.health.provider_contact=e}),e.health&&e.health.provider_life_insurance&&e.health.provider_life_insurance!=t.health.provider_life_insurance&&b.getOne(e.health.provider_life_insurance).then(function(e){t.health.provider_life_insurance_contact=e}),angular.extend(t.health,e.health||n),angular.extend(t.pension,e.pension||n),angular.forEach(t.leave,function(t,o){angular.extend(t,e.leave?e.leave[o]||n:n)})}function $(n){var o=!n||e().diff(n,"day")<=0,r=t.$parent.contract,i=t.$parent.contractCurrent,a=t.$parent.contractPast,c=i.indexOf(r),s=a.indexOf(r);o?(r.is_current="1",c+1?angular.extend(i[c],r):(a.splice(s),i.push(r))):(r.is_current="0",s+1?angular.extend(a[s],r):(a.push(r),i.splice(c)))}function w(){return S=a.all({details:_.get(t.details.jobcontract_revision_id,"civicrm_hrjobcontract_details"),pension:_.get(t.pension.jobcontract_revision_id,"civicrm_hrjobcontract_pension")}),S.then(function(e){t.files=e}),S}g.debug("Controller: ContractCtrl");var S,R=this,D=t.contract.id;t.contractLoaded=!1,t.revisionsShown=!1,t.isCollapsed=!0,t.files={},t.revisionCurrent={},t.revisionList=[],t.revisionDataList=[],angular.extend(t,angular.copy(t.model)),u.fullDetails(D).then(function(e){C(e),t.contractLoaded=!0,t.$watch("contract.is_primary",function(){t.isCollapsed=!+t.contract.is_primary}),t.$broadcast("hrjc-loader-show"),y.fetchRevisions(D).then(function(e){t.revisionList=e.revisionList,t.revisionDataList=e.revisionDataList,t.$broadcast("hrjc-loader-hide")})}).then(w),R.fetchRevisionDetails=function(e){return a.all([d.getOne({jobcontract_revision_id:e.details_revision_id}),f.getOne({jobcontract_revision_id:e.hour_revision_id}),h.getOne({jobcontract_revision_id:e.health_revision_id}),p.getOne({jobcontract_revision_id:e.pay_revision_id}),m.getOne({jobcontract_revision_id:e.pension_revision_id}),v.getOne({jobcontract_revision_id:e.leave_revision_id})]).then(function(e){var n={details:e[0],hour:e[1],health:e[2],pay:e[3],pension:e[4],leave:e[5]},o={contract:t.contract};return angular.extend(o,angular.copy(t.model)),angular.extend(o.details,n.details),angular.extend(o.hour,n.hour),angular.extend(o.health,n.health),angular.extend(o.pay,n.pay),angular.extend(o.pension,n.pension),angular.forEach(o.leave,function(e,t){angular.extend(e,n.leave?n.leave[t]:"")}),o})},t.modalContract=function(n,o){t.$broadcast("hrjc-loader-show");var l,d={controller:"ModalContractCtrl",appendTo:i.find("div").eq(0),templateUrl:s.pathApp+"views/modalForm.html?v=4448",windowClass:"modal-contract",size:"lg",resolve:{action:function(){return n||"view"},content:function(){return null},entity:function(){return o?R.fetchRevisionDetails(o):{contract:t.contract,details:t.details,hour:t.hour,pay:t.pay,leave:t.leave,health:t.health,pension:t.pension}},files:function(){return o?a.all({details:_.get(o.details_revision_id,"civicrm_hrjobcontract_details"),pension:_.get(o.pension_revision_id,"civicrm_hrjobcontract_pension")}):S},utils:function(){return t.utils}}};switch(n){case"edit":d.resolve.content=function(){return{allowSave:!0,isDisabled:!1,copy:{close:"Cancel",save:"Save without making a new revision",title:"Edit contract"}}};break;case"change":d.resolve.content=function(){return{allowSave:!0,isDisabled:!1,copy:{close:"Cancel",save:"Save and make a new revision",title:"Change contract terms"}}}}l=r.open(d),l.result.then(function(n){if(n){if(u.updateHeaderInfo(),C(n),$(n.details.period_end_date),n.revisionCreated){var o=e(new Date(n.revisionCreated.effective_date)),r=e(new Date(t.revisionCurrent.effective_date)),i=e(),s={revisionEntityIdObj:n.revisionCreated,details:n.details,hour:n.hour,pay:n.pay},l=r.diff(i,"day")<=0||r.diff(o,"day")<=0;n.files&&(l?w().then(function(e){s.files=e}):a.all({details:_.get(n.revisionCreated.details_revision_id,"civicrm_hrjobcontract_details")}).then(function(e){s.files=e})),t.revisionList.unshift(n.revisionCreated),t.revisionDataList.unshift(s)}else{var d,f,p=["details","hour","pay"];t.contract.is_primary!=n.contract.is_primary&&t.$parent.$parent.toggleIsPrimary(t.contract.id),angular.forEach(t.revisionDataList,function(e){for(d=0,f={};p[d];)e.revisionEntityIdObj[p[d]+"_revision_id"]==t.revisionCurrent[p[d]+"_revision_id"]&&(f[p[d]]=n[p[d]],"details"==p[d]&&n.files&&w().then(function(t){f.files=t,angular.extend(e,f)}),angular.extend(e,f)),d++})}CRM.refreshParent("#hrjobroles"),c.location.assign(j.getManageEntitlementsPageURL(t.contract.contact_id))}})},t.showRevisions=function(){t.revisionsShown=!0},t.modalRevision=function(e){if(t.$broadcast("hrjc-loader-show"),!e)return null;var n=[],c="leave"!=e?"getOne":"get",u=0,d=t.revisionList.length;for(u;u<d;u++)n.push(l[c]("HRJob"+o("capitalize")(e),{jobcontract_revision_id:t.revisionList[u][e+"_revision_id"]}));var f={appendTo:i.find("div").eq(0),size:"lg",controller:"ModalRevisionCtrl",templateUrl:s.pathApp+"views/modalRevision.html?v=1234",windowClass:"modal-revision",resolve:{entity:function(){return e},fields:function(){return t.$parent.$parent.fields[e]},model:function(){return t.model[e]},utils:function(){return t.utils},revisionDataList:function(){return a.all(n)},revisionList:function(){return t.revisionList},modalContract:function(){return t.modalContract}}};return r.open(f)},t.$on("updateContractView",function(){t.$broadcast("hrjc-loader-show"),u.fullDetails(t.revisionCurrent.jobcontract_id).then(function(e){C(e),t.$broadcast("hrjc-loader-hide")}).then(w)})}])}),define("job-contract/services/contract",["job-contract/services/services"],function(e){"use strict";e.factory("Contract",["$resource","settings","$log",function(e,t,n){return n.debug("Service: Contract"),e(t.pathRest,{action:"get",entity:"HRJobContract",json:{}})}]),e.factory("ContractService",["$log","$q","Contract","ContractRevisionService","settings","UtilsService","DOMEventTrigger",function(e,t,n,o,r,i,a){function c(e){angular.forEach(e.leave,function(e){e.add_public_holidays=!!parseInt(e.add_public_holidays)})}return e.debug("Service: ContractService"),{get:function(e){var o=t.defer(),a={};return CRM&&CRM.jobContractTabApp&&CRM.jobContractTabApp.contractList?o.resolve(CRM.jobContractTabApp.contractList):(a={sequential:1,contact_id:r.contactId,deleted:0},e&&"number"==typeof+e&&(a.contact_id=e),n.get({json:a},function(e){i.errorHandler(e,"Unable to fetch contract list",o)||o.resolve(e.values)},function(){o.reject("Unable to fetch contract list")})),o.promise},getCurrentContract:function(e){var o=t.defer();return n.get({action:"getcurrentcontract",json:{contact_id:e}},function(e){e.is_error&&o.reject("Unable to fetch the current contract"),o.resolve(e.values)},function(){o.reject("Unable to fetch the current contract")}),o.promise},updateHeaderInfo:function(){this.getCurrentContract(r.contactId).then(function(e){a("updateContactHeader",{contract:e})}).catch(function(e){console.log(e)})},getOne:function(e,o){if(!e||"number"!=typeof+e)return null;var i,a=t.defer(),c={deleted:0,sequential:1,contact_id:r.contactId,id:e};return o&&"number"==typeof+o&&(c.contact_id=o),n.get({json:c},function(e){i=e.values,a.resolve(1==i.length?i[0]:null)},function(){a.reject("Unable to fetch contract data")}),a.promise},getRevision:function(e){if(!e||"number"!=typeof+e)return null;var n=t.defer(),r={deleted:0,options:{limit:0},sequential:1,jobcontract_id:e};return o.get({json:r},function(e){n.resolve(e.values)},function(){n.reject("Unable to fetch contract revisions")}),n.promise},getRevisionOptions:function(e,n){var o,i=t.defer();if(!n){var o=r.CRM.options.HRJobContractRevision||{};e&&"string"==typeof e&&(o=o[optionGroup]),i.resolve(o||{})}return i.promise},save:function(e){if(!e||"object"!=typeof e||!e.id||"number"!=typeof+e.id)return null;var o,r=t.defer(),i=angular.extend({deleted:0,sequential:1},e);return n.save({action:"create",json:i},null,function(e){o=e.values,r.resolve(1==o.length?o[0]:null)},function(){r.reject("Unable to fetch contract contract data")}),r.promise},saveRevision:function(e){if(!e||"object"!=typeof e||!e.id||"number"!=typeof+e.id)return null;var n,r=t.defer(),i=angular.extend({deleted:0,sequential:1},e);return o.save({action:"create",json:i},null,function(e){n=e.values,r.resolve(1==n.length?n[0]:null)},function(){r.reject("Unable to fetch contract revision")}),r.promise},delete:function(e){if(!e||"number"!=typeof+e)return null;var o=t.defer();
return n.delete({action:"deletecontract",json:{id:e}},function(e){o.resolve(e)},function(){o.reject("Could not delete contract ID:"+e)}),o.promise},deleteRevision:function(e){if(!e||"number"!=typeof+e)return null;var n,r=t.defer();return o.save({action:"create",json:{sequential:1,deleted:1,id:e}},null,function(e){n=e.values,r.resolve(1==n.length?n[0]:null)},function(){r.reject("Unable to delete contract revision id: "+e)}),r.promise},fullDetails:function(e){if(!e||"number"!=typeof+e)return null;var o=t.defer();return n.get({action:"getfulldetails",json:{jobcontract_id:e}},function(e){c(e),o.resolve(e)},function(){o.reject("Could not fetch full details for contract ID:"+e)}),o.promise}}}])}),define("job-contract/controllers/revision-list",["common/lodash","job-contract/controllers/controllers","job-contract/services/contract"],function(e,t){"use strict";t.controller("RevisionListCtrl",["$rootScope","$scope","$filter","$q","$uibModal","$rootElement","settings","ContractService","ContractDetailsService","ContractHourService","ContractPayService","ContractFilesService","$log","ContractRevisionService","ContractRevisionList",function(e,t,n,o,r,i,a,c,s,l,u,d,f,p,v){function h(){t.revisionDataList||(t.$broadcast("hrjc-loader-show"),v.fetchRevisions(b).then(function(e){t.revisionList=e.revisionList,t.revisionDataList=e.revisionDataList,t.$broadcast("hrjc-loader-hide")}))}function m(){var e,o=0;if(t.revisionList.length){var r=n("orderBy")(t.revisionList,["effective_date","id"]);if(angular.forEach(r,function(t){new Date(t.effective_date).setHours(0,0,0,0)<=(new Date).setHours(0,0,0,0)&&(e=t)}),!e)do e=r[o],o++;while(r[o]&&r[o-1].effective_date==r[o].effective_date);return angular.extend(t.revisionCurrent,e),e.id}return null}function _(){var e=a.pathReport+(a.pathReport.indexOf("?")>-1?"&":"?"),n=t.fields;return angular.forEach(n,function(t,n){e+="fields["+n+"_revision_id]=1&",angular.forEach(t,function(t){e+="fields["+n+"_"+t.name+"]=1&"})}),e+="fields[sort_name]=1&fields[first_name]=1&fields[last_name]=1&fields[external_identifier]=1&fields[email]=1&fields[street_address]=1&fields[city]=1&fields[name]=1&fields[contract_contact_id]=1&fields[contract_contract_id]=1&fields[jobcontract_revision_id]=1&fields[change_reason]=1&fields[created_date]=1&fields[effective_date]=1&fields[modified_date]=1&order_bys[1][column]=id&order_bys[1][order]=ASC&order_bys[2][column]=civicrm_hrjobcontract_revision_revision_id&order_bys[2][order]=ASC&order_bys[3][column]=-&order_bys[3][order]=ASC&order_bys[4][column]=-&order_bys[4][order]=ASC&order_bys[5][column]=-&order_bys[5][order]=ASC&contract_id_op=eq&permission=access+CiviReport&row_count=&_qf_Summary_submit_csv=Preview+CSV&groups=&contract_id_value="+b+"&group_bys[civicrm_hrjobcontract_revision_revision_id]=1"}f.debug("Controller: RevisionListCtrl");var b=t.contract.id,y=t.revisionDataList;t.currentPage=1,t.itemsPerPage=5,t.maxSize=5,t.changeReasons=e.options.contract.change_reason,t.sortCol="revisionEntityIdObj.effective_date",t.sortReverse=!0,t.display={effectiveDate:!0,position:!0,payScale:!0,totalSalary:!0,hours:!0,placeOfWork:!0,recordedBy:!0,changeReason:!0},h(),t.createPage=function(){var e=(t.currentPage-1)*t.itemsPerPage,n=e+t.itemsPerPage;t.revisionDataListPage=y.slice(e,n)},t.sortBy=function(e,o){"undefined"!=typeof e&&(t.sortCol==e?t.sortReverse=!t.sortReverse:t.sortCol=e),"undefined"!=typeof o&&(t.sortReverse=o),y=n("orderBy")(t.revisionDataList,t.sortCol,t.sortReverse)},t.urlCSV=_(),t.deleteRevision=function(e,n){if(1==t.revisionList.length)return void n.stopPropagation();if(e&&"number"==typeof+e){var o=r.open({appendTo:i.find("div").eq(0),templateUrl:a.pathApp+"views/modalDialog.html",size:"sm",controller:"ModalDialogCtrl",resolve:{content:function(){return{msg:"Are you sure you want to delete this job contract revision?"}}}});o.result.then(function(n){n&&(t.$broadcast("hrjc-loader-show"),c.deleteRevision(e).then(function(n){var o=0,r=t.revisionList.length;if(!n.is_error){for(o;o<r;o++)if(t.revisionList[o].id==e){t.revisionList.splice(o,1),t.revisionDataList.splice(o,1);break}if(t.sortBy(),t.createPage(),t.revisionCurrent.id!=m())return void t.$emit("updateContractView");t.$broadcast("hrjc-loader-hide")}}))})}},t.modalRevisionEdit=function(e){var n=e.effective_date,o=e.change_reason,s=r.open({appendTo:i.find("div").eq(0),templateUrl:a.pathApp+"views/modalChangeReason.html?v="+(new Date).getTime(),controller:"ModalChangeReasonCtrl",resolve:{content:function(){return{copy:{title:"Edit revision data"}}},date:function(){return n},reasonId:function(){return o}}});s.result.then(function(r){r.date==n&&r.reasonId==o||c.saveRevision({id:e.id,change_reason:r.reasonId,effective_date:r.date}).then(function(){e.effective_date=r.date,e.change_reason=r.reasonId,t.sortBy(),t.createPage(),t.revisionCurrent.id!=m()&&t.$emit("updateContractView")})})},t.$watch("currentPage",function(){t.createPage()}),t.$watch("revisionDataList.length",function(e,n){y=t.revisionDataList,e>n&&m(),t.sortBy(),t.createPage()})}])}),define("job-contract/controllers/modal/modal-change-reason",["common/moment","job-contract/controllers/controllers","job-contract/services/contract"],function(e,t){"use strict";t.controller("ModalChangeReasonCtrl",["$scope","$log","$uibModalInstance","content","date","reasonId","settings","ContractRevisionService",function(t,n,o,r,i,a,c,s){n.debug("Controller: ModalChangeReasonCtrl");var r=r||{},l=r.copy||{};l.title=l.title||"Revision data",t.change_reason=a||"",t.copy=l,t.effective_date=i||"",t.isPast=!1,t.dpOpen=function(e,n){e.preventDefault(),e.stopPropagation(),t[n]=!0},t.save=function(){s.validateEffectiveDate({contact_id:c.contactId,effective_date:t.effective_date}).then(function(n){n.success?o.close({reasonId:t.change_reason,date:t.effective_date?e(t.effective_date).format("YYYY-MM-DD"):""}):(CRM.alert(n.message,"Error","error"),t.$broadcast("hrjc-loader-hide"))})},t.cancel=function(){o.dismiss("cancel")},t.$watch("effective_date",function(e){t.isPast=new Date(e).setHours(0,0,0,0)<(new Date).setHours(0,0,0,0)})}])}),define("job-contract/services/contract-revision",["common/lodash","job-contract/services/services","job-contract/services/utils"],function(e,t){"use strict";t.factory("ContractRevisionService",["$filter","$resource","settings","$q","UtilsService","$log",function(t,n,o,r,i,a){function c(e){var n=t("formatDate")(e,"YYYY-MM-DD");return"Unspecified"!==n?n:e}return a.debug("Service: ContractRevisionService"),e.assign(n(o.pathRest,{action:"get",entity:"HRJobContractRevision",json:{}}),{validateEffectiveDate:function(e){return e.effective_date=c(e.effective_date),e.sequential=0,e.debug=o.debug,this.save({action:"validateeffectivedate",json:e},null).$promise.then(function(e){return e.values})}})}])}),define("job-contract/services/contract-files",["job-contract/services/services","job-contract/services/utils"],function(e){"use strict";e.factory("ContractFilesService",["$resource","settings","$q","UtilsService","FileUploader","$log",function(e,t,n,o,r,i){i.debug("Service: ContractFilesService");var a=e(t.pathFile+":action");return r.prototype.queueDelete=[],{delete:function(e,t,r){if(!e||"number"!=typeof+e||!t||"number"!=typeof+t||!r||"string"!=typeof r)return null;var i=n.defer();return a.save({action:"delete",entityTable:r,entityID:t,fileID:e},null,function(e){e.values&&!+e.values[0].result&&(e.is_error=1),o.errorHandler(e,"Unable to delete file",i)||i.resolve(e.values[0])},function(){i.reject("Unable to delete file")}),i.promise},get:function(e,t){if(!e||"number"!=typeof+e||!t||"string"!=typeof t)return null;var r=n.defer();return a.get({action:"list",entityTable:t,entityID:e},function(e){o.errorHandler(e,"Unable to fetch files",r)||r.resolve(e.values)},function(){r.reject("Unable to fetch files")}),r.promise},uploader:function(e,n){if(!e||"string"!=typeof e)return null;var o={url:t.pathFile+"upload",formData:[{entityTable:e}]};return n&&"number"==typeof n&&(o.queueLimit=n),new r(o)},upload:function(e,t){if(!e||"object"!=typeof e||!t||"number"!=typeof+t)return null;var o=n.defer(),r=[];return e.onBeforeUploadItem=function(e){e.formData.push({entityID:t})},e.onCompleteItem=function(e,t){r.push(t)},e.onErrorItem=function(e,t,n,r){o.reject("Could not upload file: "+e.file.name),i.error(" ===== Item Error: "+n+" ======"),i.error(" =====  - item ======"),i.error(e),i.error(" =====  - response ======"),i.error(t),i.error(" =====  - headers ======"),i.error(r)},e.onCompleteAll=function(){o.resolve(r)},e.uploadAll(),o.promise}}}])}),define("job-contract/controllers/modal/modal-contract",["common/angular","common/lodash","job-contract/controllers/controllers","job-contract/services/contract","job-contract/services/contract-revision","job-contract/services/contract-details","job-contract/services/contract-hour","job-contract/services/contract-pay","job-contract/services/contract-leave","job-contract/services/contract-health","job-contract/services/contract-pension","job-contract/services/contract-files","job-contract/services/utils","common/services/pub-sub"],function(e,t,n){"use strict";n.controller("ModalContractCtrl",["$scope","$uibModal","$uibModalInstance","$q","$rootElement","$rootScope","$filter","ContractService","ContractRevisionService","ContractDetailsService","ContractHourService","ContractPayService","ContractLeaveService","ContractHealthService","ContractPensionService","ContractFilesService","action","entity","content","files","UtilsService","utils","settings","$log","pubSub",function(n,o,r,i,a,c,s,l,u,d,f,p,v,h,m,_,b,y,g,j,C,$,w,S,R){function D(){if(e.equals(y,n.entity)&&e.equals(j,n.files)&&!n.uploader.details.contract_file.queue.length&&!n.uploader.pension.evidence_file.queue.length)return n.$broadcast("hrjc-loader-hide"),void r.dismiss("cancel");switch(b){case"edit":n.entity.contract.is_primary===y.contract.is_primary?U().then(function(e){switch(e){case"edit":E();break;case"change":L().then(function(e){F(e.reasonId,e.date)})}}):E();break;case"change":L().then(function(e){F(e.reasonId,e.date)});break;default:n.$broadcast("hrjc-loader-hide"),r.dismiss("cancel")}}function P(){var e=o.open({appendTo:a.find("div").eq(0),size:"sm",templateUrl:w.pathApp+"views/modalDialog.html?v="+(new Date).getTime(),controller:"ModalDialogCtrl",resolve:{content:{title:"Update leave entitlements?",msg:"The system will now update the staff member leave entitlement.",copyConfirm:"Proceed"}}});return e.result}function M(e){var t=s("formatDate")(e,Date);return"Unspecified"!==t?t:e}function L(){var e=o.open({appendTo:a.find("div").eq(0),templateUrl:w.pathApp+"views/modalChangeReason.html?v="+(new Date).getTime(),controller:"ModalChangeReasonCtrl",resolve:{content:function(){return{copy:{title:A.title}}},date:null,reasonId:null}});return e.result}function U(){var e=o.open({appendTo:a.find("div").eq(0),templateUrl:w.pathApp+"views/modalConfirmEdit.html?v="+(new Date).getTime(),controller:"ModalDialogCtrl",resolve:{content:function(){return{msg:"Save without making a new revision?"}}}});return e.result}function E(){n.$broadcast("hrjc-loader-show"),n.entity.details.period_end_date=n.entity.details.period_end_date||"";var t,c,s,u,b,y=e.copy(n.entity),g=n.filesTrash,j=n.uploader,C={contract:l.save(y.contract),details:d.save(y.details),hour:f.save(y.hour),pay:p.save(y.pay),leave:v.save(y.leave),health:h.save(y.health),pension:m.save(y.pension)},$=[],S=[];for(t in g)for(s=0,u=g[t].length,s;s<u;s++)c=g[t][s],S.push(_.delete(c.fileID,c.entityID,c.entityTable));e.extend(C,{files:!!S.length&&i.all(S)}),i.all(C).then(function(t){return e.forEach(j,function(t){e.forEach(t,function(t){e.forEach(t.queue,function(e){e.file.size>n.fileMaxSize&&e.remove()})})}),j.details.contract_file.queue.length&&$.push(_.upload(j.details.contract_file,y.details.jobcontract_revision_id)),j.pension.evidence_file.queue.length&&$.push(_.upload(j.pension.evidence_file,y.pension.jobcontract_revision_id)),t.details.period_start_date=y.details.period_start_date,t.details.period_end_date=y.details.period_end_date,t.pay.annual_benefits=y.pay.annual_benefits,t.pay.annual_deductions=y.pay.annual_deductions,$.length?(b=o.open({appendTo:a.find("div").eq(0),templateUrl:w.pathApp+"views/modalProgress.html?v="+(new Date).getTime(),size:"sm",controller:"ModalProgressCtrl",resolve:{uploader:function(){return j},promiseFilesUpload:function(){return $}}}),t.files=b.result,i.all(t)):t}).then(function(e){n.$broadcast("hrjc-loader-hide"),r.close(e),R.publish("contract-refresh")},function(e){n.$broadcast("hrjc-loader-hide"),CRM.alert(e,"Error","error")})}function F(e,t){n.$broadcast("hrjc-loader-show"),u.validateEffectiveDate({contact_id:w.contactId,effective_date:t}).then(function(o){o.success?q(e,t):(CRM.alert(o.message,"Error","error"),n.$broadcast("hrjc-loader-hide"))},function(e){})}function q(t,c){var s,u,b,g,j,$,S,D,P,M,L=[],U=e.copy(n.entity),E=n.filesTrash,F=n.uploader,q=0,I=0,A=0,H={},T=[],x=[],O={details:d,hour:f,pay:p,leave:v,health:h,pension:m};for(s in O){if(S=!e.equals(y[s],U[s]),!S&&(S=!!E[s]&&!!E[s].length,!S&&F[s]))for(g in F[s])if(b=F[s][g],b.queue.length){S=!0;break}S&&(L[A]={},L[A].name=s,L[A].data=U[s],L[A].service=O[s],A++,q=A)}q?(C.prepareEntityIds(L[0].data,y.contract.id),L[0].service.save(L[0].data).then(function(n){for(A=1,M=e.isArray(n)?n[0].jobcontract_revision_id:n.jobcontract_revision_id,H[L[0].name]=n,A;A<q;A++)s=L[A].name,C.prepareEntityIds(L[A].data,y.contract.id,M),H[s]=L[A].service.save(L[A].data);return i.all(e.extend(H,{revisionCreated:l.saveRevision({id:M,change_reason:t,effective_date:c})},{files:!1}))}).then(function(t){for(s in O)if(t[s]=t[s]||U[s],E[s]&&E[s].length)for(A=0,u=E[s].length,A;A<u;A++)j=E[s][A],T.push(_.delete(j.fileID,M,j.entityTable));return t.details.period_start_date=U.details.period_start_date,t.details.period_end_date=U.details.period_end_date,t.revisionCreated.effective_date=c||"",t.pay.annual_benefits=U.pay.annual_benefits,t.pay.annual_deductions=U.pay.annual_deductions,e.extend(t.revisionCreated,{details_revision_id:t.details.jobcontract_revision_id,health_revision_id:t.health.jobcontract_revision_id,hour_revision_id:t.hour.jobcontract_revision_id,jobcontract_id:y.contract.id,leave_revision_id:t.leave[0].jobcontract_revision_id,pay_revision_id:t.pay.jobcontract_revision_id,pension_revision_id:t.pension.jobcontract_revision_id}),T.length?(t.files=i.all(T),i.all(t)):t}).then(function(e){for(A=0;A<q;A++)if(s=L[A].name,F[s])for(g in F[s]){for(b=F[s][g],I=b.queue.length,$=0;$<I;$++)D=b.queue[$],D.file.size>n.fileMaxSize&&(D.remove(),$--,I--);I&&x.push(_.upload(b,M))}return x.length?(P=o.open({appendTo:a.find("div").eq(0),templateUrl:w.pathApp+"views/modalProgress.html",size:"sm",controller:"ModalProgressCtrl",resolve:{uploader:function(){return F},promiseFilesUpload:function(){return x}}}),e.files=P.result,i.all(e)):e}).then(function(e){n.$broadcast("hrjc-loader-hide"),r.close(e),R.publish("contract-refresh")})):(n.$broadcast("hrjc-loader-hide"),r.close())}function I(){return i.all([{name:"hrjobcontract_health_health_plan_type",key:"plan_type"},{name:"hrjobcontract_health_life_insurance_plan_type",key:"plan_type_life_insurance"}].map(function(e){h.getOptions(e.name,!0).then(function(n){c.options.health[e.key]=t.transform(n,function(e,t){e[t.key]=t.value},{})})}))}S.debug("Controller: ModalContractCtrl");var A=g.copy||{};A.close=A.close||"Close",A.save=A.save||"Save changes",A.title=A.title||"Contract",n.action=b||"view",n.allowSave="undefined"!=typeof g.allowSave&&g.allowSave,n.copy=A,n.entity={},n.fileMaxSize=w.CRM.maxFileSize||0,n.files={},n.filesTrash={},n.isDisabled="undefined"==typeof g.isDisabled||g.isDisabled,n.isPrimaryDisabled=+y.contract.is_primary,n.showIsPrimary=$.contractListLen>1&&"change"!==b,n.uploader={details:{contract_file:_.uploader("civicrm_hrjobcontract_details")},pension:{evidence_file:_.uploader("civicrm_hrjobcontract_pension",1)}},n.utils=$,e.copy(y,n.entity),e.copy(j,n.files),n.entity.details.period_start_date=M(n.entity.details.period_start_date),n.entity.details.period_end_date=M(n.entity.details.period_end_date),function(){e.forEach(n.files,function(e,t){n.filesTrash[t]=[]}),r.opened.then(function(){c.$broadcast("hrjc-loader-hide")}),e.forEach(n.uploader,function(t){e.forEach(t,function(e){e.onAfterAddingAll=function(){n.filesValidate()}})}),c.$broadcast("hrjc-loader-show"),I().then(function(){c.$broadcast("hrjc-loader-hide")})}(),n.cancel=function(){if("view"===b||e.equals(y,n.entity)&&e.equals(j,n.files)&&!n.uploader.details.contract_file.queue.length&&!n.uploader.pension.evidence_file.queue.length)return n.$broadcast("hrjc-loader-hide"),void r.dismiss("cancel");w.debug&&e.forEach(y,function(t,o){e.equals(t,n.entity[o])||(S.debug("======================"),S.debug("Changed entity: "+o),S.debug("Before:"),S.debug(t),S.debug("After:"),S.debug(n.entity[o]))});var t=o.open({appendTo:a.find("div").eq(0),templateUrl:w.pathApp+"views/modalDialog.html?v="+(new Date).getTime(),size:"sm",controller:"ModalDialogCtrl",resolve:{content:function(){return{copyCancel:"No",title:"Alert",msg:"Are you sure you want to cancel? Changes will be lost!"}}}});t.result.then(function(e){e&&(n.$broadcast("hrjc-loader-hide"),r.dismiss("cancel"))})},n.fileMoveToTrash=function(e,t){var o=n.files[t],r=n.filesTrash[t];r.push(o[e]),o.splice(e,1)},n.filesValidate=function(){var e,t,o,r,i,a,c,s=n.fileMaxSize,l=n.uploader,u=!0;for(e in l){i=l[e];for(t in i)for(o=0,r=c.length,a=i[t],c=a.queue;o<r&&u;o++)u=c[o].file.size<s}n.contractForm.$setValidity("maxFileSize",u)},n.allowSave&&(n.save=function(){n.$broadcast("hrjc-loader-show"),d.validateDates({contact_id:w.contactId,period_start_date:n.entity.details.period_start_date,period_end_date:n.entity.details.period_end_date,jobcontract_id:y.contract.id}).then(function(e){e.success?P().then(function(){D()}):(CRM.alert(e.message,"Error","error"),n.$broadcast("hrjc-loader-hide"))},function(e){}),n.$broadcast("hrjc-loader-hide")})}])}),define("job-contract/controllers/modal/modal-contract-new",["common/angular","common/lodash","common/moment","job-contract/controllers/controllers","job-contract/services/contract","job-contract/services/contract-details","job-contract/services/contract-hour","job-contract/services/contract-pay","job-contract/services/contract-leave","job-contract/services/contract-health","job-contract/services/contract-pension","job-contract/services/contract-files","job-contract/services/utils","common/services/pub-sub"],function(e,t,n,o){"use strict";o.controller("ModalContractNewCtrl",["$rootScope","$scope","$uibModalInstance","$q","$uibModal","$rootElement","$sce","Contract","ContractService","ContractDetailsService","ContractHourService","ContractPayService","ContractLeaveService","ContractHealthService","ContractPensionService","ContractFilesService","model","UtilsService","utils","settings","$log","pubSub",function(o,r,i,a,c,s,l,u,d,f,p,v,h,m,_,b,y,g,j,C,$,w){function S(){var e=c.open({appendTo:s.find("div").eq(0),size:"sm",templateUrl:C.pathApp+"views/modalDialog.html?v="+(new Date).getTime(),controller:"ModalDialogCtrl",resolve:{content:{title:"Update leave entitlements?",msg:"The system will now update the staff member leave entitlement.",copyConfirm:"Proceed"}}});return e.result}function R(){var t=new u;t.$save({action:"create",json:{sequential:1,contact_id:C.contactId,is_primary:j.contractListLen?r.entity.contract.is_primary:1}},function(t){var o,l,u,y=t.values[0],j=y.id,$=e.copy(r.entity.details),S=r.entity.hour,R=r.entity.pay,D=r.entity.leave,P=r.entity.health,M=r.entity.pension,L=[],U=r.uploader;y.is_current=!$.period_end_date||n().diff($.period_end_date,"day")<=0,g.prepareEntityIds($,j),f.save($).then(function(e){u=e.jobcontract_revision_id},function(e){return CRM.alert(e,"Error","error"),d.delete(j),i.dismiss(),a.reject()}).then(function(){return e.forEach(r.entity,function(e){g.prepareEntityIds(e,j,u)}),l=[p.save(S),v.save(R),h.save(D),m.save(P),_.save(M)],r.uploader.details.contract_file.queue.length&&L.push(b.upload(U.details.contract_file,u)),r.uploader.pension.evidence_file.queue.length&&L.push(b.upload(U.pension.evidence_file,u)),L.length&&(o=c.open({appendTo:s.find("div").eq(0),templateUrl:C.pathApp+"views/modalProgress.html",size:"sm",controller:"ModalProgressCtrl",resolve:{uploader:function(){return U},promiseFilesUpload:function(){return L}}}),l.push(o.result)),a.all(l)}).then(function(){r.$broadcast("hrjc-loader-hide"),i.close(y),w.publish("contract:created",C.contactId),w.publish("contract-refresh")},function(e){CRM.alert(e,"Error","error"),d.delete(j).then(function(e){r.$broadcast("hrjc-loader-hide"),e.is_error&&CRM.alert(e.error_message||"Unknown error","Error","error")},function(e){r.$broadcast("hrjc-loader-hide"),CRM.alert(e||"Unknown error","Error","error")})})},function(e){return r.$broadcast("hrjc-loader-hide"),i.dismiss(),CRM.alert(e.statusText||"Unknown error","Error","error"),a.reject()})}function D(){return a.all([{name:"hrjobcontract_health_health_plan_type",key:"plan_type"},{name:"hrjobcontract_health_life_insurance_plan_type",key:"plan_type_life_insurance"}].map(function(e){m.getOptions(e.name,!0).then(function(n){o.options.health[e.key]=t.transform(n,function(e,t){e[t.key]=t.value},{})})}))}function P(){r.entity.leave&&r.entity.leave.forEach(function(e,t){var n=r.entity.leave[t].leave_type;r.entity.leave[t].leave_amount=j.absenceTypes[n].default_entitlement,r.entity.leave[t].add_public_holidays=j.absenceTypes[n].add_public_holiday_to_entitlement})}$.debug("Controller: ModalContractNewCtrl"),r.allowSave=!0,r.action="new",r.copy={close:"Cancel",save:"Add New Job Contract",title:"Add New Job Contract"},r.entity={},r.isDisabled=!1,r.showIsPrimary=j.contractListLen,r.fileMaxSize=C.CRM.maxFileSize||0,r.uploader={details:{contract_file:b.uploader("civicrm_hrjobcontract_details")},pension:{evidence_file:b.uploader("civicrm_hrjobcontract_pension",1)}},r.utils=j,e.copy(y,r.entity),r.entity.contract={is_primary:0},P(),r.tooltips={fileSize:l.trustAsHtml("<p>THE FILE IS TOO LARGE AND CANNOT BE UPLOADED. PLEASE REDUCE THE SIZE OF THE FILE AND TRY AGAIN.</p>"),fte:l.trustAsHtml("<div><strong>FTE</strong> stands forFull Time Equivalent. This is a useful measure foran organisation that has peopleworking part-time.For a full-time person, FTE is always equal to1.0, whereas for a part-time person, the FTE will representthe fraction of standard hours that the person works on aregular basis.<br>E.g. if the standard working day at an organisationcomprises of 8 hours, then a person who regularly works for8 hours each day would be considered to be full- time andwould have an FTE value of 1.0. A person who regularly worksfor only 4 hours each day would be considered to be apart-time person and would have an FTE value of 0.5. If theorganisation had 10 people, each with an FTE of 1.0 theactual headcount of full-time people would be 10 and theFTE headcount (equal to actual headcount multiplied by theFTE value) would also be 10. However, if the organisationhad another 10 people who each worked part-time with an FTEvalue of 0.5 the actual headcount of part-time people wouldbe 10 while the FTE headcount would only be 5. Thus for anorganisation that had a total of 10 full-time people, and 10part-time people (each with an FTE of 0.5) the actualheadcount for the organisation would be 20 while the FTEheadcount would be 15.</div>")},function(){e.forEach(r.uploader,function(t){e.forEach(t,function(e){e.onAfterAddingAll=function(){r.filesValidate()}})}),o.$broadcast("hrjc-loader-show"),D().then(function(){o.$broadcast("hrjc-loader-hide")})}(),r.filesValidate=function(){var e,t,n,o,i,a,c,s=r.fileMaxSize,l=!0,u=r.uploader;for(e in u){i=u[e];for(t in i)for(n=0,o=c.length,a=i[t],c=a.queue;n<o&&l;n++)l=c[n].file.size<s}r.contractForm.$setValidity("maxFileSize",l)},r.cancel=function(){i.dismiss("cancel")},r.save=function(){r.$broadcast("hrjc-loader-show"),f.validateDates({contact_id:C.contactId,period_start_date:r.entity.details.period_start_date,period_end_date:r.entity.details.period_end_date}).then(function(e){e.success?S().then(function(){R()},function(){r.$broadcast("hrjc-loader-hide")}):(CRM.alert(e.message,"Error","error"),r.$broadcast("hrjc-loader-hide"))},function(e){})}}])}),define("job-contract/controllers/modal/modal-dialog",["job-contract/controllers/controllers"],function(e){"use strict";e.controller("ModalDialogCtrl",["$scope","$uibModalInstance","$timeout","content","$log",function(e,t,n,o,r){r.debug("Controller: ModalDialogCtrl"),e.title=o.title||"CiviHR Job Contract",e.msg=o.msg||"",e.copyConfirm=o.copyConfirm||"Yes",e.copyCancel=o.copyCancel||"Cancel",e.confirm=function(e){t.close(e||!0)},e.cancel=function(){t.dismiss("Cancel")}}])}),define("job-contract/controllers/modal/modal-progress",["job-contract/controllers/controllers"],function(e){"use strict";e.controller("ModalProgressCtrl",["$scope","$uibModalInstance","$q","$timeout","uploader","promiseFilesUpload","$log",function(e,t,n,o,r,i,a){a.debug("Controller: ModalProgressCtrl");var c,s;e.uploader=r;for(c in r)for(s in r[c])r[c][s].queue.length&&(r[c][s].item=r[c][s].queue[0].file.name),r[c][s].onProgressItem=function(e){this.item=e.file.name};n.all(i).then(function(e){o(function(){t.close(e)},500)}),e.cancel=function(){t.dismiss("File upload canceled")}}])}),define("job-contract/controllers/modal/modal-revision",["job-contract/controllers/controllers"],function(e){"use strict";e.controller("ModalRevisionCtrl",["$scope","$rootScope","$uibModalInstance","$filter","$q","settings","revisionDataList","revisionList","entity","fields","model","modalContract","utils","ContactService","$log",function(e,t,n,o,r,i,a,c,s,l,u,d,f,p,v){function h(){var t,n,o=i.pathReport+(i.pathReport.indexOf("?")>-1?"&":"?"),r=e.entity;return angular.forEach(e.fields,function(e){t="editor_name"!=e.name?e.name:"editor_uid",n=e.extends?"":r+"_",e.selected&&(o+="fields["+n+t+"]=1&")}),o+="fields[sort_name]=1&fields[first_name]=1&fields[last_name]=1&fields[external_identifier]=1&fields[email]=1&fields[street_address]=1&fields[city]=1&fields[name]=1&fields[contract_contact_id]=1&fields[contract_contract_id]=1&fields[jobcontract_revision_id]=1&fields[change_reason]=1&fields[created_date]=1&fields[effective_date]=1&fields[modified_date]=1&order_bys[1][column]=id&order_bys[1][order]=ASC&order_bys[2][column]=civicrm_hrjobcontract_revision_revision_id&order_bys[2][order]=ASC&order_bys[3][column]=-&order_bys[3][order]=ASC&order_bys[4][column]=-&order_bys[4][order]=ASC&order_bys[5][column]=-&order_bys[5][order]=ASC&contract_id_op=eq&permission=access+CiviReport&row_count=&_qf_Summary_submit_csv=Preview+CSV&groups=&contract_id_value="+c[0].jobcontract_id+"&group_bys[civicrm_hrjobcontract_revision_revision_id]=1"}switch(v.debug("Controller: ModalRevisionCtrl"),e.$broadcast("hrjc-loader-show"),e.currentPage=1,e.entity=s,e.fields=angular.copy(l),e.itemsPerPage=5,e.revisionDataList=[],e.revisionList=[],e.sortCol="effective_date",e.subFields={},e.maxSize=5,e.modalContract=d,e.sortReverse=!0,function(){var t,n=0,o=e.fields.length;for(n;n<o;n++)t=e.fields[n],t.selected=!0,t.isArray="leave_type"==t.name||"leave_amount"==t.name,"id"!=t.name&&"jobcontract_revision_id"!=t.name?t.display=!0:t.display=!1;e.fields.unshift({name:"effective_date",title:"Effective Date",display:!0,selected:!0,isArray:!1,extends:!0}),e.fields.push({name:"editor_name",title:"Change Recorded By",display:!0,selected:!0,isArray:!1,extends:!0},{name:"change_reason",title:"Reason For Change",display:!0,selected:!0,isArray:!1,extends:!0})}(),function(){var n,r,i=0,s=a.length;for(i;i<s;i++)n=i+1,r=n==s,a[i]||(a[i]=u),r||a[n]||(a[n]=u),angular.isArray(a[i])&&(a[i]={jobcontract_revision_id:a[i][0].jobcontract_revision_id,data:a[i]}),angular.extend(a[i],{effective_date:o("date")(c[i].effective_date,"yyyy/MM/dd")||"",editor_name:c[i].editor_name||"",change_reason:t.options.contract.change_reason[c[i].change_reason]||"",details_revision_id:c[i].details_revision_id,health_revision_id:c[i].health_revision_id,hour_revision_id:c[i].hour_revision_id,leave_revision_id:c[i].leave_revision_id,pay_revision_id:c[i].pay_revision_id,pension_revision_id:c[i].pension_revision_id,role_revision_id:c[i].role_revision_id}),e.revisionDataList.push(a[i])}(),s){case"hour":!function(){var t;angular.forEach(e.revisionDataList,function(e){e.location_standard_hours&&(t=o("filter")(f.hoursLocation,{id:e.location_standard_hours})[0],e.location_standard_hours=t.location+": "+t.standard_hours+"h per "+t.periodicity)})}();break;case"health":angular.forEach(e.revisionDataList,function(e){e.provider&&p.getOne(e.provider).then(function(t){e.provider=t.label}),e.provider_life_insurance&&p.getOne(e.provider_life_insurance).then(function(t){e.provider_life_insurance=t.label})});break;case"pay":!function(){var n;angular.forEach(e.revisionDataList,function(e){e.pay_scale&&(n=o("filter")(f.payScaleGrade,{id:e.pay_scale})[0]||o("filter")(f.payScaleGrade,{pay_scale:e.pay_scale})[0],e.pay_scale=n.pay_scale+(n.currency?" - "+t.options.pay.pay_currency[n.currency]:"")+(n.amount?" "+n.amount:"")+(n.pay_frequency?" per "+n.pay_frequency:""))})}(),o("filter")(e.fields,{name:"pay_is_auto_est"})[0].pseudoconstant=!0,e.subFields={annual_benefits:[{name:"name",title:"Benefit",pseudoconstant:"benefit_name"},{name:"type",title:"Type",pseudoconstant:"benefit_type"},{name:"amount_pct",title:"% amount",pseudoconstant:!1},{name:"amount_abs",title:"Absolute amount",pseudoconstant:!1}],annual_deductions:[{name:"name",title:"Deduction",pseudoconstant:"deduction_name"},{name:"type",title:"Type",pseudoconstant:"deduction_type"},{name:"amount_pct",title:"% amount",pseudoconstant:!1},{name:"amount_abs",title:"Absolute amount",pseudoconstant:!1}]};break;case"pension":o("filter")(e.fields,{name:"is_enrolled"})[0].pseudoconstant=!0}e.urlCSV=h(),e.createPage=function(){var t=(e.currentPage-1)*e.itemsPerPage,n=t+e.itemsPerPage;e.revisionDataListPage=e.revisionDataList.slice(t,n)},e.sortBy=function(t,n){"undefined"!=typeof t&&(e.sortCol==t?e.sortReverse=!e.sortReverse:e.sortCol=t),"undefined"!=typeof n&&(e.sortReverse=n),e.revisionDataList=o("orderBy")(e.revisionDataList,e.sortCol,e.sortReverse)},e.sortBy(),e.toggleFieldsSelected=function(t){t.selected=!t.selected,e.urlCSV=h()},n.opened.then(function(){t.$broadcast("hrjc-loader-hide")}),e.cancel=function(){n.dismiss("cancel")},e.$watch("currentPage",function(){e.createPage()})}])}),define("job-contract/controllers/form/form-general",["common/moment","job-contract/controllers/controllers","common/filters/angular-date/format-date"],function(e,t){"use strict";t.controller("FormGeneralCtrl",["$scope","$log","HR_settings",function(t,n,o){function r(t,n){if(!t||!n)return null;var o,r,i,a;return i=e(n),i.add(1,"days"),a=i.diff(t,"years"),i.add(-a,"years"),r=i.diff(t,"months"),i.add(-r,"months"),o=i.diff(t,"days"),a=a>0?a>1?a+" years ":a+" year ":"",r=r>0?r>1?r+" months ":r+" month ":"",o=o>0?o>1?o+" days":o+" day":"",a+r+o||"0 days"}function i(t,n){return n=n||"min",e(t)["max"===n?"subtract":"add"](1,"day").toDate()}function a(){return{start:{maxDate:c.period_end_date?i(c.period_end_date,"max"):null},end:{minDate:c.period_start_date?i(c.period_start_date,"min"):null}}}n.debug("Controller: FormGeneralCtrl");var c=t.entity.details;t.format=o.DATE_FORMAT,t.datepickerOptions=a(),t.dpOpen=function(e,n){e.preventDefault(),e.stopPropagation(),t[n]=!0},t.$watch("entity.details.period_start_date",function(){t.datepickerOptions.end.minDate=i(c.period_start_date,"min"),t.duration=r(c.period_start_date,c.period_end_date)}),t.$watch("entity.details.period_end_date",function(){c.period_end_date?t.datepickerOptions.start.maxDate=i(c.period_end_date,"max"):(t.datepickerOptions.start.maxDate=null,c.end_reason=null),t.duration=r(c.period_start_date,c.period_end_date)}),t.$watch("entity.details.position",function(e,n){e!==n&&c.title===n&&(t.contractForm.detailsTitle.$setViewValue(e),t.contractForm.detailsTitle.$render())}),t.$watch("entity.details.notice_amount",function(e,n){
+e&&!c.notice_unit&&(t.contractForm.detailsNoticeUnit.$setValidity("required",!1),t.contractForm.detailsNoticeUnit.$dirty=!0),e!==n&&c.notice_amount_employee===n&&(c.notice_amount_employee=e)}),t.$watch("entity.details.notice_amount_employee",function(e){+e&&!c.notice_unit_employee&&(t.contractForm.detailsNoticeUnitEmployee.$setValidity("required",!1),t.contractForm.detailsNoticeUnitEmployee.$dirty=!0)}),t.$watch("entity.details.notice_unit",function(e,t){e!==t&&c.notice_unit_employee===t&&(c.notice_unit_employee=e)})}])}),define("job-contract/vendor/fraction",[],function(){var e=function(t,n){if("undefined"!=typeof t&&n)"number"==typeof t&&"number"==typeof n?(this.numerator=t,this.denominator=n):"string"==typeof t&&"string"==typeof n&&(this.numerator=parseInt(t),this.denominator=parseInt(n));else if("undefined"==typeof n)if(num=t,"number"==typeof num)this.numerator=num,this.denominator=1;else if("string"==typeof num){var o,r,i=num.split(" ");if(i[0]&&(o=i[0]),i[1]&&(r=i[1]),o%1===0&&r&&r.match("/"))return new e(o).add(new e(r));if(!o||r)return;if("string"==typeof o&&o.match("/")){var a=o.split("/");this.numerator=a[0],this.denominator=a[1]}else{if("string"==typeof o&&o.match("."))return new e(parseFloat(o));this.numerator=parseInt(o),this.denominator=1}}this.normalize()};return e.prototype.clone=function(){return new e(this.numerator,this.denominator)},e.prototype.toString=function(){if("NaN"===this.denominator)return"NaN";var e=this.numerator/this.denominator>0?Math.floor(this.numerator/this.denominator):Math.ceil(this.numerator/this.denominator),t=this.numerator%this.denominator,n=this.denominator,o=[];return 0!=e&&o.push(e),0!=t&&o.push((0===e?t:Math.abs(t))+"/"+n),o.length>0?o.join(" "):0},e.prototype.rescale=function(e){return this.numerator*=e,this.denominator*=e,this},e.prototype.add=function(t){var n=this.clone();return t=t instanceof e?t.clone():new e(t),td=n.denominator,n.rescale(t.denominator),t.rescale(td),n.numerator+=t.numerator,n.normalize()},e.prototype.subtract=function(t){var n=this.clone();return t=t instanceof e?t.clone():new e(t),td=n.denominator,n.rescale(t.denominator),t.rescale(td),n.numerator-=t.numerator,n.normalize()},e.prototype.multiply=function(t){var n=this.clone();if(t instanceof e)n.numerator*=t.numerator,n.denominator*=t.denominator;else{if("number"!=typeof t)return n.multiply(new e(t));n.numerator*=t}return n.normalize()},e.prototype.divide=function(t){var n=this.clone();if(t instanceof e)n.numerator*=t.denominator,n.denominator*=t.numerator;else{if("number"!=typeof t)return n.divide(new e(t));n.denominator*=t}return n.normalize()},e.prototype.equals=function(t){t instanceof e||(t=new e(t));var n=this.clone().normalize(),t=t.clone().normalize();return n.numerator===t.numerator&&n.denominator===t.denominator},e.prototype.normalize=function(){var t=function(e){return"number"==typeof e&&(e>0&&e%1>0&&e%1<1||e<0&&e%-1<0&&e%-1>-1)},n=function(e,t){if(t){var n=Math.pow(10,t);return Math.round(e*n)/n}return Math.round(e)};return function(){if(t(this.denominator)){var o=n(this.denominator,9),r=Math.pow(10,o.toString().split(".")[1].length);this.denominator=Math.round(this.denominator*r),this.numerator*=r}if(t(this.numerator)){var o=n(this.numerator,9),r=Math.pow(10,o.toString().split(".")[1].length);this.numerator=Math.round(this.numerator*r),this.denominator*=r}var i=e.gcf(this.numerator,this.denominator);return this.numerator/=i,this.denominator/=i,(this.numerator<0&&this.denominator<0||this.numerator>0&&this.denominator<0)&&(this.numerator*=-1,this.denominator*=-1),this}}(),e.gcf=function(t,n){var o=[],r=e.primeFactors(t),i=e.primeFactors(n);if(r.forEach(function(e){var t=i.indexOf(e);t>=0&&(o.push(e),i.splice(t,1))}),0===o.length)return 1;var a=function(){var e,t=o[0];for(e=1;e<o.length;e++)t*=o[e];return t}();return a},e.primeFactors=function(e){for(var t=Math.abs(e),n=[],o=2;o*o<=t;)t%o===0?(n.push(o),t/=o):o++;return 1!=t&&n.push(t),n},e}),define("job-contract/controllers/form/form-hour",["job-contract/vendor/fraction","job-contract/controllers/controllers"],function(e,t){"use strict";t.controller("FormHourCtrl",["$scope","$rootScope","$filter","$log",function(t,n,o,r){function i(e,n){if(t.hrsTypeDefined=!!c.hours_type,t.hrsAmountDefined=!!c.hours_amount,c.hours_unit=e.periodicity,!t.hrsTypeDefined||t.hrsAmountDefined&&"FULL_TIME"!==u[+n])t.hrsAmountDefined||t.hrsAmountDefined||(c.hours_amount="",c.hours_unit="");else switch(u[+n]){case"FULL_TIME":c.hours_amount=e.standard_hours;break;case"PART_TIME":c.hours_amount=Math.round(e.standard_hours/2);break;case"CASUAL":c.hours_amount=0;break;default:c.hours_amount=""}}function a(n,o){o=parseFloat(o)||0,n=parseFloat(n)||0;var r=new e(o,n);c.fte_num=String(+c.hours_type?r.numerator:0),c.fte_denom=String(+c.hours_type?r.denominator:0),c.hours_fte=String(parseFloat((c.fte_num/c.fte_denom||0).toFixed(2))),t.fteFraction=c.fte_num+"/"+c.fte_denom}r.debug("Controller: FormHourCtrl");var c=t.entity.hour,s=t.utils.hoursLocation,l={},u={0:"CASUAL",4:"PART_TIME",8:"FULL_TIME"};t.hrsTypeDefined=!1,t.hrsAmountDefined=!1,c.location_standard_hours=c.location_standard_hours||"1",l=o("getObjById")(s,c.location_standard_hours),t.$watch("entity.hour.location_standard_hours",function(e){l=o("getObjById")(s,e),i(l,c.hours_type),a(l.standard_hours,c.hours_amount)}),t.$watch("entity.hour.hours_type",function(e,t){e!=t&&(i(l,e),a(l.standard_hours,c.hours_amount))}),t.$watch("entity.hour.hours_amount",function(e,t){e!=t&&a(l.standard_hours,e)}),t.$watch("entity.hour.hours_unit",function(e,t){e!=t&&a(l.standard_hours,c.hours_amount)})}])}),define("job-contract/controllers/form/form-health",["job-contract/controllers/controllers","job-contract/services/contact"],function(e){"use strict";e.controller("FormHealthCtrl",["$scope","ContactService","$log",function(e,t,n){n.debug("Controller: FormHealthCtrl"),e.contacts={Health_Insurance_Provider:[],Life_Insurance_Provider:[]},e.refreshContacts=function(n,o){n&&t.search(n,{contact_type:"Organization",contact_sub_type:o}).then(function(t){e.contacts[o]=t})},e.entity.health.provider&&t.getOne(e.entity.health.provider).then(function(t){e.contacts.Health_Insurance_Provider.push(t)}),e.entity.health.provider_life_insurance&&t.getOne(e.entity.health.provider_life_insurance).then(function(t){e.contacts.Life_Insurance_Provider.push(t)})}])}),define("job-contract/controllers/form/form-pay",["job-contract/controllers/controllers"],function(e){"use strict";e.controller("FormPayCtrl",["$scope","$filter","settings","$log",function(e,t,n,o){function r(){var e=1;switch(+i.pay_cycle){case 1:e=s.Week;break;case 2:e=s.Month;break;case 3:e=s.Biweekly;break;case 4:e=s.Bimonthly}return e}o.debug("Controller: FormPayCtrl");var i=e.entity.pay||{},a={pay_amount:0,pay_currency:n.CRM.defaultCurrency,pay_cycle:"2",pay_unit:"Year"},c=e.utils.payScaleGrade,s={Year:1,Month:12,Bimonthly:24,Week:52,Biweekly:104,Fortnight:26,Day:260,Hour:2080};i.is_paid=i.is_paid||0,i.pay_is_auto_est="0",i.annual_benefits=i.annual_benefits||[],i.annual_deductions=i.annual_deductions||[],e.collapseBenDed=!i.annual_benefits.length&&!i.annual_deductions.length,e.benefits_per_cycle=(0).toFixed(2),e.benefits_per_cycle_net=0,e.deductions_per_cycle=(0).toFixed(2),e.add=function(e){e.push({name:"",type:"",amount_pct:"",amount_abs:""})},e.applyPayScaleGradeData=function(){if(i.pay_scale){var e=t("getObjById")(c,i.pay_scale);i.pay_amount=e.amount||a.pay_amount,i.pay_currency=e.currency||a.pay_currency,i.pay_unit=e.pay_frequency||a.pay_unit}},e.calcAnnualPayEst=function(){+i.is_paid&&(i.pay_annualized_est=(i.pay_amount*s[i.pay_unit]||0).toFixed(2))},e.calcBenefitsPerCycle=function(){if(+i.is_paid){var t=0,n=i.annual_benefits.length,o=0;for(t;t<n;t++)2==+i.annual_benefits[t].type&&(i.annual_benefits[t].amount_abs=(i.annual_benefits[t].amount_pct/100*i.pay_annualized_est).toFixed(2)),o+=+i.annual_benefits[t].amount_abs;e.benefits_per_cycle=(o/r()).toFixed(2)}},e.calcBenefitsPerCycleNet=function(){+i.is_paid&&(e.benefits_per_cycle_net=e.benefits_per_cycle-e.deductions_per_cycle)},e.calcDeductionsPerCycle=function(){if(+i.is_paid){var t=0,n=i.annual_deductions.length,o=0;for(t;t<n;t++)2==+i.annual_deductions[t].type&&(i.annual_deductions[t].amount_abs=(i.annual_deductions[t].amount_pct/100*i.pay_annualized_est).toFixed(2)),o+=+i.annual_deductions[t].amount_abs;e.deductions_per_cycle=(o/r()).toFixed(2)}},e.calcPayPerCycleGross=function(){+i.is_paid&&(i.pay_per_cycle_gross=(i.pay_annualized_est/r()).toFixed(2))},e.calcPayPerCycleNet=function(){+i.is_paid&&(i.pay_per_cycle_net=(+i.pay_per_cycle_gross+ +e.benefits_per_cycle_net).toFixed(2))},e.resetData=function(){i.pay_scale="",i.pay_amount="",i.pay_unit="",i.pay_currency="",i.pay_annualized_est="",i.pay_is_auto_est="",i.annual_benefits=[],i.annual_deductions=[],i.pay_cycle="",i.pay_per_cycle_gross="",i.pay_per_cycle_net="",e.benefits_per_cycle="",e.deductions_per_cycle=""},e.setDefaults=function(){i.pay_cycle=a.pay_cycle,i.pay_currency=a.pay_currency,i.pay_is_auto_est="0",i.pay_amount=(0).toFixed(2)},e.remove=function(e,t){e.splice(t,1)},e.$watch("entity.pay.pay_amount",e.calcAnnualPayEst),e.$watch("entity.pay.pay_unit",e.calcAnnualPayEst),e.$watch("entity.pay.pay_annualized_est",function(){e.calcPayPerCycleGross(),e.calcBenefitsPerCycle(),e.calcDeductionsPerCycle()}),e.$watch("entity.pay.annual_benefits",e.calcBenefitsPerCycle,!0),e.$watch("entity.pay.annual_deductions",e.calcDeductionsPerCycle,!0),e.$watch("benefits_per_cycle",e.calcBenefitsPerCycleNet),e.$watch("deductions_per_cycle",e.calcBenefitsPerCycleNet),e.$watch("benefits_per_cycle_net",e.calcPayPerCycleNet),e.$watch("entity.pay.pay_per_cycle_gross",e.calcPayPerCycleNet)}])}),define("job-contract/controllers/form/form-pension",["job-contract/controllers/controllers","job-contract/services/contact"],function(e){"use strict";e.controller("FormPensionCtrl",["$scope","settings","ContactService","$log",function(e,t,n,o){o.debug("Controller: FormPensionCtrl"),e.contacts={Pension_Provider:[]},function(){e.entity.pension.pension_type&&n.getOne(e.entity.pension.pension_type).then(function(t){e.contacts.Pension_Provider.push(t)})}(),e.refreshContacts=function(t,o){t&&n.search(t,{contact_type:"Organization",contact_sub_type:o}).then(function(t){e.contacts[o]=t})}}])}),define("job-contract/controllers/form/form-leave",["common/lodash","job-contract/controllers/controllers"],function(e,t){"use strict";t.controller("FormLeaveCtrl",["$scope","$log","UtilsService",function(t,n,o){function r(){i(),a()}function i(){o.getNumberOfPublicHolidaysInCurrentPeriod().then(function(e){s.numberOfPublicHolidays=e})}function a(){t.$watch("entity.leave",c,!0)}function c(t,n){var o=e.find(t,function(e,t){return e.add_public_holidays&&!n[t].add_public_holidays});o&&t.forEach(function(e){e.leave_type!=o.leave_type&&(e.add_public_holidays=!1)})}n.debug("Controller: FormLeaveCtrl");var s={};return s.numberOfPublicHolidays=0,r(),s}])}),define("job-contract/directives/directives",["common/angular"],function(e){"use strict";return e.module("hrjc.directives",[])}),define("job-contract/directives/contact",["job-contract/directives/directives"],function(e){"use strict";e.directive("hrjcContact",["$compile","ContactService","settings","$log",function(e,t,n,o){return o.debug("Directive: hrjcContact"),{restrict:"A",scope:{renderAsLink:"=?hrjcContactLink",contactId:"=?hrjcContact"},template:"{{contact.label}}",link:function(n,o){n.contactId&&n.$watch("contactId",function(r){t.getOne(n.contactId).then(function(t){n.contact=t,n.renderAsLink&&(o.html('<a ng-href="/civicrm/contact/view?reset=1&cid={{contactId}}">{{contact.label}}</a>'),e(o.contents())(n))})})}}}])}),define("job-contract/directives/loader",["job-contract/directives/directives"],function(e){"use strict";e.directive("hrjcLoader",["$rootScope","$log",function(e,t){return t.debug("Directive: hrjcLoader"),{link:function(e,t,n){function o(){var e=window.getComputedStyle(t[0]).position;return"relative"==e||"absolute"==e||"fixed"==e}function r(){o()||(t.css("position","relative"),s=!0),t.append(a),c=!0}function i(){c&&a.parentNode.removeChild(a),c=!1,s&&t.css("position","")}var a=document.createElement("div"),c=!1,s=!1;a.className="hrjc-loader",n.hrjcLoaderShow&&r(),e.$on("hrjc-loader-show",function(){r()}),e.$on("hrjc-loader-hide",function(){i()})}}}])}),define("job-contract/directives/number",["job-contract/directives/directives"],function(e){"use strict";e.directive("hrjcNumber",["$log",function(e){return e.debug("Directive: hrjcNumber"),{require:"ngModel",link:function(e,t,n,o){var r=2,i=n.hrjcNumberFloat||!1;n.hrjcNumber&&"number"==typeof+n.hrjcNumber&&(r=n.hrjcNumber),t.bind("blur",function(){var e=parseFloat(o.$viewValue)||0;o.$setViewValue(i?Math.round(100*e)/100:e.toFixed(r)),o.$render()})}}}])}),define("job-contract/directives/validate",["job-contract/directives/directives"],function(e){"use strict";e.directive("hrjcValidate",["$log",function(e){return e.debug("Directive: hrjcValidate"),{restrict:"A",require:"^form",scope:{isWarning:"=?hrjcValidateWarning"},link:function(e,t,n,o){function r(e,n){t.toggleClass("has-success",!e&&!n),d.toggleClass("glyphicon-ok",!e&&!n)}function i(e,n){t.toggleClass("has-warning",!e&&n),d.toggleClass("glyphicon-warning-sign",!e&&n)}function a(e){t.toggleClass("has-error",e),d.toggleClass("glyphicon-remove",e)}var c=t[0].querySelector("[name]"),s=angular.element(c),l=s.attr("name"),u=document.createElement("span"),d=angular.element(u);l&&(t.addClass("has-feedback"),d.addClass("glyphicon form-control-feedback"),s.after(d),e.$watch(function(){return o[l]&&o[l].$invalid},function(t){o[l].$dirty&&(r(t,e.isWarning),a(t))}),"undefined"!=typeof e.isWarning&&e.$watch("isWarning",function(e){var t=o[l].$invalid;o[l].$dirty&&(r(t,e),i(t,e))}),s.bind("blur",function(){a(o[l].$invalid)}))}}}])}),define("job-contract/filters/capitalize",["job-contract/filters/filters"],function(e){"use strict";e.filter("capitalize",["$log",function(e){return e.debug("Filter: capitalize"),function(e){return e?e.replace(/([^\W_]+[^\s-]*) */g,function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()}):""}}])}),define("job-contract/filters/format-amount",["job-contract/filters/filters"],function(e){"use strict";e.filter("formatAmount",["$log",function(e){return e.debug("Filter: formatAmount"),function(e){return e&&e.indexOf(".")===-1?e+".00":e}}])}),define("job-contract/filters/format-period",["job-contract/filters/filters"],function(e){"use strict";e.filter("formatPeriod",["$filter","$log",function(e,t){return t.debug("Filter: formatPeriod"),function(t){return t?e("date")(t,"yyyy/MM/dd"):"Unspecified"}}])}),define("job-contract/filters/parse-int",["job-contract/filters/filters"],function(e){"use strict";e.filter("parseInt",["$log",function(e){return e.debug("Filter: parseInt"),function(e){return e?parseInt(e):null}}])}),define("job-contract/services/contract-revision-list",["common/lodash","job-contract/services/services"],function(e,t){"use strict";t.factory("ContractRevisionList",["$filter","$q","$log","ContractService","ContractFilesService","ContractRevisionService",function(t,n,o,r,i,a){function c(e){return{details:{position:e["details_revision_id.position"],location:e["details_revision_id.location"]},hour:{hours_type:e["hour_revision_id.hours_type"]},pay:{pay_annualized_est:e["pay_revision_id.pay_annualized_est"],pay_currency:e["pay_revision_id.pay_currency"],pay_scale:e["pay_revision_id.pay_scale"]}}}function s(t){return t.effective_date=t.effective_date||"",n.all({files:{details:i.get(t.details_revision_id,"civicrm_hrjobcontract_details")},aggregated:a.get({action:"getsingle",json:{sequential:1,id:t.id,return:["details_revision_id.position","details_revision_id.location","hour_revision_id.hours_type","pay_revision_id.pay_scale","pay_revision_id.pay_annualized_est","pay_revision_id.pay_currency"]}}).$promise.then(function(e){return e})}).then(function(n){return e.assign({revisionEntityIdObj:t,files:n.files},c(n.aggregated))})}function l(e){var o=[],i=[],a=n.defer();return r.getRevision(e).then(function(e){return o=t("orderBy")(e,["-effective_date","-id"]),n.all(o.map(s))}).then(function(e){i=e,a.resolve({revisionList:o,revisionDataList:e})}),a.promise}return o.debug("Service: ContractRevisionList"),{fetchRevisions:l}}])}),function(e,t){function n(){var e={nodiff:"",year:"year",years:"years",month:"month",months:"months",day:"day",days:"days",hour:"hour",hours:"hours",minute:"minute",minutes:"minutes",second:"second",seconds:"seconds",delimiter:" "};moment.fn.preciseDiff=function(e){return moment.preciseDiff(this,e)},moment.preciseDiff=function(t,n){function o(t,n){return t+" "+e[n+(1===t?"":"s")]}var r=moment(t),i=moment(n);if(r.isSame(i))return e.nodiff;if(r.isAfter(i)){var a=r;r=i,i=a}var c=i.year()-r.year(),s=i.month()-r.month(),l=i.date()-r.date();if(l<0){var u=moment(i.year()+"-"+(i.month()+1),"YYYY-MM").subtract("months",1).daysInMonth();l=u<r.date()?u+l+(r.date()-u):u+l,s--}s<0&&(s=12+s,c--);var d=[];return c&&d.push(o(c,"year")),s&&(c&&d.push(","),d.push(o(s,"month"))),l&&(s&&d.push("and"),d.push(o(l,"day"))),d.join(e.delimiter)}}function o(t,o,r){moment.preciseDiff||n();var i=moment(t,"MMMM DD, YYYY"),a="";if(o)var c=moment(o,"MMMM DD, YYYY");var s=moment();if(o)var l=c.diff(s,"days");else var l=s.diff(i,"days");a=l<0?moment.preciseDiff(i,c):moment().preciseDiff(i);var u=s.diff(i,"days");u<=0&&(a="0 days"),e("#initial_join_date").remove();var d="<div class='crm-summary-row' id='initial_join_date'><div class='crm-label'>Length Of Employment</div><div class='crm-content crm-custom-data lengthEmployment'></div></div>";e("#custom-set-content-"+r+" .crm-inline-block-content").append(d),e(".lengthEmployment").html(a),o&&l<0&&e(".lengthEmployment").css({color:"#FF0000"})}var r=CRM.grID,i=e("#custom-set-content-"+r+" .crm-inline-block-content div:nth-child(2) .crm-custom-data").html(),a=e("#custom-set-content-"+r+" .crm-inline-block-content div:nth-child(3) .crm-custom-data").html();i&&o(i,a,r),e(document).on("click","#_qf_CustomData_upload",function(){e(document).ajaxSuccess(function(t,n,i){i.extraData&&"CRM_Contact_Form_Inline_CustomData"==i.extraData.class_name&&i.extraData.groupID==r&&setTimeout(function(){var t=e("#custom-set-content-"+r+" .crm-inline-block-content div:nth-child(2) .crm-custom-data").html(),n=e("#custom-set-content-"+r+" .crm-inline-block-content div:nth-child(3) .crm-custom-data").html();t&&o(t,n,r)},300)})})}(CRM.$,CRM._),define("job-contract/app",["common/angular","common/ui-select","common/services/dom-event-trigger","common/services/angular-date/date-format","common/modules/routers/compu-ng-route","common/modules/directives","common/directives/angular-date/date-input","job-contract/controllers/controllers","job-contract/controllers/contract-list","job-contract/controllers/contract","job-contract/controllers/revision-list","job-contract/controllers/modal/modal-change-reason","job-contract/controllers/modal/modal-contract","job-contract/controllers/modal/modal-contract-new","job-contract/controllers/modal/modal-dialog","job-contract/controllers/modal/modal-progress","job-contract/controllers/modal/modal-revision","job-contract/controllers/form/form-general","job-contract/controllers/form/form-hour","job-contract/controllers/form/form-health","job-contract/controllers/form/form-pay","job-contract/controllers/form/form-pension","job-contract/controllers/form/form-leave","job-contract/directives/directives","job-contract/directives/contact","job-contract/directives/directives","job-contract/directives/loader","job-contract/directives/number","job-contract/directives/validate","job-contract/filters/filters","job-contract/filters/capitalize","job-contract/filters/get-obj-by-id","job-contract/filters/format-amount","job-contract/filters/format-period","job-contract/filters/parse-int","job-contract/services/services","job-contract/services/contract","job-contract/services/contract-revision-list","job-contract/vendor/job-summary"],function(e){"use strict";e.module("hrjc",["ngAnimate","compuNgRoute","ngResource","angularFileUpload","ui.bootstrap","ui.select","common.angularDate","common.services","common.directives","hrjc.controllers","hrjc.directives","hrjc.filters","hrjc.services"]).constant("settings",{classNamePrefix:"hrjc-",contactId:CRM.jobContractTabApp.contactId,debug:+CRM.debug,pathApp:CRM.jobContractTabApp.path,pathFile:CRM.url("civicrm/hrjobcontract/file/"),pathReport:CRM.url("civicrm/report/hrjobcontract/summary"),pathRest:CRM.url("civicrm/ajax/rest"),pathTpl:CRM.jobContractTabApp.path+"views/",CRM:{options:CRM.FieldOptions||{},defaultCurrency:CRM.jobContractTabApp.defaultCurrency,apiTsFmt:"YYYY-MM-DD HH:mm:ss",fields:CRM.jobContractTabApp.fields,maxFileSize:CRM.jobContractTabApp.maxFileSize}}).config(["settings","$routeProvider","$resourceProvider","$logProvider","$httpProvider","uibDatepickerConfig","uiSelectConfig",function(e,t,n,o,r,i,a){o.debugEnabled(e.debug),t.resolveForAll({format:["DateFormat",function(e){return e.getDateFormat()}]}).when("/",{controller:"ContractListCtrl",templateUrl:e.pathApp+"views/contractList.html",resolve:{contractList:["ContractService",function(e){return e.get()}]}}).otherwise({redirectTo:"/"}),n.defaults.stripTrailingSlashes=!1,r.defaults.headers.common["X-Requested-With"]="XMLHttpRequest",a.theme="bootstrap",i.showWeeks=!1}]).run(["settings","$rootScope","$q","$log","ContractService","ContractDetailsService","ContractHourService","ContractPayService","ContractLeaveService","ContractHealthService","ContractPensionService",function(e,t,n,o,r,i,a,c,s,l,u){o.debug("app.run"),t.pathTpl=e.pathTpl,t.prefix=e.classNamePrefix,n.all({contract:r.getRevisionOptions(),details:i.getOptions(),hour:a.getOptions(),pay:c.getOptions(),leave:s.getOptions(),health:l.getOptions(),pension:u.getOptions()}).then(function(e){e.pay.pay_is_auto_est=["No","Yes"],e.pension.is_enrolled=["No","Yes","Opted out"],o.debug("OPTIONS:"),o.debug(e),t.options=e})}])}),function(e,t){var n=e.jobContractTabApp.path+"js/src/job-contract";t.config({urlArgs:"bust="+(new Date).getTime(),paths:{"job-contract":n,"job-contract/vendor/fraction":n+"/vendor/fraction","job-contract/vendor/job-summary":n+"/vendor/jobsummary"},shim:{"job-contract/vendor/job-summary":{deps:["common/moment"]}}}),t(["job-contract/app"],function(){"use strict";document.dispatchEvent("function"==typeof window.CustomEvent?new CustomEvent("hrjcReady"):function(){var e=document.createEvent("Event");return e.initEvent("hrjcReady",!0,!0),e}())})}(CRM,require);
>>>>>>> PCHR-2373: Fix semistandard issues
