!function(t,o){function n(o){o?(t(".crm-summary-contactname-block").removeClass("crm-summary-contactname-block-without-contract"),o.position&&t(".crm-contact-detail-position").html("<strong>Position:</strong> "+o.position),o.location&&t(".crm-contact-detail-location").html("<strong>Normal place of work:</strong> "+o.location)):(t(".crm-summary-contactname-block").addClass("crm-summary-contactname-block-without-contract"),t(".crm-contact-detail-position").html(""),t(".crm-contact-detail-location").html(""),c(null))}function c(o){o&&o.departments&&o.departments.length>0?t(".crm-contact-detail-departments").html("<strong>Department:</strong> "+o.departments.join(", ")):t(".crm-contact-detail-departments").html("")}t(document).on("crmLoad",function(o){t(".crm-inline-edit").one("DOMSubtreeModified",function(){var o=t(this).find("form");1===o.length&&o.find("label").each(function(){var o=t(this),n=o.attr("for");t("#"+n).attr("placeholder",o.text())})})}).on("updateContactHeader",function(t,o){void 0!==o.contract&&n(o.contract),void 0!==o.roles&&c(o.roles)})}(CRM.$,CRM._);
!function(t,e){function a(){var e=t(".crm-link-home");_(e,d(e,C(e)))}function n(){t.ajax("/civicrm/hrcore/usermenu?snippet=4",{dataType:"html",success:function(t){f(t,"civihr-menu")}})}function o(){if(CRM.cid&&CRM.hideGId){var e=t(".Inline_Custom_Data");e.appendTo(t("#contactinfo-block").parent("div").parent("div")),e.removeClass("crm-collapsible"),e.removeClass("collapsed"),e.addClass("crm-summary-block"),t(".Inline_Custom_Data div.collapsible-title").css({display:"none"}),t(".Inline_Custom_Data div.crm-summary-block").css({display:"block"})}t("#customFields").length<1&&(t("#Inline_Custom_Data label").each(function(){t("#nick_name").parent().after('<td id="customFields"></td>');var e=t(this).attr("for"),a=t("#"+e).detach();t("#customFields").append(t(this)),t("#customFields").append(a)}),t("#Inline_Custom_Data").remove())}function i(e){1===t(e).length&&t(e).on("change",u)}function c(){t(".CRM_HRRecruitment_Form_Application").addClass("crm-form-block"),t(".CRM_HRRecruitment_Form_Application .crm-profile-name-application_profile").addClass("form-layout-compressed")}function r(e){"contactForm"!==CRM.formName&&"viewSummary"!==CRM.pageName||(t(".crm-contact-job_title",".crm-summary-contactinfo-block").length&&t(".crm-contact-tabs-list #tab_summary a",e.target).text("Personal Details"),o(e.target),h(e.target))}function m(){1===t(".CRM_HRRecruitment_Form_HRVacancy").length&&(p(t('label[for="start_date"]').parents("tr")),p(t('label[for="end_date"]').parents("tr")),t('[name="entryURL"]').val().indexOf(";template=1")>-1&&t(t(".CRM_HRRecruitment_Form_HRVacancy tbody").get(0)).addClass("CRM_HRRecruitment_Form_HRVacancy_Template"))}function l(){t("#activityCustomData").attr("colspan",3),t("#crm-activity-view-table .crm-case-activity-view-Client .label").html("Contact"),t("span.crm-frozen-field",".crm-profile-name-hrident_tab").closest("div").parent("div").hide(),t(".crm-accordion-header.crm-master-accordion-header").on("click",function(){window.setTimeout(function(){Array.prototype.forEach.call(document.querySelectorAll(".listing-box"),function(t){Ps.initialize(t)})},0)})}function s(){t("INPUT#contact_source").parent("td").children("a").click(function(){t("#crm-notification-container .crm-help .notify-content").remove(),t("#crm-notification-container .crm-help p").length&&t("#crm-notification-container .crm-help p").remove(),t("#crm-notification-container .crm-help").append("<p>Source is a useful field where data has been migrated to CiviHR from one or a number of other legacy systems. The Source field will indicate which legacy system the contact has come from.</p>")})}function d(e,a){return t("li > a",e).first().text("Home").wrapInner('<span class="menumain-label">').prepend(a)}function f(e,a){var n=t(e),o=t("<div>");o.attr("id",a),o.append(t("#civicrm-menu")),o.append(n),o.insertAfter("#page")}function u(){var e=t(this)[0].files[0];t("#js-uploaded-file").remove(),void 0!==e&&(t(this).after('<span id="js-uploaded-file" class="uploaded-file">'+e.name+' <span class="uploaded-file-icon-trash"><i class="fa fa-trash-o"></i> Remove</span>'),t(".uploaded-file-icon-trash").on("click",v))}function p(t){t.find("label").attr("for",t.find(".crm-form-date").attr("id"))}function h(e){t("div.crm-contact-current_employer, div.crm-contact-job_title",".crm-summary-contactinfo-block").parent("div.crm-summary-row").hide(),t("form#ContactInfo input#employer_id, form#ContactInfo input#job_title",e).closest("div.crm-summary-row").hide(),t("input#employer_id, input#job_title","form#Contact").parent("td").hide(),t(".HRJobContract_Summary",e).insertBefore(t(".crm-summary-contactinfo-block")),t("div.email-signature, td#Email-Bulkmail-html","form#Contact").hide(),t("#Email-Primary","form#Contact").prev("td").prev("td").hide(),t("td#Email-Bulkmail-html, #Email-Primary","form#Contact").prev("td").hide(),t(".crm-demographics-accordion","form#Contact").insertAfter(t(".crm-contactDetails-accordion")),t("tr#Phone_Block_2","form#Contact").length<1&&t("#addPhone").click()}function v(){var e=t("#js-uploaded-file").parent().find('input[type="file"]');t("#js-uploaded-file").remove(),e.val("")}function _(t,e){t.off().find("#civicrm-home").before(e).remove()}function C(e){return t(".crm-logo-sm",e).addClass("chr_logo chr_logo--default-color").removeClass("crm-logo-sm").wrap('<span class="menumain-icon">').parent()}function y(){t(".menumain").not(".crm-Self_Service_Portal").hover(function(){t(this).addClass("activetarget")},function(){t(this).removeClass("activetarget")})}function b(){t("#root-menu-div .menu-item-arrow").each(function(e){var a=t(this);a.before('<i class="fa fa-caret-right menu-item-arrow"></i>'),a.remove()})}t(document).on("crmLoad",function(t){i("input[type='file']"),m(),r(t),l(),s()}).ready(function(){n(),a(),c(),b(),y()})}(CRM.$,CRM._);
!function(t){"use strict";var n=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;t.fn.attrchange=function(t){if(n){var e={subtree:!1,attributes:!0},i=new n(function(n){n.forEach(function(n){t.call(n.target,n)})});return this.each(function(){i.observe(this,e)})}}}(CRM.$);
!function(n){"use strict";var i=n("body");i.on("click",".btn-slide",function(){function t(){n(".civihr-popup").remove(),i.removeClass("civihr-popup-open")}function o(){var n=s.offset(),t=p.clone(!0).appendTo(i).addClass("civihr-popup");t.css({left:+n.left-(t.width()-s.outerWidth()),top:+n.top+s.outerHeight()}),t.show(),a(t)}function c(){s.data("attrchange-is-on")||(s.data("attrchange-is-on",!0),s.attrchange(function(){s.hasClass("btn-slide-active")||t()}))}function a(i){i.find("a").click(function(){var i=n(this).parent().index();p.find("li:nth("+i+") a").click()})}function e(){t(),o(),i.addClass("civihr-popup-open")}var s=n(this),p=s.children("ul.panel");!function(){e(),c()}()})}(CRM.$);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
