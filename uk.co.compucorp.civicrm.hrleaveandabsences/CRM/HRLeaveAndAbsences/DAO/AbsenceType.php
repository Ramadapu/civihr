<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2018
 *
 * Generated from xml/schema/CRM/HRLeaveAndAbsences/AbsenceType.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:de0f1c860ed7c16fb51779aa4e94cb45)
 */

/**
 * Database access object for the AbsenceType entity.
 */
class CRM_HRLeaveAndAbsences_DAO_AbsenceType extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_hrleaveandabsences_absence_type';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  static $_log = TRUE;

  /**
   * Unique AbsenceType ID
   *
   * @var int unsigned
   */
  public $id;

  /**
   * The AbsenceType title. There can't be more than one entity with the same title
   *
   * @var string
   */
  public $title;

  /**
   * The weight value is used to order the types on a list
   *
   * @var int unsigned
   */
  public $weight;

  /**
   * The color hex value (including the #) used to display this type on a calendar
   *
   * @var string
   */
  public $color;

  /**
   * There can only be one default entity at any given time
   *
   * @var boolean
   */
  public $is_default;

  /**
   * Reserved entities are used by internal calculations and cannot be deleted.
   *
   * @var boolean
   */
  public $is_reserved;

  /**
   * @var float
   */
  public $max_consecutive_leave_days;

  /**
   * Can only be one of the values defined in AbsenceType::REQUEST_CANCELATION_OPTIONS
   *
   * @var int unsigned
   */
  public $allow_request_cancelation;

  /**
   * @var boolean
   */
  public $allow_overuse;

  /**
   * @var boolean
   */
  public $must_take_public_holiday_as_leave;

  /**
   * The number of days entitled for this type
   *
   * @var float
   */
  public $default_entitlement;

  /**
   * @var boolean
   */
  public $add_public_holiday_to_entitlement;

  /**
   * Only enabled types can be requested
   *
   * @var boolean
   */
  public $is_active;

  /**
   * @var boolean
   */
  public $allow_accruals_request;

  /**
   * Value is the number of days that can be accrued. Null means unlimited
   *
   * @var float
   */
  public $max_leave_accrual;

  /**
   * @var boolean
   */
  public $allow_accrue_in_the_past;

  /**
   * An amount of accrual_expiration_unit
   *
   * @var int unsigned
   */
  public $accrual_expiration_duration;

  /**
   * The unit (months or days) of accrual_expiration_duration of this type default expiry
   *
   * @var int unsigned
   */
  public $accrual_expiration_unit;

  /**
   * @var boolean
   */
  public $allow_carry_forward;

  /**
   * @var float
   */
  public $max_number_of_days_to_carry_forward;

  /**
   * An amount of carry_forward_expiration_unit
   *
   * @var int unsigned
   */
  public $carry_forward_expiration_duration;

  /**
   * The unit (months or days) of carry_forward_expiration_duration of this type default expiry
   *
   * @var int unsigned
   */
  public $carry_forward_expiration_unit;

  /**
   * A flag which is used to determine if this Absence Type can be used for a Sickness Request
   *
   * @var boolean
   */
  public $is_sick;

  /**
   * One of the values of the Absence type calculation units option group
   *
   * @var string
   */
  public $calculation_unit;

  /**
   * @var boolean
   */
  public $hide_label;

  /**
   * This is used for grouping leave types.
   *
   * @var int unsigned
   */
  public $category;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_hrleaveandabsences_absence_type';
    parent::__construct();
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Unique AbsenceType ID',
          'required' => TRUE,
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'title' => [
          'name' => 'title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Title'),
          'description' => 'The AbsenceType title. There can\'t be more than one entity with the same title',
          'required' => TRUE,
          'maxlength' => 127,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'weight' => [
          'name' => 'weight',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Weight'),
          'description' => 'The weight value is used to order the types on a list',
          'required' => TRUE,
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'color' => [
          'name' => 'color',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Colour'),
          'description' => 'The color hex value (including the #) used to display this type on a calendar',
          'required' => TRUE,
          'maxlength' => 7,
          'size' => CRM_Utils_Type::EIGHT,
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'is_default' => [
          'name' => 'is_default',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Is default?'),
          'description' => 'There can only be one default entity at any given time',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'is_reserved' => [
          'name' => 'is_reserved',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Is reserved?'),
          'description' => 'Reserved entities are used by internal calculations and cannot be deleted.',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'max_consecutive_leave_days' => [
          'name' => 'max_consecutive_leave_days',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Duration of consecutive leave permitted to be taken at once'),
          'precision' => [
            20,
            2
          ],
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'allow_request_cancelation' => [
          'name' => 'allow_request_cancelation',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Can staff cancel requests for this leave type after they have been made?'),
          'description' => 'Can only be one of the values defined in AbsenceType::REQUEST_CANCELATION_OPTIONS',
          'required' => TRUE,
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'allow_overuse' => [
          'name' => 'allow_overuse',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Can employee apply for this leave type even if they have used up their entitlement for the year?'),
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'must_take_public_holiday_as_leave' => [
          'name' => 'must_take_public_holiday_as_leave',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Must staff take public holiday as leave'),
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'default_entitlement' => [
          'name' => 'default_entitlement',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Default entitlement'),
          'description' => 'The number of days entitled for this type',
          'required' => TRUE,
          'precision' => [
            20,
            2
          ],
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'add_public_holiday_to_entitlement' => [
          'name' => 'add_public_holiday_to_entitlement',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('By default should public holiday be added to the default entitlement?'),
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Is enabled?'),
          'description' => 'Only enabled types can be requested',
          'default' => '1',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'allow_accruals_request' => [
          'name' => 'allow_accruals_request',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Allow staff to request to accrue additional days leave of this type during the period'),
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'max_leave_accrual' => [
          'name' => 'max_leave_accrual',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Maximum amount of leave that can be accrued of this absence type during a period'),
          'description' => 'Value is the number of days that can be accrued. Null means unlimited',
          'precision' => [
            20,
            2
          ],
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'allow_accrue_in_the_past' => [
          'name' => 'allow_accrue_in_the_past',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Can staff request to accrue leave for dates in the past?'),
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'accrual_expiration_duration' => [
          'name' => 'accrual_expiration_duration',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Default expiry of accrued amounts'),
          'description' => 'An amount of accrual_expiration_unit',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'accrual_expiration_unit' => [
          'name' => 'accrual_expiration_unit',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Accrual Expiration Unit'),
          'description' => 'The unit (months or days) of accrual_expiration_duration of this type default expiry',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'allow_carry_forward' => [
          'name' => 'allow_carry_forward',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Allow leave of this type to be carried forward from one period to another?'),
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'max_number_of_days_to_carry_forward' => [
          'name' => 'max_number_of_days_to_carry_forward',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => ts('Maximum number of days that can be carried forward to a new period?'),
          'precision' => [
            20,
            2
          ],
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'carry_forward_expiration_duration' => [
          'name' => 'carry_forward_expiration_duration',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Carried forward leave expiry'),
          'description' => 'An amount of carry_forward_expiration_unit',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'carry_forward_expiration_unit' => [
          'name' => 'carry_forward_expiration_unit',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Carry Forward Expiration Unit'),
          'description' => 'The unit (months or days) of carry_forward_expiration_duration of this type default expiry',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'is_sick' => [
          'name' => 'is_sick',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'description' => 'A flag which is used to determine if this Absence Type can be used for a Sickness Request',
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'calculation_unit' => [
          'name' => 'calculation_unit',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Calculation Unit'),
          'description' => 'One of the values of the Absence type calculation units option group',
          'required' => TRUE,
          'maxlength' => 512,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
          'pseudoconstant' => [
            'optionGroupName' => 'hrleaveandabsences_absence_type_calculation_unit',
            'optionEditPath' => 'civicrm/admin/options/hrleaveandabsences_absence_type_calculation_unit',
          ]
        ],
        'hide_label' => [
          'name' => 'hide_label',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('This controls the visibility of the Leave Type label in the calendar and feeds.'),
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
        'category' => [
          'name' => 'category',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Category'),
          'description' => 'This is used for grouping leave types.',
          'required' => TRUE,
          'table_name' => 'civicrm_hrleaveandabsences_absence_type',
          'entity' => 'AbsenceType',
          'bao' => 'CRM_HRLeaveAndAbsences_DAO_AbsenceType',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'hrleaveandabsences_absence_type', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'hrleaveandabsences_absence_type', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
