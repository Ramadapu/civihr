eval("/* eslint-env amd */\n\n(function (CRM) {\n  define('leave-absences/shared/modules/shared-settings',[\n    'common/angular'\n  ], function (angular) {\n    return angular.module('leave-absences.settings', []).constant('shared-settings', {\n      attachmentToken: CRM.vars.leaveAndAbsences.attachmentToken,\n      debug: CRM.debug,\n      managerPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/manager-leave/',\n      sharedPathTpl: CRM.vars.leaveAndAbsences.baseURL + '/views/shared/',\n      serverDateFormat: 'YYYY-MM-DD',\n      serverDateTimeFormat: 'YYYY-MM-DD HH:mm:ss',\n      permissions: {\n        admin: {\n          access: 'access leave and absences',\n          administer: 'administer leave and absences'\n        },\n        ssp: {\n          access: 'access leave and absences in ssp',\n          manage: 'manage leave and absences in ssp'\n        }\n      },\n      fileUploader: {\n        queueLimit: 10\n      },\n      statusNames: {\n        approved: 'approved',\n        adminApproved: 'admin_approved',\n        awaitingApproval: 'awaiting_approval',\n        moreInformationRequired: 'more_information_required',\n        rejected: 'rejected',\n        cancelled: 'cancelled'\n      }\n    });\n  });\n})(CRM);\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/shared-settings.js"),eval("define('leave-absences/shared/modules/apis',[\n  'common/angular',\n  'common/modules/apis',\n  'leave-absences/shared/modules/shared-settings',\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.apis', [\n    'common.apis',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/apis.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models-instances',[\n  'common/angular',\n  'common/models/instances/instance',\n  'common/modules/services',\n  'common/modules/models',\n  'common/services/check-permissions',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models.instances', [\n    'common.models',\n    'common.models.instances',\n    'common.services',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/models-instances.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/models',[\n  'common/angular',\n  'common/modules/models',\n  'common/modules/services',\n  'leave-absences/shared/modules/apis',\n  'leave-absences/shared/modules/models-instances',\n  'leave-absences/shared/modules/shared-settings'\n], function (angular) {\n  'use strict';\n\n  return angular.module('leave-absences.models', [\n    'common.models',\n    'common.services',\n    'leave-absences.apis',\n    'leave-absences.models.instances',\n    'leave-absences.settings'\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/models.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/modules/components',[\n  'common/angular',\n  'common/modules/directives',\n  'common/modules/models',\n  './shared-settings',\n  './models'\n], function (angular) {\n  return angular.module('leave-absences.components', [\n    'common.directives',\n    'common.models',\n    'leave-absences.settings',\n    'leave-absences.models'\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/modules/components.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/instances/absence-period.instance',[\n  'leave-absences/shared/modules/models-instances',\n  'common/moment',\n  'common/models/instances/instance',\n  'common/services/hr-settings'\n], function (instances, moment) {\n  'use strict';\n\n  instances.factory('AbsencePeriodInstance', ['$log', 'ModelInstance', 'HR_settings',\n    function ($log, ModelInstance, HRSettings) {\n      $log.debug('AbsencePeriodInstance');\n\n      return ModelInstance.extend({\n        /**\n         * Returns the default custom data (as in, not given by the API)\n         * with its default values\n         *\n         * @return {object}\n         */\n        defaultCustomData: function () {\n          return {\n            current: false\n          };\n        },\n        /**\n         * Sets the current property of this absence period on instantiation.\n         *\n         * @return {object} updated attributes object\n         */\n        transformAttributes: function (attributes) {\n          var today = moment();\n          attributes.current = false;\n\n          if (moment(attributes.start_date).isSameOrBefore(today, 'day') &&\n            moment(attributes.end_date).isSameOrAfter(today, 'day')) {\n            attributes.current = true;\n          }\n\n          return attributes;\n        },\n        /**\n         *  Finds out if given date is in this object's absence period.\n         *\n         * @param  {Date} whichDate given date either as Date object or its string representation\n         * @return true if whichDate is in this instance's period range, else false\n         */\n        isInPeriod: function (whichDate) {\n          var dateFormat = HRSettings.DATE_FORMAT.toUpperCase();\n          var checkDate = moment(whichDate, dateFormat);\n\n          return moment(this.start_date).isSameOrBefore(checkDate) &&\n            moment(this.end_date).isSameOrAfter(checkDate);\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/instances/absence-period.instance.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/apis/absence-period.api',[\n  'leave-absences/shared/modules/apis',\n  'common/services/api'\n], function (apis) {\n  'use strict';\n\n  apis.factory('AbsencePeriodAPI', ['$log', 'api', function ($log, api) {\n    $log.debug('AbsencePeriodAPI');\n\n    return api.extend({\n      /**\n       * This method returns all the AbsencePeriods.\n       *\n       * @param  {Object} params  matches the api endpoint params (title, start_date, end_date etc)\n       * @return {Promise}\n       */\n      all: function (params) {\n        $log.debug('AbsencePeriodAPI');\n\n        return this.sendGET('AbsencePeriod', 'get', params)\n          .then(function (data) {\n            return data.values;\n          });\n      }\n    });\n  }]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/apis/absence-period.api.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/models/absence-period.model',[\n  'leave-absences/shared/modules/models',\n  'common/moment',\n  'leave-absences/shared/modules/shared-settings',\n  'leave-absences/shared/instances/absence-period.instance',\n  'leave-absences/shared/apis/absence-period.api',\n  'common/models/model',\n  'common/services/hr-settings'\n], function (models, moment) {\n  'use strict';\n\n  models.factory('AbsencePeriod', [\n    '$log', 'Model', 'AbsencePeriodAPI', 'AbsencePeriodInstance', 'shared-settings',\n    function ($log, Model, absencePeriodAPI, instance, sharedSettings) {\n      $log.debug('AbsencePeriod');\n\n      return Model.extend({\n        /**\n         * Calls the all() method of the AbsencePeriod API, and returns an\n         * AbsencePeriodInstance for each absencePeriod.\n         *\n         * @param  {Object} params  matches the api endpoint params (title, start_date, end_date etc)\n         * @return {Promise}\n         */\n        all: function (params) {\n          return absencePeriodAPI.all(params)\n            .then(function (absencePeriods) {\n              return absencePeriods.map(function (absencePeriod) {\n                return instance.init(absencePeriod, true);\n              });\n            });\n        },\n        /**\n         *  Finds out if current date is in any absence period.\n         *  If found then return absence period instance of it.\n         *\n         * @return {Object} Absence period instance or null if not found\n         */\n        current: function () {\n          var today = moment().format(sharedSettings.serverDateFormat);\n\n          var params = {\n            'start_date': {\n              '<=': today\n            },\n            'end_date': {\n              '>=': today\n            }\n          };\n\n          return absencePeriodAPI.all(params)\n            .then(function (absencePeriods) {\n              if (absencePeriods && absencePeriods.length) {\n                return instance.init(absencePeriods[0], true);\n              }\n\n              return null;\n            });\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/models/absence-period.model.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/apis/absence-type.api',[\n  'common/lodash',\n  'common/moment',\n  'leave-absences/shared/modules/apis',\n  'common/services/api'\n], function (_, moment, apis) {\n  'use strict';\n\n  apis.factory('AbsenceTypeAPI', ['$log', 'api', 'shared-settings', function ($log, api, sharedSettings) {\n    $log.debug('AbsenceTypeAPI');\n\n    return api.extend({\n\n      /**\n       * This method returns all the active AbsenceTypes unless specified in param.\n       *\n       * @param  {Object} params  matches the api endpoint params (title, weight etc)\n       * @return {Promise}\n       */\n      all: function (params) {\n        $log.debug('AbsenceTypeAPI.all');\n\n        return this.sendGET('AbsenceType', 'get', _.defaults(params || {}, { is_active: true }))\n          .then(function (data) {\n            return data.values;\n          });\n      },\n\n      /**\n       * Calculate Toil Expiry Date\n       *\n       * @param  {string} absenceTypeID\n       * @param  {Object} date\n       * @param  {Object} params\n       * @return {Promise}\n       */\n      calculateToilExpiryDate: function (absenceTypeID, date, params) {\n        $log.debug('AbsenceTypeAPI.calculateToilExpiryDate');\n\n        params = _.assign({}, params, {\n          absence_type_id: absenceTypeID,\n          date: moment(date).format(sharedSettings.serverDateFormat)\n        });\n\n        return this.sendPOST('AbsenceType', 'calculateToilExpiryDate', params)\n          .then(function (data) {\n            return data.values.expiry_date;\n          });\n      }\n    });\n  }]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/apis/absence-type.api.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/instances/absence-type.instance',[\n  'leave-absences/shared/modules/models-instances',\n  'common/models/instances/instance'\n], function (instances) {\n  'use strict';\n\n  instances.factory('AbsenceTypeInstance', ['$log', 'ModelInstance', function ($log, ModelInstance) {\n    $log.debug('AbsenceTypeInstance');\n\n    return ModelInstance.extend({});\n  }]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/instances/absence-type.instance.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/models/absence-type.model',[\n  'leave-absences/shared/modules/models',\n  'common/models/model',\n  'leave-absences/shared/apis/absence-type.api',\n  'leave-absences/shared/instances/absence-type.instance'\n], function (models) {\n  'use strict';\n\n  models.factory('AbsenceType', [\n    '$log', 'Model', 'AbsenceTypeAPI', 'AbsenceTypeInstance',\n    function ($log, Model, absenceTypeAPI, instance) {\n      $log.debug('AbsenceType');\n\n      return Model.extend({\n        /**\n         * Calls the all() method of the AbsenceType API, and returns an\n         * AbsenceTypeInstance for each absenceType.\n         *\n         * @param  {Object} params  matches the api endpoint params (title, weight etc)\n         * @return {Promise}\n         */\n        all: function (params) {\n          return absenceTypeAPI.all(params)\n            .then(function (absenceTypes) {\n              return absenceTypes.map(function (absenceType) {\n                return instance.init(absenceType, true);\n              });\n            });\n        },\n\n        /**\n         * Calls the calculateToilExpiryDate() method of the AbsenceType API\n         *\n         * @param  {string} absenceTypeID\n         * @param  {Object} date\n         * @param  {Object} params\n         * @return {Promise}\n         */\n        calculateToilExpiryDate: function (absenceTypeID, date, params) {\n          return absenceTypeAPI.calculateToilExpiryDate(absenceTypeID, date, params);\n        },\n\n        /**\n         * Determines if the absence type can expire by querying if\n         * the expiration unit and duration are not null.\n         *\n         * @param   {string} absenceTypeId\n         * @return  {Promise}\n         */\n        canExpire: function (absenceTypeId) {\n          return absenceTypeAPI.all({\n            accrual_expiration_unit: { 'IS NOT NULL': 1 },\n            accrual_expiration_duration: { 'IS NOT NULL': 1 },\n            allow_accruals_request: 1,\n            id: absenceTypeId,\n            options: { limit: 1 },\n            return: ['id']\n          })\n          .then(function (results) {\n            return results.length > 0;\n          });\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/models/absence-type.model.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/components/leave-requests-heatmap.component',[\n  'common/moment',\n  'common/components/heatmap.component',\n  'leave-absences/shared/modules/components'\n], function (moment, heatmap, components) {\n  components.component('leaveRequestsHeatmap', {\n    bindings: {\n      leaveRequests: '<'\n    },\n    controller: LeaveRequestsHeatmapController,\n    controllerAs: 'LeaveRequestsHeatmap',\n    templateUrl: ['shared-settings', function (sharedSettings) {\n      return sharedSettings.sharedPathTpl + 'components/leave-requests-heatmap.html';\n    }]\n  });\n\n  function LeaveRequestsHeatmapController () {\n    var vm = this;\n\n    vm.heatmapValues = {};\n\n    vm.$onChanges = $onChanges;\n\n    /**\n     * Implemenents the $onChanges method for Angular controllers.\n     * When leaveRequests are bound, it maps them to heat map values.\n     *\n     * @param {Object} changes - it has the previous and current value\n     * for each bindings change. This value is passed by angular.\n     */\n    function $onChanges (changes) {\n      if (changes.leaveRequests) {\n        mapLeaveRequestsToHeatmapValues();\n      }\n    }\n\n    /**\n     * Stores the total leave balance for each day of the week. The heatmap\n     * values are cleared to avoid displaying previous values.\n     */\n    function mapLeaveRequestsToHeatmapValues () {\n      vm.heatmapValues = {};\n\n      leaveRequestsDates().forEach(function (date) {\n        var dayOfTheWeek = moment(date.date).isoWeekday();\n\n        if (!vm.heatmapValues[dayOfTheWeek]) {\n          vm.heatmapValues[dayOfTheWeek] = 0;\n        }\n\n        vm.heatmapValues[dayOfTheWeek]++;\n      });\n    }\n\n    /**\n     * Returns a single array of dates, extracted from each leave request\n     * dates.\n     *\n     * @return {Array}\n     */\n    function leaveRequestsDates () {\n      return vm.leaveRequests.reduce(function (dates, request) {\n        return dates.concat(request.dates);\n      }, []);\n    }\n  }\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/components/leave-requests-heatmap.component.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/apis/leave-request.api',[\n  'leave-absences/shared/modules/apis',\n  'common/lodash',\n  'common/services/api'\n], function (apis, _) {\n  'use strict';\n\n  apis.factory('LeaveRequestAPI', ['$log', 'api', '$q', 'shared-settings',\n    function ($log, api, $q) {\n      $log.debug('LeaveRequestAPI');\n\n      return api.extend({\n\n        /**\n         * This method returns all the Leave Requests.\n         * It supports filters, pagination, sort and extra params\n         *\n         * @param {object} filters - Values the full list should be filtered by\n         * @param {object} pagination\n         *   `page` for the current page, `size` for number of items per page\n         * @param {string} sort - The field and direction to order by\n         * @param  {Object} params\n         * @param  {Boolean} cache\n         * @return {Promise} Resolved with {Object} All leave requests\n         */\n        all: function (filters, pagination, sort, params, cache) {\n          $log.debug('LeaveRequestAPI.all');\n          var defer = $q.defer();\n\n          // if contact_id has an empty array for IN condition, there is no point making the\n          // call to the Leave Request API\n          // TODO Move to Base API\n          if (filters && filters.contact_id && filters.contact_id.IN && filters.contact_id.IN.length === 0) {\n            defer.resolve({ list: [], total: 0, allIds: [] });\n          } else {\n            defer.resolve(this.getAll('LeaveRequest', filters, pagination, sort, params, 'getFull', cache));\n          }\n\n          return defer.promise;\n        },\n\n        /**\n         * This method returns all the total change in balance that is caused by the\n         * leave requests of a given absence type, or of all the absence types of a given contact and period.\n         *\n         * @param {string} contactId The ID of the Contact to get the balance change for\n         * @param {string} periodId The ID of the Absence Period to get the balance change for\n         * @param {array} [statuses = null] An array of OptionValue values which the list will be filtered by\n         * @param {boolean} [isPublicHoliday=false] Based on the value of this param,\n         * the calculation will include only the leave requests that aren't/are public holidays\n         * @return {Promise} Resolved with {Object} Balance Change data or Error data\n         */\n        balanceChangeByAbsenceType: function (contactId, periodId, statuses, isPublicHoliday) {\n          $log.debug('LeaveRequestAPI.balanceChangeByAbsenceType');\n          var deferred = $q.defer();\n\n          if (!contactId || !periodId) {\n            deferred.reject('contact_id and period_id are mandatory');\n          }\n\n          var params = {\n            contact_id: contactId,\n            period_id: periodId,\n            statuses: statuses ? {'IN': statuses} : null,\n            public_holiday: isPublicHoliday || false\n          };\n\n          this.sendGET('LeaveRequest', 'getbalancechangebyabsencetype', params, false)\n          .then(function (data) {\n            deferred.resolve(data.values);\n          });\n\n          return deferred.promise;\n        },\n\n        /**\n         * Gets the overall balance change after a leave request is created. The\n         * API will create and return the detailed breakdown of it in days.\n         *\n         * @param {Object} params matched the API end point params like\n         * mandatory values for contact_id, from_date, from_date_type and optional values for\n         * to_date and to_date_type.\n         *\n         * @return {Promise} containing the detailed breakdown of balance leaves\n         */\n        calculateBalanceChange: function (params) {\n          $log.debug('LeaveRequestAPI.calculateBalanceChange', params);\n          var deferred = $q.defer();\n\n          if (params && (!params.contact_id || !params.from_date || !params.from_date_type)) {\n            deferred.reject('contact_id, from_date and from_date_type in params are mandatory');\n          }\n\n          this.sendPOST('LeaveRequest', 'calculatebalancechange', params)\n          .then(function (data) {\n            deferred.resolve(data.values);\n          });\n\n          return deferred.promise;\n        },\n\n        /**\n         * Gets the balance change breakdown\n         * @NOTE: This breakdown is not affected by a work pattern change\n         *\n         * @param  {Integer} leaveRequestId Leave Request ID\n         * @return {Promise} resolves with the detailed balance breakdown\n         */\n        getBalanceChangeBreakdown: function (leaveRequestId) {\n          return this.sendGET('LeaveRequest', 'getBreakdown',\n            { leave_request_id: leaveRequestId }, false);\n        },\n\n        /**\n         * Create a new leave request with given params.\n         *\n         * @param {Object} params matched the API end point params with\n         * mandatory values for contact_id, status_id, from_date, from_date_type\n         * and optional values for to_date and to_date_type.\n         * If to_date is given then to_date_type is also mandotory.\n         *\n         * @return {Promise} containing the leave request object additionally with id key set\n         * else rejects the promise with error data\n         */\n        create: function (params) {\n          $log.debug('LeaveRequestAPI.create', params);\n          var deferred = $q.defer();\n\n          if (params) {\n            if (params.to_date && !params.to_date_type) {\n              deferred.reject('to_date_type is mandatory');\n            } else if (!params.contact_id || !params.from_date || !params.from_date_type || !params.status_id) {\n              deferred.reject('contact_id, from_date, status_id and from_date_type params are mandatory');\n            }\n          }\n\n          this.sendPOST('LeaveRequest', 'create', params)\n          .then(function (data) {\n            deferred.resolve(data.values[0]);\n          });\n\n          return deferred.promise;\n        },\n\n        /**\n         * Calls the `delete` endpoint with the given leave request id\n         *\n         * @param  {int/string} id\n         * @return {Promise}\n         */\n        delete: function (id) {\n          return this.sendPOST('LeaveRequest', 'delete', { id: id });\n        },\n\n        /**\n         * Calls the deletecomment backend API.\n         *\n         * @param {String} leaveRequestID - leave request ID\n         * @param {String} attachmentID - attachment ID\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        deleteAttachment: function (leaveRequestID, attachmentID, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID,\n            attachment_id: attachmentID\n          });\n\n          return this.sendPOST('LeaveRequest', 'deleteattachment', params)\n          .then(function (result) {\n            return result.values;\n          });\n        },\n\n        /**\n         * Calls the deletecomment backend API.\n         *\n         * @param {String} commentID - comment ID\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        deleteComment: function (commentID, params) {\n          params = _.assign({}, params, {\n            comment_id: commentID\n          });\n\n          return this.sendPOST('LeaveRequest', 'deletecomment', params)\n          .then(function (commentsData) {\n            return commentsData.values;\n          });\n        },\n\n        /**\n         * Get leave request for the given id\n         *\n         * @param {object} id - leave request id\n         *\n         * @return {Promise} resolves with {Object}\n         */\n        find: function (id) {\n          $log.debug('LeaveRequestAPI.find');\n\n          return this.sendGET('LeaveRequest', 'getFull', { id: id })\n          .then(function (response) {\n            if (response.values.length === 0) {\n              return $q.reject('LeaveRequest not found with this ID');\n            }\n\n            return response.values[0];\n          });\n        },\n\n        /**\n         * Calls the getattachments backend API.\n         *\n         * @param {String} leaveRequestID - ID of leave request\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        getAttachments: function (leaveRequestID, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID\n          });\n\n          return this.sendGET('LeaveRequest', 'getattachments', params, false)\n          .then(function (attachments) {\n            return attachments.values;\n          });\n        },\n\n        /**\n         * Calls the getcomment backend API.\n         *\n         * @param {String} leaveRequestID - ID of leave request\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        getComments: function (leaveRequestID, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID\n          });\n\n          return this.sendGET('LeaveRequest', 'getcomment', params, false)\n          .then(function (commentsData) {\n            return commentsData.values;\n          });\n        },\n\n        /**\n         * Calls the isManagedBy backend API.\n         *\n         * @param {String} leaveRequestID - ID of leave request\n         * @param {String} contactID - ID of contact\n         * @return {Promise} resolves with an {Boolean}\n         */\n        isManagedBy: function (leaveRequestID, contactID) {\n          $log.debug('LeaveRequestAPI.isManagedBy');\n\n          return this.sendPOST('LeaveRequest', 'isManagedBy', {\n            leave_request_id: leaveRequestID,\n            contact_id: contactID\n          })\n          .then(function (response) {\n            return response.values;\n          });\n        },\n\n        /**\n         * Validate params for a new new leave request. It can be used before\n         * creating a leave request to validate data.\n         *\n         * @param {Object} params matched the API end point params with\n         * values like contact_id, status_id, from_date, from_date_type etc.,\n         * @return {Promise} returns an array of errors for invalid data else empty array\n         */\n        isValid: function (params) {\n          $log.debug('LeaveRequestAPI.isValid', params);\n          var deferred = $q.defer();\n\n          this.sendPOST('LeaveRequest', 'isValid', params)\n          .then(function (data) {\n            if (data.count > 0) {\n              deferred.reject(_(data.values).map().flatten().value());\n            } else {\n              deferred.resolve(data.values);\n            }\n          });\n\n          return deferred.promise;\n        },\n\n        /**\n         * Calls the addcomment backend API.\n         *\n         * @param {string} leaveRequestID - ID of Leave Request\n         * @param {Object} comment - Comment object\n         * @param {Object} params\n         *\n         * @return {Promise}\n         */\n        saveComment: function (leaveRequestID, comment, params) {\n          params = _.assign({}, params, {\n            leave_request_id: leaveRequestID,\n            text: comment.text,\n            contact_id: comment.contact_id\n          });\n\n          return this.sendPOST('LeaveRequest', 'addcomment', params)\n          .then(function (commentsData) {\n            return commentsData.values;\n          });\n        },\n\n        /**\n         * This method is used to update a leave request\n         *\n         * @param {object} params - Updated values of leave request\n         * @return {Promise} Resolved with {Object} Updated Leave request\n         */\n        update: function (params) {\n          $log.debug('LeaveRequestAPI.update', params);\n          var deferred = $q.defer();\n\n          if (!params.id) {\n            deferred.reject('id is mandatory field');\n          }\n\n          return this.sendPOST('LeaveRequest', 'create', params)\n          .then(function (data) {\n            return data.values[0];\n          });\n        }\n      });\n    }]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/apis/leave-request.api.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/instances/leave-request.instance',[\n  'common/lodash',\n  'leave-absences/shared/modules/models-instances',\n  'common/models/option-group',\n  'common/models/instances/instance'\n\n], function (_, instances) {\n  'use strict';\n\n  instances.factory('LeaveRequestInstance', ['$q', 'checkPermissions', 'OptionGroup',\n    'shared-settings', 'ModelInstance', 'LeaveRequestAPI',\n    function ($q, checkPermissions, OptionGroup, sharedSettings, ModelInstance, LeaveRequestAPI) {\n      /**\n       * Update status ID\n       *\n       * @param {string} status - name of the option value\n       * @return {Promise} Resolved with {Object} - Error Data in case of error\n       */\n      function changeLeaveStatus (status) {\n        return getOptionIDByName(status)\n          .then(function (statusId) {\n            var originalStatus = this.status_id;\n\n            this.status_id = statusId.value;\n            return this.update()\n              .catch(function (error) {\n                // Revert status id back in case of exception\n                this.status_id = originalStatus;\n\n                return $q.reject(error);\n              }.bind(this));\n          }.bind(this));\n      }\n\n      /**\n       * Checks if a LeaveRequest is of a specific type\n       *\n       * @param {string} statusName - name of the option value\n       * @return {Promise} Resolved with {Boolean}\n       */\n      function checkLeaveStatus (statusName) {\n        return getOptionIDByName(statusName)\n          .then(function (statusObj) {\n            return this.status_id === statusObj.value;\n          }.bind(this));\n      }\n\n      /**\n       * Deletes the given attachment from server. It iterates through local\n       * files array to find which are to be deleted and deletes them.\n       *\n       * @return {Promise}\n       */\n      function deleteAttachments () {\n        var promises = [];\n\n        _.forEach(this.files, function (file) {\n          if (file.toBeDeleted) {\n            promises.push(LeaveRequestAPI.deleteAttachment(this.id, file.attachment_id));\n          }\n        }.bind(this));\n\n        return $q.all(promises);\n      }\n\n      /**\n       * Get ID of an option value\n       *\n       * @param {string} name - name of the option value\n       * @return {Promise} Resolved with {Object} - Specific leave request\n       */\n      function getOptionIDByName (name) {\n        return OptionGroup.valuesOf('hrleaveandabsences_leave_request_status')\n          .then(function (data) {\n            return data.find(function (statusObj) {\n              return statusObj.name === name;\n            });\n          });\n      }\n\n      /**\n       * Save comments which do not have an ID and delete comments which are marked for deletion\n       *\n       * @return {Promise}\n       */\n      function saveAndDeleteComments () {\n        var leaveRequestId = this.id;\n        var promises = [];\n\n        // Pushing a chain of API calls to create new comments sequentially\n        promises.push($q.sequence(this.comments.filter(function (comment) {\n          return !comment.comment_id;\n        }).map(function (comment) {\n          return function () {\n            return LeaveRequestAPI.saveComment(leaveRequestId, comment);\n          };\n        })));\n\n        // Deleting comments can done in parallel, no need in a promise chain\n        promises = promises.concat(this.comments.filter(function (comment) {\n          return comment.comment_id && comment.toBeDeleted;\n        }).map(function (comment) {\n          return LeaveRequestAPI.deleteComment(comment.comment_id);\n        }));\n\n        return $q.all(promises);\n      }\n\n      return ModelInstance.extend({\n\n        /**\n         * Returns the default custom data (as in, not given by the API)\n         * with its default values\n         *\n         * @return {object}\n         */\n        defaultCustomData: function () {\n          return {\n            comments: [],\n            files: [],\n            request_type: 'leave'\n          };\n        },\n\n        /**\n         * Gets the current balance change according to a current work pattern\n         *\n         * @return {Promise} resolves to an object containing\n         *   a balance change amount and a detailed breakdown\n         */\n        calculateBalanceChange: function () {\n          return LeaveRequestAPI.calculateBalanceChange(\n            _.pick(this, ['contact_id', 'from_date',\n              'from_date_type', 'to_date', 'to_date_type']));\n        },\n\n        /**\n         * Cancel a leave request\n         */\n        cancel: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.cancelled);\n        },\n\n        /**\n         * Approve a leave request\n         */\n        approve: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.approved);\n        },\n\n        /**\n         * Reject a leave request\n         */\n        reject: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.rejected);\n        },\n\n        /**\n         * Sends a leave request back as more information is required\n         */\n        sendBack: function () {\n          return changeLeaveStatus.call(this, sharedSettings.statusNames.moreInformationRequired);\n        },\n\n        /**\n         * Update a leave request\n         *\n         * @return {Promise} Resolved with {Object} Updated Leave request\n         */\n        update: function () {\n          return LeaveRequestAPI.update(this.toAPI())\n            .then(function () {\n              return $q.all([\n                saveAndDeleteComments.call(this),\n                deleteAttachments.call(this)\n              ]);\n            }.bind(this));\n        },\n\n        /**\n         * Create a new leave request\n         *\n         * @return {Promise} Resolved with {Object} Created Leave request with\n         *  newly created id for this instance\n         */\n        create: function () {\n          return LeaveRequestAPI.create(this.toAPI())\n            .then(function (result) {\n              this.id = result.id;\n\n              return $q.all([\n                saveAndDeleteComments.call(this)\n              ]);\n            }.bind(this));\n        },\n\n        /**\n         * Sets the flag to mark file for deletion. The file is not yet deleted\n         * from the server.\n         *\n         * @param {Object} file - Attachment object\n         */\n        deleteAttachment: function (file) {\n          if (!file.toBeDeleted) {\n            file.toBeDeleted = true;\n          }\n        },\n\n        /**\n         * Removes a comment from memory\n         *\n         * @param {Object} commentObj - comment object\n         */\n        deleteComment: function (commentObj) {\n          // If its an already saved comment, mark a toBeDeleted flag\n          if (commentObj.comment_id) {\n            commentObj.toBeDeleted = true;\n            return;\n          }\n\n          this.comments = _.reject(this.comments, function (comment) {\n            return commentObj.created_at === comment.created_at && commentObj.text === comment.text;\n          });\n        },\n\n        /**\n         * Deletes the leave request\n         *\n         * @return {Promise}\n         */\n        delete: function () {\n          return LeaveRequestAPI.delete(this.id);\n        },\n\n        /**\n         * Gets the balance change breakdown of the leave request\n         *\n         * @return {Promise}\n         */\n        getBalanceChangeBreakdown: function () {\n          return LeaveRequestAPI.getBalanceChangeBreakdown(this.id)\n            .then(function (response) {\n              return {\n                amount: _.reduce(response.values, function (sum, entry) {\n                  return sum + parseFloat(entry.amount);\n                }, 0),\n                breakdown: response.values.map(function (entry) {\n                  return {\n                    amount: parseFloat(entry.amount),\n                    date: entry.date,\n                    type: {\n                      id: entry.id,\n                      value: entry.type,\n                      label: entry.label\n                    }\n                  };\n                })\n              };\n            });\n        },\n\n        /**\n         * Validate leave request instance attributes.\n         *\n         * @return {Promise} empty array if no error found otherwise an object\n         *  with is_error set and array of errors\n         */\n        isValid: function () {\n          return LeaveRequestAPI.isValid(this.toAPI());\n        },\n\n        /**\n         * Checks if a LeaveRequest is Approved.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isApproved: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.approved);\n        },\n\n        /**\n         * Checks if a LeaveRequest is AwaitingApproval.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isAwaitingApproval: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.awaitingApproval);\n        },\n\n        /**\n         * Checks if a LeaveRequest is cancelled.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isCancelled: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.cancelled);\n        },\n\n        /**\n         * Checks if a LeaveRequest is Rejected.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isRejected: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.rejected);\n        },\n\n        /**\n         * Checks if a LeaveRequest is Sent Back.\n         *\n         * @return {Promise} resolved with {Boolean}\n         */\n        isSentBack: function () {\n          return checkLeaveStatus.call(this, sharedSettings.statusNames.moreInformationRequired);\n        },\n\n        /**\n         * Loads comments for this leave request.\n         *\n         * @return {Promise}\n         */\n        loadComments: function () {\n          if (this.id) {\n            return LeaveRequestAPI.getComments(this.id)\n              .then(function (comments) {\n                this.comments = comments;\n              }.bind(this));\n          }\n\n          return $q.resolve();\n        },\n\n        /**\n         * Check the role of a given contact in relationship to the leave request.\n         *\n         * @param {Object} contactId\n         * @return {Promise} resolves with an {String} - owner/admin/manager/none\n         */\n        roleOf: function (contactId) {\n          return (this.contact_id === contactId)\n            ? $q.resolve('owner')\n            : checkPermissions(sharedSettings.permissions.admin.administer)\n              .then(function (isAdmin) {\n                return isAdmin\n                  ? 'admin'\n                  : LeaveRequestAPI.isManagedBy(this.id, contactId)\n                    .then(function (isManager) {\n                      return isManager ? 'manager' : 'none';\n                    });\n              }.bind(this));\n        },\n\n        /**\n         * Override of parent method\n         *\n         * @param {object} result - The accumulator object\n         * @param {string} key - The property name\n         */\n        toAPIFilter: function (result, __, key) {\n          if (!_.includes(['balance_change', 'dates', 'comments', 'files'], key)) {\n            result[key] = this[key];\n          }\n        },\n\n        /**\n         * Loads file attachments associated with this leave request\n         *\n         * @return {Promise} with array of attachments if leave request is already created else empty promise\n         */\n        loadAttachments: function () {\n          if (this.id) {\n            return LeaveRequestAPI.getAttachments(this.id)\n              .then(function (attachments) {\n                this.files = attachments;\n              }.bind(this));\n          }\n\n          return $q.resolve();\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/instances/leave-request.instance.js"),
eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/models/leave-request.model',[\n  'leave-absences/shared/modules/models',\n  'common/models/model',\n  'leave-absences/shared/apis/leave-request.api',\n  'leave-absences/shared/instances/leave-request.instance'\n], function (models) {\n  'use strict';\n\n  models.factory('LeaveRequest', [\n    '$log',\n    'Model',\n    'LeaveRequestAPI',\n    'LeaveRequestInstance',\n    function ($log, Model, leaveRequestAPI, instance) {\n      $log.debug('LeaveRequest');\n\n      return Model.extend({\n\n        /**\n         * Get all the Leave Requests.\n         * It supports filters, pagination, sort and extra params\n         *\n         * @param {object} filters - Values the full list should be filtered by\n         * @param {object} pagination\n         *   `page` for the current page, `size` for number of items per page\n         * @param {string} sort - The field and direction to order by\n         * @param  {Object} params\n         * @param  {Boolean} cache\n         * @return {Promise} resolves with {Object}\n         */\n        all: function (filters, pagination, sort, params, cache) {\n          return leaveRequestAPI.all(this.processFilters(filters), pagination, sort, params, cache)\n            .then(function (response) {\n              response.list = response.list.map(function (leaveRequest) {\n                return instance.init(leaveRequest, true);\n              });\n\n              return response;\n            });\n        },\n\n        /**\n         * Get all the total change in balance that is caused by the\n         * leave requests of a given absence type, or of all the absence types of a given contact and period.\n         *\n         * @param {string} contactId The ID of the Contact to get the balance change for\n         * @param {string} periodId The ID of the Absence Period to get the balance change for\n         * @param statuses {array} An array of OptionValue values which the list will be filtered by\n         * @param isPublicHoliday {boolean} Based on the value of this param,\n         * the calculation will include only the leave requests that aren't/are public holidays\n         * @return {Promise} Resolved with {Object} Balance Change data\n         */\n        balanceChangeByAbsenceType: function (contactId, periodId, statuses, isPublicHoliday) {\n          return leaveRequestAPI.balanceChangeByAbsenceType(contactId, periodId, statuses, isPublicHoliday);\n        },\n\n        /**\n         * Get leave request for the given id\n         *\n         * @param {object} id - leave request id\n         *\n         * @return {Promise} resolves with {Object}\n         */\n        find: function (id) {\n          return leaveRequestAPI.find(id)\n            .then(function (leaveRequest) {\n              return instance.init(leaveRequest, true);\n            });\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/models/leave-request.model.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/components/leave-widget/leave-widget-absence-types-amount-taken.component',[\n  'common/lodash',\n  'common/moment',\n  'leave-absences/shared/modules/components',\n  'leave-absences/shared/components/leave-requests-heatmap.component',\n  'leave-absences/shared/models/leave-request.model'\n], function (_, moment, components) {\n  components.component('leaveWidgetAbsenceTypesAmountTaken', {\n    bindings: {\n      title: '@',\n      leaveName: '@?',\n      absenceTypes: '<',\n      contactId: '<',\n      absencePeriod: '<',\n      leaveRequestStatuses: '<'\n    },\n    controller: absenceTypesTakenController,\n    controllerAs: 'absenceTypesTaken',\n    templateUrl: ['shared-settings', function (sharedSettings) {\n      return sharedSettings.sharedPathTpl + 'components/leave-widget/leave-widget-absence-types-amount-taken.html';\n    }]\n  });\n\n  absenceTypesTakenController.$include = ['$scope', 'LeaveRequest',\n    'OptionGroup'];\n\n  function absenceTypesTakenController ($scope, LeaveRequest, OptionGroup) {\n    var childComponentName = 'leave-widget-absence-types-amount-taken';\n    var vm = this;\n\n    vm.leaveRequests = [];\n\n    vm.$onChanges = $onChanges;\n\n    /**\n     * Initializes the controller by emiting a child is loading event.\n     */\n    (function init () {\n      $scope.$emit('LeaveWidget::childIsLoading', childComponentName);\n    })();\n\n    /**\n     * Implements the $onChanges method for angular controllers. When bindings\n     * are ready for use, it loads leave requests and then emits the child\n     * is ready event.\n     */\n    function $onChanges () {\n      if (areBindingsReady()) {\n        loadLeaveRequests().finally(function () {\n          $scope.$emit('LeaveWidget::childIsReady', childComponentName);\n        });\n      }\n    }\n\n    /**\n     * Returns true when the bindings are ready to be used.\n     *\n     * @return {Boolean}\n     */\n    function areBindingsReady () {\n      return vm.absenceTypes && vm.contactId && vm.absencePeriod &&\n        vm.leaveRequestStatuses && vm.leaveRequestStatuses.length;\n    }\n\n    /**\n     * Loads all leave requests for the contact, in the current period, of the\n     * allowed statuses, and of the specific absence types.\n     *\n     * @return {Promise}\n     */\n    function loadLeaveRequests () {\n      var absenceTypeIds = getAbsenceTypeIds();\n      var statusIds = getStatusIds();\n\n      return LeaveRequest.all({\n        contact_id: vm.contactId,\n        from_date: { '>=': vm.absencePeriod.start_date },\n        to_date: { '<=': vm.absencePeriod.end_date },\n        status_id: { IN: statusIds },\n        type_id: { IN: absenceTypeIds }\n      })\n      .then(function (response) {\n        vm.leaveRequests = response.list;\n      })\n      .then(mapAbsenceTypesBalance);\n    }\n\n    /**\n     * Returns an array of absence type ids.\n     *\n     * @return {Number[]}\n     */\n    function getAbsenceTypeIds () {\n      return vm.absenceTypes.map(function (absenceType) {\n        return absenceType.id;\n      });\n    }\n\n    /**\n     * Return an array of status ids.\n     *\n     * @return {Number[]}\n     */\n    function getStatusIds () {\n      return vm.leaveRequestStatuses.map(function (status) {\n        return status.value;\n      });\n    }\n\n    /**\n     * Finds and stores the balance for each absence type.\n     *\n     * Math.abs is used because the balance change is negative.\n     */\n    function mapAbsenceTypesBalance () {\n      vm.absenceTypes = vm.absenceTypes.map(function (absenceType) {\n        var balance;\n\n        balance = vm.leaveRequests.filter(function (request) {\n          return +request.type_id === +absenceType.id;\n        })\n        .reduce(function (balance, request) {\n          return balance + request.balance_change;\n        }, 0);\n\n        return _.assign({ balance: Math.abs(balance) }, absenceType);\n      });\n    }\n  }\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/components/leave-widget/leave-widget-absence-types-amount-taken.component.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/apis/entitlement.api',[\n  'leave-absences/shared/modules/apis',\n  'common/lodash',\n  'common/services/api'\n], function (apis, _) {\n  'use strict';\n\n  apis.factory('EntitlementAPI', ['$log', 'api', function ($log, api) {\n    $log.debug('EntitlementAPI');\n\n    /**\n     * Entitlements data will have key 'api.LeavePeriodEntitlement.getremainder'\n     * which is normalized with a friendlier 'remainder' key\n     *\n     * @param  {Object} entitlement\n     * @return {Object}\n     */\n    function storeRemainder (entitlement) {\n      var clone = _.clone(entitlement);\n      var remainderValues = clone['api.LeavePeriodEntitlement.getremainder']['values'];\n\n      if (remainderValues.length) {\n        clone['remainder'] = remainderValues[0]['remainder'];\n      }\n\n      delete clone['api.LeavePeriodEntitlement.getremainder'];\n\n      return clone;\n    }\n\n    /**\n     * Entitlements data will have key 'api.LeavePeriodEntitlement.getentitlement'\n     * which is normalized with a friendlier 'value' key\n     *\n     * @param  {Object} entitlement\n     * @return {Object}\n     */\n    function storeValue (entitlement) {\n      var clone = _.clone(entitlement);\n      var value = clone['api.LeavePeriodEntitlement.getentitlement'].values[0].entitlement;\n\n      clone['value'] = value;\n      delete clone['api.LeavePeriodEntitlement.getentitlement'];\n\n      return clone;\n    }\n\n    return api.extend({\n\n      /**\n       * This method returns all the entitlements.\n       *\n       * It chains an additional call to the `getentitlement` endpoint to also return\n       * the actual value of each entitlement\n       *\n       * It can also return the remainder (current and future) among the rest of\n       * the data when passed withRemainder.\n       *\n       * @param  {Object} params  matches the api endpoint params (period_id, contact_id, etc)\n       * @param  {boolean} withRemainder  can be set to true to return remainder of entitlements\n       * @return {Promise}\n       */\n      all: function (params, withRemainder) {\n        $log.debug('EntitlementAPI.all');\n\n        params['api.LeavePeriodEntitlement.getentitlement'] = {\n          'entitlement_id': '$value.id'\n        };\n\n        if (withRemainder) {\n          params['api.LeavePeriodEntitlement.getremainder'] = {\n            'entitlement_id': '$value.id',\n            'include_future': true\n          };\n        }\n\n        return this.sendGET('LeavePeriodEntitlement', 'get', params, false)\n          .then(function (data) {\n            return data.values;\n          })\n          .then(function (entitlements) {\n            entitlements = entitlements.map(storeValue);\n\n            if (withRemainder) {\n              entitlements = entitlements.map(storeRemainder);\n            }\n\n            return entitlements;\n          });\n      },\n      /**\n       * This method returns the breakdown of entitlement from various types of leave balances.\n       *\n       * @param  {Object} params  matches the api endpoint params (period_id, contact_id, etc)\n       * @return {Promise}  will return a promise which when resolved will contain breakdown\n       * details along with entitlement id\n       */\n      breakdown: function (params) {\n        $log.debug('EntitlementAPI.breakdown');\n\n        return this.sendGET('LeavePeriodEntitlement', 'getbreakdown', params)\n          .then(function (data) {\n            return data.values;\n          });\n      },\n      /**\n       * This method returns the balance report\n       *\n       * @param  {Object}  filters\n       * @param  {Object}  pagination\n       * @param  {Object}  sort\n       * @param  {Object}  additionalParams\n       * @param  {Boolean} cache\n       * @return {Promise} resolves contacts with absence types with balances\n       */\n      getLeaveBalances: function (filters, pagination, sort, additionalParams, cache) {\n        $log.debug('EntitlementAPI.getLeaveBalances');\n\n        return this.getAll('LeavePeriodEntitlement', filters, pagination, sort,\n          additionalParams, 'getLeaveBalances', cache);\n      }\n    });\n  }]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/apis/entitlement.api.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/instances/entitlement.instance',[\n  'leave-absences/shared/modules/models-instances',\n  'common/models/instances/instance'\n], function (instances) {\n  'use strict';\n\n  instances.factory('EntitlementInstance', ['$log', 'ModelInstance', 'EntitlementAPI', function ($log, ModelInstance, EntitlementAPI) {\n    $log.debug('EntitlementInstance');\n\n    return ModelInstance.extend({\n      /**\n       * Returns the default custom data (as in, not given by the Entitlement API)\n       * with its default values\n       *\n       * @return {object}\n       */\n      defaultCustomData: function () {\n        return {\n          remainder: {\n            current: 0,\n            future: 0\n          },\n          breakdown: []\n        };\n      },\n\n      /**\n       * Populates the breakdown of the entitlement, by passing to the api\n       * the entitlement id.\n       *\n       * @return {Promise} with updated entitlement model instance with the side\n       * effect of setting this.breakdown property to newly obtained entitlement breakdown\n       */\n      getBreakdown: function () {\n        return EntitlementAPI.breakdown({\n          entitlement_id: this.id\n        })\n        .then(function (breakdown) {\n          this.breakdown = breakdown;\n        }.bind(this));\n      }\n    });\n  }]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/instances/entitlement.instance.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/models/entitlement.model',[\n  'common/lodash',\n  'leave-absences/shared/modules/models',\n  'common/models/model',\n  'leave-absences/shared/apis/entitlement.api',\n  'leave-absences/shared/instances/entitlement.instance'\n], function (_, models) {\n  'use strict';\n\n  models.factory('Entitlement', [\n    '$log', 'Model', 'EntitlementAPI', 'EntitlementInstance',\n    function ($log, Model, entitlementAPI, instance) {\n      $log.debug('Entitlement');\n\n      return Model.extend({\n        /**\n         * Calls the all() method of the Entitlement API, and returns an\n         * EntitlementInstance for each entitlement.\n         * It can pass the withRemainder property to get remainder for entitlements.\n         *\n         * @param {Object} params matches the api endpoint params (period_id, contact_id, etc)\n         * @param {boolean} withRemainder to return remainder of data\n         * @return {Promise}\n         */\n        all: function (params, withRemainder) {\n          return entitlementAPI.all(this.processFilters(params), withRemainder)\n            .then(function (entitlements) {\n              return entitlements.map(function (entitlement) {\n                return instance.init(entitlement, true);\n              });\n            });\n        },\n        /**\n         * Calls the `breakdown` method of the entitlement API\n         *\n         * The return value of the promise changes based on whether an array of `EntitlementInstance`s\n         * has been passed to the method or not.\n         *\n         * If it hasn 't, then it returns the entitlements along with breakdown details based on params passed.\n         * If it has, then it loads the breakdown data into each correspondent entitlement, which then\n         * are returned back.\n         *\n         * @param {Object} params matches the api endpoint params (period_id, contact_id, etc)\n         * @param {Array}  [entitlements] an array of `EntitlementInstance`s\n         * @return {Promise}\n         */\n        breakdown: function (params, entitlements) {\n          return entitlementAPI.breakdown(params)\n            .then(function (breakdown) {\n              if (entitlements) {\n                entitlements.map(function (entitlement) {\n                  var foundEntitlement = _.find(breakdown, function (element) {\n                    return element.id === entitlement.id;\n                  });\n\n                  if (foundEntitlement) {\n                    entitlement['breakdown'] = foundEntitlement['breakdown'];\n                  }\n\n                  return entitlement;\n                });\n\n                return entitlements;\n              }\n\n              return breakdown.map(function (entitlement) {\n                return instance.init(entitlement, true);\n              });\n            });\n        }\n      });\n    }\n  ]);\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/models/entitlement.model.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/components/leave-widget/leave-widget-absence-types-available-balance.component',[\n  'common/lodash',\n  'leave-absences/shared/modules/components',\n  'leave-absences/shared/models/entitlement.model'\n], function (_, components) {\n  components.component('leaveWidgetAbsenceTypesAvailableBalance', {\n    bindings: {\n      absenceTypes: '<',\n      contactId: '<',\n      absencePeriod: '<'\n    },\n    controller: leaveWidgetBalanceController,\n    controllerAs: 'leaveWidgetBalance',\n    templateUrl: ['shared-settings', function (sharedSettings) {\n      return sharedSettings.sharedPathTpl + 'components/leave-widget/leave-widget-absence-types-available-balance.html';\n    }]\n  });\n\n  leaveWidgetBalanceController.$inject = ['$scope', 'Entitlement'];\n\n  function leaveWidgetBalanceController ($scope, Entitlement) {\n    var childComponentName = 'leave-widget-absence-types-available-balance';\n    var entitlements;\n    var vm = this;\n\n    vm.$onChanges = $onChanges;\n\n    /**\n     * Initializes the component by emiting a child is loading event.\n     */\n    (function init () {\n      $scope.$emit('LeaveWidget::childIsLoading', childComponentName);\n    })();\n\n    /**\n     * Implements the $onChanges controller method. It watches for changes in\n     * the component bindings.\n     */\n    function $onChanges () {\n      if (areBindingsReady()) {\n        loadDependencies();\n      }\n    }\n\n    /**\n     * Returns true if all bindings are ready and can be used by the component.\n     *\n     * @return {Boolean}\n     */\n    function areBindingsReady () {\n      return vm.absenceTypes && vm.absencePeriod && vm.contactId;\n    }\n\n    /**\n     * Loads all the component dependencies (entitlements in this case) and\n     * emits a child is ready event.\n     *\n     * @return {Promise} - Returns an empty promise when all dependencies have\n     * loaded.\n     */\n    function loadDependencies () {\n      return loadEntitlements().then(function () {\n        $scope.$emit('LeaveWidget::childIsReady', childComponentName);\n      });\n    }\n\n    /**\n     * Loads entitlements for the selected user and absence period and maps\n     * the entitlements to their corresponding absence type.\n     *\n     * @return {Promise} - Returns an empty promise when all entitlements have\n     * been loaded and mapped.\n     */\n    function loadEntitlements () {\n      return Entitlement.all({\n        contact_id: vm.contactId,\n        period_id: vm.absencePeriod.id\n      }, true)\n      .then(function (_entitlements_) {\n        entitlements = _entitlements_;\n\n        mapAbsenceTypesWithTheirEntitlements();\n      });\n    }\n\n    /**\n     * Maps absence types with their entitlements. Only absence types the user\n     * is entitled to are mapped (entitlement.value > 0). The .remainder.future\n     * is used to display the current balance for approved and open requestes.\n     */\n    function mapAbsenceTypesWithTheirEntitlements () {\n      vm.absenceTypeEntitlements = entitlements\n        .filter(function (entitlement) {\n          return entitlement.value > 0;\n        })\n        .map(function (entitlement) {\n          var absenceType = _.find(vm.absenceTypes, function (type) {\n            return +type.id === +entitlement.type_id;\n          });\n\n          return _.assign({\n            balance: entitlement.remainder.future\n          }, absenceType);\n        });\n    }\n  }\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/components/leave-widget/leave-widget-absence-types-available-balance.component.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/components/leave-widget/leave-widget-next-leave.component',[\n  'common/lodash',\n  'common/moment',\n  'leave-absences/shared/modules/components',\n  'leave-absences/shared/models/leave-request.model'\n], function (_, moment, components) {\n  components.component('leaveWidgetNextLeave', {\n    bindings: {\n      contactId: '<',\n      leaveRequestStatuses: '<'\n    },\n    controller: nextLeaveController,\n    controllerAs: 'nextLeave',\n    templateUrl: ['shared-settings', function (sharedSettings) {\n      return sharedSettings.sharedPathTpl + 'components/leave-widget/leave-widget-next-leave.html';\n    }]\n  });\n\n  nextLeaveController.$inject = ['$q', '$scope', 'LeaveRequest', 'OptionGroup',\n    'shared-settings'];\n\n  function nextLeaveController ($q, $scope, LeaveRequest, OptionGroup,\n  sharedSettings) {\n    var childComponentName = 'leave-widget-next-leave';\n    var vm = this;\n\n    vm.dayTypes = {};\n    vm.balanceDeduction = 0;\n    vm.nextLeaveRequest = null;\n    vm.requestStatus = {};\n\n    vm.$onChanges = $onChanges;\n\n    /**\n     * Initializes the controller by emiting a child is loading event.\n     */\n    (function init () {\n      $scope.$emit('LeaveWidget::childIsLoading', childComponentName);\n    })();\n\n    /**\n     * Implements $onChanges method for AngularJS Components. Waits for bindings\n     * to be ready, and then loads the next leave requests. When it's done, it\n     * emits a child is ready event.\n     */\n    function $onChanges () {\n      if (!bindingsAreReady()) {\n        return;\n      }\n\n      $q.all([\n        loadDayTypes(),\n        loadNextLeaveRequest()\n      ])\n      .then(function () {\n        if (vm.nextLeaveRequest) {\n          makeBalanceChangeAbsolute();\n          storeStatusForNextRequest();\n        }\n      })\n      .finally(function () {\n        $scope.$emit('LeaveWidget::childIsReady', childComponentName);\n      });\n    }\n\n    /**\n     * Returns true when contact id and leave request statuses bindings are\n     * ready.\n     *\n     * @return {Boolean}\n     */\n    function bindingsAreReady () {\n      return vm.contactId && vm.leaveRequestStatuses &&\n        vm.leaveRequestStatuses.length;\n    }\n\n    /**\n     * Returns a list of status ids.\n     *\n     * @return {Array}\n     */\n    function getStatusIds () {\n      return vm.leaveRequestStatuses.map(function (status) {\n        return status.value;\n      });\n    }\n\n    /**\n     * Loads and stores all the possible day types for leave requests indexed\n     * by value.\n     *\n     * @return {Promise}\n     */\n    function loadDayTypes () {\n      return OptionGroup.valuesOf('hrleaveandabsences_leave_request_day_type')\n        .then(function (_dayTypes_) {\n          vm.dayTypes = _.indexBy(_dayTypes_, 'value');\n        });\n    }\n\n    /**\n     * Loads the next leave request for the contact that has been approved or\n     * is under review.\n     *\n     * @return {Promise}\n     */\n    function loadNextLeaveRequest () {\n      var today = moment().format(sharedSettings.serverDateFormat);\n\n      return LeaveRequest.all({\n        contact_id: vm.contactId,\n        from_date: { '>=': today },\n        request_type: 'leave',\n        status_id: { IN: getStatusIds() },\n        options: { limit: 1, sort: 'from_date DESC' }\n      })\n      .then(function (response) {\n        vm.nextLeaveRequest = response.list[0] || null;\n      });\n    }\n\n    /**\n     * Makes the next leave requst balance chance value absolute.\n     */\n    function makeBalanceChangeAbsolute () {\n      vm.nextLeaveRequest.balance_change = Math.abs(\n        vm.nextLeaveRequest.balance_change);\n    }\n\n    /**\n     * Finds and Stores the leave request status for the next leave request.\n     */\n    function storeStatusForNextRequest () {\n      vm.requestStatus = _.find(vm.leaveRequestStatuses, function (status) {\n        return +status.value === +vm.nextLeaveRequest.status_id;\n      });\n    }\n  }\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/components/leave-widget/leave-widget-next-leave.component.js"),eval("/* eslint-env amd */\n\ndefine('leave-absences/shared/components/leave-widget/leave-widget.component',[\n  'common/angular',\n  'common/lodash',\n  'common/directives/loading',\n  'common/directives/help-text.directive',\n  'common/filters/time-unit-applier.filter',\n  'leave-absences/shared/modules/shared-settings',\n  'leave-absences/shared/modules/components',\n  'leave-absences/shared/models/absence-period.model',\n  'leave-absences/shared/models/absence-type.model',\n  'leave-absences/shared/components/leave-widget/leave-widget-absence-types-amount-taken.component',\n  'leave-absences/shared/components/leave-widget/leave-widget-absence-types-available-balance.component',\n  'leave-absences/shared/components/leave-widget/leave-widget-next-leave.component'\n], function (angular, _) {\n  angular.module('leave-absences.components.leave-widget', [\n    'common.components',\n    'common.directives',\n    'common.filters',\n    'leave-absences.components',\n    'leave-absences.models',\n    'leave-absences.settings'\n  ])\n  .component('leaveWidget', {\n    bindings: {\n      contactId: '<'\n    },\n    controller: leaveWidgetController,\n    controllerAs: 'leaveWidget',\n    templateUrl: ['shared-settings', function (sharedSettings) {\n      return sharedSettings.sharedPathTpl + 'components/leave-widget/leave-widget.html';\n    }]\n  });\n\n  leaveWidgetController.$inject = ['$log', '$q', '$scope', 'AbsencePeriod',\n    'AbsenceType', 'OptionGroup'];\n\n  function leaveWidgetController ($log, $q, $scope, AbsencePeriod,\n    AbsenceType, OptionGroup) {\n    var allowedLeaveStatuses = ['approved', 'admin_approved',\n      'awaiting_approval', 'more_information_required'];\n    var childComponents = 0;\n    var vm = this;\n\n    vm.absenceTypes = [];\n    vm.currentAbsencePeriod = null;\n    vm.loading = { childComponents: false, component: true };\n    vm.leaveRequestStatuses = [];\n    vm.sicknessAbsenceTypes = [];\n\n    /**\n     * Initializes the component by watching for events, and loading\n     * dependencies.\n     */\n    (function init () {\n      $log.debug('Controller: leaveWidgetController');\n      initWatchers();\n      loadDependencies();\n    })();\n\n    /**\n     * Increases the child component counter and sets loading child components\n     * to true.\n     */\n    function childComponentIsLoading () {\n      childComponents++;\n      vm.loading.childComponents = true;\n    }\n\n    /**\n     * Decreases the child component counter. If there are no more child\n     * components in the queue, it sets loading child components to false.\n     */\n    function childComponentIsReady () {\n      childComponents--;\n\n      if (childComponents <= 0) {\n        childComponents = 0;\n        vm.loading.childComponents = false;\n      }\n    }\n\n    /**\n     * Watches for child components loading and ready events.\n     */\n    function initWatchers () {\n      $scope.$on('LeaveWidget::childIsLoading', childComponentIsLoading);\n      $scope.$on('LeaveWidget::childIsReady', childComponentIsReady);\n    }\n\n    /**\n     * Loads absence types, the current absence period, and leave request\n     * statuses. When all dependencies are ready it sets loading component to\n     * false.\n     *\n     * @return {Promise} - Returns an empty promise when all dependencies have\n     * been loaded.\n     */\n    function loadDependencies () {\n      return $q.all([\n        loadAbsenceTypes(),\n        loadCurrentAbsencePeriod(),\n        loadLeaveRequestTypes()\n      ])\n      .finally(function () {\n        vm.loading.component = false;\n      });\n    }\n\n    /**\n     * Loads all the absence types.\n     *\n     * @return {Promise}\n     */\n    function loadAbsenceTypes () {\n      return AbsenceType.all().then(function (types) {\n        vm.absenceTypes = types;\n        vm.sicknessAbsenceTypes = types.filter(function (type) {\n          return +type.is_sick;\n        });\n      });\n    }\n\n    /**\n     * Loads the status ID for absence types and stores only the allowed ones.\n     *\n     * @return {Promise}\n     */\n    function loadLeaveRequestTypes () {\n      return OptionGroup.valuesOf('hrleaveandabsences_leave_request_status')\n        .then(function (statuses) {\n          vm.leaveRequestStatuses = statuses.filter(function (status) {\n            return _.includes(allowedLeaveStatuses, status.name);\n          });\n        });\n    }\n\n    /**\n     * Loads all absence periods and stores the current one.\n     *\n     * @return {Promise}\n     */\n    function loadCurrentAbsencePeriod () {\n      return AbsencePeriod.all().then(function (periods) {\n        vm.currentAbsencePeriod = _.find(periods, function (period) {\n          return period.current;\n        });\n      });\n    }\n  }\n});\n\n//# sourceURL=/opt/buildkit/build/hr17/sites/all/modules/civicrm/tools/extensions/civihr/uk.co.compucorp.civicrm.hrleaveandabsences/js/angular/src/leave-absences/shared/components/leave-widget/leave-widget.component.js"),eval("define('contact-summary/modules/filters',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.filters', []);\n});\n\n//# sourceURL=/contact-summary/modules/filters.js"),eval("define('contact-summary/modules/services',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.services', []);\n});\n\n//# sourceURL=/contact-summary/modules/services.js"),eval("define('contact-summary/modules/settings',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.settings', []).constant('settings', {\n        classNamePrefix: 'contactSummary-',\n        contactId: decodeURIComponent((new RegExp('[?|&]cid=([^&;]+?)(&|#|;|$)').exec(location.search) || [, \"\"])[1].replace(/\\+/g, '%20')) || null,\n        debug: true,\n        pathApp: '',\n        pathRest: CRM.url('civicrm/ajax/rest'),\n        pathBaseUrl: CRM.vars.contactsummary.baseURL + '/',\n        // pathRest: '/index.php?q=civicrm/ajax/rest',\n        // pathBaseUrl: 'http://localhost:8900/sites/all/modules/civicrm/tools/extensions/civihr/contactsummary/',\n        pathTpl: 'views/'\n    });\n})\n\n//# sourceURL=/contact-summary/modules/settings.js"),eval("define('contact-summary/modules/controllers',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.controllers', []);\n});\n\n//# sourceURL=/contact-summary/modules/controllers.js"),eval("/* eslint-env amd */\n\ndefine('contact-summary/controllers/contactSummary',[\n  'contact-summary/modules/controllers',\n  'contact-summary/modules/settings'\n], function (controllers) {\n  'use strict';\n\n  /**\n   * @ngdoc controller\n   * @name ContactSummaryCtrl\n   * @param $log\n   * @param settings\n   * @constructor\n   */\n  function ContactSummaryCtrl ($log, settings) {\n    $log.debug('Controller: ContactSummaryCtrl');\n    var templateDir = settings.pathBaseUrl + settings.pathTpl;\n    var vm = this;\n\n    vm.contactId = settings.contactId;\n    vm.partials = {\n      keyDetails: templateDir + '/include/keyDetails.html',\n      keyDates: templateDir + '/include/keyDates.html'\n    };\n    vm.ready = false;\n  }\n\n  controllers.controller('ContactSummaryCtrl', ['$log', 'settings', ContactSummaryCtrl]);\n});\n\n//# sourceURL=/contact-summary/controllers/contactSummary.js"),
eval("define('contact-summary/services/api',[\n    'contact-summary/modules/services'\n], function (services) {\n    'use strict';\n\n    services.factory('ApiService', ['$http', '$q', function ($http, $q) {\n\n        /**\n         * @ngdoc function\n         * @param entityName\n         * @param data\n         * @param action\n         * @param stringify\n         * @returns {*}\n         * @private\n         */\n        function buildData(entityName, data, action, stringify) {\n            if (!angular.isDefined(entityName)) {\n                throw new Error('Entity name not provided');\n            }\n\n            if (!angular.isDefined(action)) {\n                throw new Error('Action not provided');\n            }\n\n            data = angular.extend({\n                entity: entityName,\n                action: action,\n                sequential: 1,\n                json: 1,\n                rowCount: 0\n            }, data);\n\n            // Because data needs to be sent as string for CiviCRM to accept\n            return (!!stringify ? jQuery.param(data) : data);\n        }\n\n        /**\n         * @ngdoc function\n         * @param method\n         * @param data\n         * @param config\n         * @returns {HttpPromise}\n         * @private\n         */\n        function sendRequest(method, data, config) {\n            config = angular.extend({\n                method: method,\n                url: '/civicrm/ajax/rest'\n            }, (method === 'post' ? { data: data } : { params: data }), config);\n\n            return $http(config)\n                .then(function (response) {\n                    if (response.is_error) {\n                        return $q.reject(response);\n                    }\n\n                    return response.data;\n                })\n                .catch(function (response) {\n                    return response;\n                });\n        }\n\n        return {\n            /**\n             * @ngdoc method\n             * @name get\n             * @methodOf ApiService\n             * @param entityName\n             * @param data\n             * @param config\n             * @returns {*}\n             */\n            get: function (entityName, data, config) {\n                return sendRequest('get', buildData(entityName, data, 'get'), config);\n            },\n\n            /**\n             * @ngdoc method\n             * @name post\n             * @methodOf ApiService\n             * @param entityName\n             * @param data\n             * @param action\n             * @param config\n             * @returns {HttpPromise}\n             */\n            post: function (entityName, data, action, config) {\n                config = angular.extend({\n                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n                }, config);\n\n                return sendRequest('post', buildData(entityName, data, action, true), config);\n            },\n\n            getValue: function (entityName, data) {\n                // todo\n            },\n\n            create: function (entityName, data) {\n                // todo\n            },\n\n            update: function (entityName, data) {\n                // todo\n            },\n\n            delete: function (entityName, data) {\n                // todo\n            }\n        }\n    }]);\n});\n\n//# sourceURL=/contact-summary/services/api.js"),eval("define('contact-summary/services/item',[\n    'common/moment',\n    'contact-summary/modules/services'\n], function (moment, services) {\n    'use strict';\n\n    /**\n     * @constructor\n     */\n    function ItemService() {\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name ItemService\n         */\n        var factory = {};\n\n        /**\n         * @ngdoc method\n         * @name createInstance\n         * @methodOf ItemService\n         * @returns {(Object|ItemService)}\n         */\n        factory.createInstance = function () {\n            var instance = Object.create(this);\n            instance.item = {};\n\n            return instance;\n        };\n\n        /**\n         * @ngdoc method\n         * @name get\n         * @methodOf ItemService\n         * @returns {Object}\n         */\n        factory.get = function () {\n            return this.item;\n        };\n\n        /**\n         * @ngdoc method\n         * @name set\n         * @methodOf ItemService\n         * @param data\n         */\n        factory.set = function (data) {\n            if (!angular.isObject(data)) {\n                throw new TypeError('Data must be of type Object');\n            }\n\n            this.item = data;\n        };\n\n        /**\n         * @ngdoc method\n         * @name setKey\n         * @methodOf ItemService\n         * @param key\n         * @param value\n         */\n        factory.setKey = function (key, value) {\n            this.item[key] = value;\n        };\n\n        return factory;\n    }\n\n    services.factory('ItemService', ItemService);\n});\n\n//# sourceURL=/contact-summary/services/item.js"),eval("define('contact-summary/services/model',[\n    'contact-summary/modules/services',\n    'contact-summary/services/item'\n], function (services) {\n    'use strict';\n\n    /**\n     * Base service to extend.\n     *\n     * This will have common functionality to avoid duplication of functionality between services.\n     *\n     * @param {ItemService} Item\n     * @constructor\n     */\n    function ModelService(Item) {\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name ModelService\n         * @type {Object}\n         */\n        var factory = {};\n\n        /**\n         * @name data\n         * @propertyOf ModelService\n         * @type {ItemService}\n         */\n        factory.data = {};\n\n        /**\n         * @ngdoc method\n         * @name createInstance\n         * @methodOf ModelService\n         * @returns {(ModelService|Object)}\n         * @constructs\n         */\n        factory.createInstance = function () {\n            var instance = Object.create(this);\n            instance.data = Item.createInstance();\n\n            return instance;\n        };\n\n        /**\n         * @ngdoc method\n         * @name getData\n         * @methodOf ModelService\n         * @this factory\n         * @returns {Object}\n         */\n        factory.getData = function () {\n            return this.data.get();\n        };\n\n        /**\n         * @ngdoc method\n         * @name setData\n         * @methodOf ModelService\n         * @this factory\n         * @param value\n         */\n        factory.setData = function (value) {\n            this.data.set(value);\n        };\n\n        /**\n         * @ngdoc method\n         * @name setDataKey\n         * @methodOf ModelService\n         * @this factory\n         * @param key\n         * @param value\n         */\n        factory.setDataKey = function (key, value) {\n            this.data.setKey(key, value);\n        };\n\n        return factory;\n    }\n\n    services.factory('ModelService', ['ItemService', ModelService]);\n});\n\n//# sourceURL=/contact-summary/services/model.js"),eval("define('contact-summary/services/contactDetails',[\n    'common/lodash',\n    'common/moment',\n    'contact-summary/modules/services',\n    'contact-summary/modules/settings',\n    'contact-summary/services/api',\n    'contact-summary/services/model'\n], function (_, moment, services) {\n    'use strict';\n\n    /**\n     * @param Api\n     * @param {ModelService} Model\n     * @param settings\n     * @param $q\n     * @param $log\n     * @returns {*|Object|ModelService}\n     * @constructor\n     */\n    function ContactDetailsService($q, $log, Api, Model, settings) {\n        $log.debug('Service: ContactDetailsService');\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name ContactDetailsService\n         */\n        var factory = Model.createInstance();\n\n        /**\n         * @ngdoc method\n         * @name get\n         * @methodOf ContactDetailsService\n         * @this ContactDetailsService\n         * @returns {*}\n         */\n        factory.get = function () {\n            /** @type {(ContactDetailsService|ModelService)} */\n            var self = this;\n            var deferred = $q.defer();\n\n            init().then(function () {\n                deferred.resolve(self.getData());\n            });\n\n            return deferred.promise;\n        };\n\n        /////////////////////\n        // Private Members //\n        /////////////////////\n\n        function init() {\n            var deferred = $q.defer();\n\n            if (_.isEmpty(factory.getData())) {\n                var contactId = settings.contactId;\n\n                Api.get('Contact', {contact_id: contactId, return: 'birth_date'})\n                    .then(function (response) {\n                        if (response.values.length === 0) {\n                            throw new Error('Contact with ID ' + contactId + ' not found');\n                        }\n\n                        var dob = response.values[0].birth_date;\n                        var age = moment(dob, 'YYYY-MM-DD').isValid()\n                            ? calculateAge(dob)\n                            : '';\n\n                        factory.setDataKey('id', contactId);\n                        factory.setDataKey('dateOfBirth', dob);\n                        factory.setDataKey('age', age);\n\n                        deferred.resolve();\n                    })\n                    .catch(function (response) {\n                        deferred.reject(response);\n                    });\n            } else {\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }\n\n      /**\n       * Calculate age from birth date\n       *\n       * @param {string} dateOfBirth Date of birth in a YYYY-MM-DD format\n       * @returns {string}\n       */\n        function calculateAge(dateOfBirth) {\n            return moment().diff(moment(dateOfBirth, 'YYYY-MM-DD'), 'years');\n        }\n\n        return factory;\n    }\n\n    services.factory('ContactDetailsService', ['$q', '$log', 'ApiService', 'ModelService', 'settings', ContactDetailsService]);\n});\n\n//# sourceURL=/contact-summary/services/contactDetails.js"),eval("define('contact-summary/services/contract',[\n  'common/lodash',\n  'contact-summary/modules/services',\n  'contact-summary/services/api',\n  'contact-summary/services/contactDetails',\n  'contact-summary/services/model',\n], function (_, services) {\n  'use strict';\n\n    var promiseCache = {};\n\n  /**\n   * @param {ApiService} Api\n   * @param {ModelService} Model\n   * @param {ContactDetailsService} ContactDetails\n   * @param $q\n   * @param $log\n   * @returns {ModelService|Object|ItemService|*}\n   * @constructor\n   */\n  function ContractService($q, $log, Api, Model, ContactDetails) {\n    $log.debug('Service: Contract Service');\n\n    ////////////////////\n    // Public Members //\n    ////////////////////\n\n    /**\n     * TODO: Implement a collection and extend it instead\n     *\n     * @ngdoc service\n     * @name ContractService\n     */\n    //var factory = Model.createInstance();\n    var factory = {};\n\n    initializeCollection();\n\n    factory.getCollection = function () {\n      return this.collection.get();\n    };\n\n    /**\n     * @ngdoc method\n     * @name get\n     * @methodOf ContractService\n     * @returns {*}\n     */\n    factory.get = function () {\n      /** @type {(ContractService|ModelService)} */\n      var self = this;\n\n      return init().then(function () {\n        //return self.getData();\n        return self.getCollection();\n      });\n    };\n\n    /**\n     * A primary contract is:\n     * 1. (If exists) a contract with is_primary=1 that is active, or\n     * 2. The most recent contract that is active\n     *\n     * @ngdoc method\n     * @name getPrimary\n     * @methodOf ContractService\n     */\n    factory.getPrimary = function () {\n      return this.get().then(function (response) {\n        var sortedContracts = _.sortBy(response, function (o) {\n          return [o.end_date, +o.is_primary];\n        });\n\n        return _.last(sortedContracts) || {};\n      });\n    };\n\n    /**\n     * Reset contracts and promiseCache to initial state\n     * @ngdoc method\n     * @name resetContracts\n     * @methodOf ContractService\n     * @returns void\n     */\n    factory.resetContracts = function () {\n      contracts = [];\n      promiseCache = {};\n      initializeCollection();\n    };\n\n    factory.getContracts = function () {\n      var deferred = $q.defer();\n      if (_.isEmpty(contracts)) {\n        ContactDetails.get()\n          .then(function (response) {\n            var data = {\n              contact_id: response.id,\n              'api.HRJobContractRevision.getcurrentrevision': {jobcontract_id: '$value.id'}\n            };\n\n            return Api.get('HRJobContract', data);\n          })\n          .then(function (response) {\n            var activeContracts = response.values.filter(function (contract) {\n              return parseInt(contract.deleted) === 0;\n            });\n\n            if (activeContracts.length === 0) {\n              return deferred.reject('No job contract found');\n            }\n\n            contracts = activeContracts;\n\n            deferred.resolve(contracts);\n          })\n          .catch(function (response) {\n            deferred.reject(response);\n          });\n      } else {\n        deferred.resolve(contracts);\n      }\n\n      return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name getContractDetails\n     * @methodOf ContractService\n     * @param id\n     * @returns {*}\n     */\n    factory.getContractDetails = function (id) {\n      var addPay = function (details) {\n        var pay = {};\n\n        if (details.api_HRJobPay_get.values.length !== 0) {\n          pay.amount = details.api_HRJobPay_get.values[0].pay_amount;\n          pay.currency = details.api_HRJobPay_get.values[0].pay_currency;\n        }\n\n        details.pay = pay;\n      };\n\n      var addHours = function (details) {\n        var hours = {};\n\n        if (details.api_HRJobHour_get.values.length !== 0) {\n          hours.amount = details.api_HRJobHour_get.values[0].hours_amount;\n          hours.unit = details.api_HRJobHour_get.values[0].hours_unit;\n        }\n\n        details.hours = hours;\n      };\n\n      var data = {\n        jobcontract_id: id,\n        'api.HRJobPay.get': {'jobcontract_id': id},\n        'api.HRJobHour.get': {'jobcontract_id': id}\n      };\n\n      if (!promiseCache.getContractDetails) {\n            promiseCache.getContractDetails = Api.post('HRJobDetails', data, 'get')\n              .then(function (response) {\n                if (response.values.length === 0) {\n                  return $q.reject('No details found for contract revision with ID ' + id);\n                }\n\n                var details = response.values[0];\n\n                addPay(details);\n                addHours(details);\n\n                return details;\n              });\n          }\n\n          return promiseCache.getContractDetails;\n    };\n\n    /**\n     * Get an object containing 'days', 'months' and 'years' keys with\n     * integer values of total Length of Service value, for example:\n     * {\n     *   days: 9,\n     *   months: 2,\n     *   years: 0\n     * }\n     *\n     * @name getLengthOfService\n     * @methodOf ContractService\n     * @returns {*}\n     */\n    factory.getLengthOfService = function () {\n      var deferred = $q.defer();\n      ContactDetails.get()\n        .then(function (response) {\n          return Api.post(\n            'HRJobContract',\n            {\n              sequential: 0,\n              contact_id: response.id\n            },\n            'getlengthofserviceymd'\n          )\n        })\n        .then(function (response) {\n          if (!response.is_error) {\n            deferred.resolve(response.values);\n          } else {\n            deferred.reject(response);\n          }\n        })\n        .catch(function (response) {\n          deferred.reject(response);\n        });\n\n      return deferred.promise;\n    };\n\n    /////////////////////\n    // Private Members //\n    /////////////////////\n\n    var contracts = [];\n\n    function initializeCollection() {\n      factory.collection = {\n        items: {},\n        insertItem: function (key, item) {\n          this.items[key] = item;\n        },\n        getItem: function (key) {\n          return this.items[key];\n        },\n        set: function (collection) {\n          this.items = collection;\n        },\n        get: function () {\n          return this.items;\n        }\n      };\n    }\n\n    function init() {\n      var deferred = $q.defer();\n      if (_.isEmpty(factory.collection.get())) {\n        factory.getContracts()\n                .then(assembleContracts)\n                .finally(function () {\n                  deferred.resolve();\n                });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }\n\n    function assembleContracts() {\n      var deferred = $q.defer(), promises = [];\n\n      angular.forEach(contracts, function (contract) {\n        var assembledContract = {};\n\n        assembledContract.id = contract.id;\n        assembledContract.is_primary = contract.is_primary;\n        assembledContract.is_current = contract.is_current;\n        assembledContract.revision_id = null;\n\n        if (contract.api_HRJobContractRevision_getcurrentrevision) {\n          assembledContract.revision_id = contract.api_HRJobContractRevision_getcurrentrevision.values.id;\n        }\n\n        var promise = factory.getContractDetails(contract.id)\n          .then(function (response) {\n            assembledContract.title = response.title;\n            assembledContract.start_date = response.period_start_date;\n            assembledContract.end_date = response.period_end_date;\n            assembledContract.type = response.contract_type;\n            assembledContract.pay = response.pay;\n            assembledContract.hours = response.hours;\n          })\n          .then(function () {\n            factory.collection.insertItem(contract.id, assembledContract);\n          });\n\n        promises.push(promise);\n      });\n\n      $q.all(promises)\n        .catch(function (response) {\n          $log.error('Something went wrong', response);\n        })\n        .finally(function () {\n          deferred.resolve();\n        });\n\n      return deferred.promise;\n    }\n\n    return factory;\n  }\n\n  services.factory('ContractService', ['$q', '$log', 'ApiService', 'ModelService', 'ContactDetailsService', ContractService]);\n});\n\n//# sourceURL=/contact-summary/services/contract.js"),eval("define('contact-summary/services/jobRole',[\n    'common/lodash',\n    'contact-summary/modules/services',\n    'contact-summary/services/api',\n    'contact-summary/services/contract',\n    'contact-summary/services/model'\n], function (_, services) {\n    'use strict';\n\n    /**\n     * @param {ApiService} Api\n     * @param {ModelService} Model\n     * @param {ContractService} Contract\n     * @param $q\n     * @param $log\n     * @returns {ModelService|Object|*}\n     * @constructor\n     */\n    function JobRoleService($q, $log, Api, Model, Contract) {\n        $log.debug('Service: JobRoleService');\n\n        ////////////////////\n        // Public Members //\n        ////////////////////\n\n        /**\n         * @ngdoc service\n         * @name JobRoleService\n         */\n        //var factory = Model.createInstance();\n        var factory = {};\n\n        factory.collection = {\n            items: {},\n            insertItem: function (key, item) {\n                this.items[key] = item;\n            },\n            getItem: function (key) {\n                return this.items[key];\n            },\n            set: function (collection) {\n                this.items = collection;\n            },\n            get: function () {\n                return this.items;\n            }\n        };\n\n        factory.getCollection = function () {\n            return this.collection.get();\n        };\n\n        /**\n         * @ngdoc method\n         * @name get\n         * @methodOf JobRoleService\n         * @returns {*}\n         */\n        factory.get = function () {\n            /** @type {(JobRoleService|ModelService)} */\n            var self = this;\n\n            return init().then(function () {\n                return self.getCollection();\n            });\n        };\n\n        /////////////////////\n        // Private Members //\n        /////////////////////\n\n        function init() {\n            var deferred = $q.defer();\n\n            if (_.isEmpty(factory.collection.get())) {\n                Contract.get().then(function (response) {\n                    var contractIds = [];\n\n                    angular.forEach(response, function (contract) {\n                        contractIds.push(contract.id);\n                    });\n\n                    if (contractIds.length === 0) {\n                        return $q.reject('No job roles found for contracts');\n                    }\n\n                    Api.post('HrJobRoles', {job_contract_id: {'IN': contractIds}}, 'get')\n                        .then(function (response) {\n                            if (response.values.length === 0) {\n                                return $q.reject('No job roles found for contracts');\n                            }\n\n                        var roles = response.values.map(function (role) {\n                            return {\n                                id: role.id,\n                                title: role.title,\n                                department: role.department,\n                                status: role.status,\n                                start_date: role.start_date,\n                                end_date: role.end_date\n                            };\n                        });\n\n                        factory.collection.set(roles);\n                    })\n                    .finally(function () {\n                        deferred.resolve();\n                    });\n                });\n            } else {\n                deferred.resolve();\n            }\n\n            return deferred.promise;\n        }\n\n        return factory;\n    }\n\n    services.factory('JobRoleService', ['$q', '$log', 'ApiService', 'ModelService', 'ContractService', JobRoleService]);\n});\n\n//# sourceURL=/contact-summary/services/jobRole.js"),eval("define('contact-summary/controllers/keyDates',[\n  'common/moment',\n  'contact-summary/modules/controllers',\n  'contact-summary/services/contract',\n  'contact-summary/services/jobRole',\n  'common/services/pub-sub',\n], function (moment, controllers) {\n  'use strict';\n\n  /**\n   * Add the contract dates to the timeline\n   *\n   * @param {Object} contract\n   */\n  function addContractDates(contract) {\n    this.dates.push({\n      title: contract.title + ' (Start)',\n      date: contract.start_date,\n      future: isDateInFuture(contract.start_date)\n    });\n\n    if (contract.end_date) {\n      this.dates.push({\n        title: contract.title + ' (End)',\n        date: contract.end_date,\n        future: isDateInFuture(contract.end_date)\n      });\n    }\n  }\n\n  /**\n   * Checks if a date is in the future\n   *\n   * @param {string} date\n   * @return {boolean}\n   */\n  function isDateInFuture(date) {\n    return moment().diff(date) < 0;\n  }\n\n  /**\n   * @ngdoc controller\n   * @name KeyDatesCtrl\n   * @param $log\n   * @param {ContractService} Contract\n   * @param {JobRoleService} JobRole\n   * @param {pubSub} pubSub\n   * @constructor\n   */\n  function KeyDatesCtrl($log, Contract, JobRole, pubSub) {\n    $log.debug('Controller: KeyDatesCtrl');\n\n    var self = this;\n    this.ready = false;\n    this.dates = [];\n    this.activeContracts = 0;\n    this.activeRoles = 0;\n\n    /**\n     * Fetch Contacts from Server\n     * @ngdoc method\n     * @name getContacts\n     * @methodOf KeyDatesCtrl\n     * @returns void\n     */\n    var getContacts = function(){\n      Contract.get()\n        .then(function (response) {\n          angular.forEach(response, function (contract) {\n            addContractDates.call(self, contract);\n\n            if (contract.is_current === '1') {\n              self.activeContracts++;\n            };\n          });\n\n          return JobRole.get();\n        })\n        .then(function (response) {\n          angular.forEach(response, function (role) {\n            var endDate = moment(role.end_date);\n\n            if (!endDate.isValid() || isDateInFuture(endDate)) {\n              self.activeRoles++;\n            }\n          });\n        })\n        .finally(function () {\n          self.ready = true;\n        });\n    }.bind(this);\n\n    var resetKeyDates = function() {\n      this.dates= [];\n      getContacts();\n    }.bind(this);\n\n    getContacts();\n\n    pubSub.subscribe('contract-refresh',  resetKeyDates);\n  }\n\n  controllers.controller('KeyDatesCtrl', ['$log', 'ContractService', 'JobRoleService','pubSub', KeyDatesCtrl]);\n});\n\n//# sourceURL=/contact-summary/controllers/keyDates.js"),eval("define('contact-summary/controllers/keyDetails',[\n  'common/moment',\n  'contact-summary/modules/controllers',\n  'contact-summary/services/contactDetails',\n  'contact-summary/services/contract',\n  'common/services/pub-sub',\n], function (moment, controllers) {\n  'use strict';\n\n  /**\n   * @ngdoc controller\n   * @name KeyDetailsCtrl\n   * @param $log\n   * @param {ContactDetailsService} ContactDetails\n   * @param {ContractService} Contract\n   * @param {pubSub} pubSub\n   * @constructor\n   */\n  function KeyDetailsCtrl($log, ContactDetails, Contract, pubSub) {\n    $log.debug('Controller: KeyDetailsCtrl');\n\n    this.ready = false;\n\n\n    /**\n     * Fetch Contacts from Server\n     * @ngdoc method\n     * @name getContacts\n     * @methodOf KeyDetailsCtrl\n     * @returns void\n     */\n    var getContacts = function(){\n      ContactDetails.get()\n        .then(function (response) {\n          this.contactDetails = response;\n          return Contract.getPrimary();\n        }.bind(this))\n        .then(function (response) {\n          if (_.isEmpty(response)) {\n            this.primaryContract = null;\n            return;\n          }\n          this.primaryContract = response;\n        }.bind(this))\n        .then(function (response) {\n          return Contract.getLengthOfService();\n        })\n        .then(function (response) {\n          this.lengthOfService = response;\n        }\n          .bind(this))\n        .finally(function () {\n          this.ready = true;\n        }.bind(this));\n    }.bind(this);\n\n    var resetKeyDetails = function() {\n      Contract.resetContracts();\n      ContactDetails.data.item = {};\n      getContacts();\n    };\n\n    getContacts();\n\n    pubSub.subscribe('contract-refresh',  resetKeyDetails);\n  }\n\n  /////////////////////\n  // Private Members //\n  /////////////////////\n\n  controllers.controller('KeyDetailsCtrl', ['$log', 'ContactDetailsService', 'ContractService', 'pubSub', KeyDetailsCtrl]);\n});\n\n//# sourceURL=/contact-summary/controllers/keyDetails.js"),eval("define('contact-summary/modules/directives',[\n    'common/angular'\n], function (angular) {\n    'use strict';\n\n    return angular.module('contactsummary.directives', []);\n});\n\n//# sourceURL=/contact-summary/modules/directives.js"),eval("define('contact-summary/directives/donutChart',[\n    'common/d3',\n    'contact-summary/modules/directives'\n], function (d3, directives) {\n    'use strict';\n\n    function init($element) {\n        this.height = this.width = $element[0].clientWidth;\n        this.radius = this.width / 2 || 60;\n        this.thickness = this.thickness || 15;\n    }\n\n    function constructArc() {\n        return d3.svg.arc()\n            .innerRadius(this.radius - this.thickness)\n            .outerRadius(this.radius);\n    }\n\n    function constructChart(svg, arc, data) {\n        var color = d3.scale.category20();\n\n        return svg.selectAll('path')\n            .data(data)\n            .enter().append('path')\n            .attr('fill', function (d, i) {\n                return color(i);\n            })\n            .attr('class', function (d, i) {\n                return 'chart-color-' + i;\n            })\n            .attr('d', arc);\n    }\n\n    function constructData() {\n        var pieLayout = d3.layout.pie()\n            .sort(null)\n            .value(function (d) {\n                return d.value[this.itemKey];\n            }.bind(this));\n\n        return pieLayout(d3.entries(this.items));\n    }\n\n    function constructSvg($element) {\n        return d3.select($element).append('svg')\n            .attr('width', this.width)\n            .attr('height', this.height)\n            .append('g')\n            .attr('transform', 'translate(' + this.width / 2 + ',' + this.height / 2 + ')');\n    }\n\n\n    directives.directive('csDonutChart', ['$log', function ($log) {\n        $log.debug('Directive: csDonutChart');\n\n        return {\n            controllerAs: 'CsDonutChartCtrl',\n            restrict: 'AE',\n            scope: {\n                radius: '@',\n                thickness: '@',\n                items: '=',\n                itemKey: '@',\n                ready: '='\n            },\n            controller: ['$scope', '$element', function ($scope, $element) {\n                this.drawChart = function () {\n                    // angular.extend is necessary cause `bindToController` is\n                    // available only in angular > 1.3\n                    init.call(angular.extend(this, $scope), $element);\n\n                    constructChart(\n                        constructSvg.call(this, $element[0]),\n                        constructArc.call(this),\n                        constructData.call(this)\n                    );\n                };\n            }],\n            link: function (scope, elem, attrs, ctrl) {\n                var unbindWatch = scope.$watch(function () {\n                    return scope.ready;\n                }, function (newValue, oldValue) {\n                    if (newValue === true) {\n                        ctrl.drawChart();\n                        unbindWatch();\n                    }\n              });\n            }\n        };\n    }]);\n});\n\n//# sourceURL=/contact-summary/directives/donutChart.js"),eval("/* eslint-env amd */\n\ndefine('contact-summary/app',[\n  'common/angular',\n  'leave-absences/shared/components/leave-widget/leave-widget.component',\n  'contact-summary/modules/filters',\n  'contact-summary/modules/services',\n  'contact-summary/modules/settings',\n  'contact-summary/controllers/contactSummary',\n  'contact-summary/controllers/keyDates',\n  'contact-summary/controllers/keyDetails',\n  'contact-summary/directives/donutChart'\n], function (angular) {\n  var app = angular.module('contactsummary', [\n    'ngRoute',\n    'ngResource',\n    'ui.bootstrap',\n    'common.services',\n    'leave-absences.components.leave-widget',\n    'contactsummary.controllers',\n    'contactsummary.directives',\n    'contactsummary.filters',\n    'contactsummary.services',\n    'contactsummary.settings'\n  ]);\n\n  app.config(['settings', '$routeProvider', '$resourceProvider', '$httpProvider', '$logProvider',\n    function (settings, $routeProvider, $resourceProvider, $httpProvider, $logProvider) {\n      $logProvider.debugEnabled(settings.debug);\n\n      $routeProvider\n        .when('/', {\n          controller: 'ContactSummaryCtrl',\n          controllerAs: 'ContactSummaryCtrl',\n          templateUrl: settings.pathBaseUrl + settings.pathTpl + 'mainTemplate.html',\n          resolve: {}\n        }\n      ).otherwise({redirectTo: '/'});\n\n      $resourceProvider.defaults.stripTrailingSlashes = false;\n      $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n    }\n  ]);\n\n  app.run(['settings', '$rootScope', '$q', '$log',\n    function (settings, $rootScope, $q, $log) {\n      $log.debug('app.run');\n\n      $rootScope.pathTpl = settings.pathTpl;\n      $rootScope.prefix = settings.classNamePrefix;\n    }\n  ]);\n});\n\n//# sourceURL=/contact-summary/app.js"),
eval("(function (CRM, require) {\n  require.config({\n    urlArgs: 'bust=' + (new Date()).getTime(),\n    paths: {\n      'contact-summary': CRM.vars.contactsummary.baseURL + '/js/src/contact-summary'\n    }\n  });\n\n  require(['contact-summary/app'], function () {\n    document.dispatchEvent(typeof window.CustomEvent == \"function\" ? new CustomEvent('contactsummaryReady') : (function () {\n      var e = document.createEvent('Event');\n      e.initEvent('contactsummaryReady', true, true);\n      return e;\n    })());\n  });\n})(CRM, require);\n\n//# sourceURL=/contact-summary.js");
//# sourceMappingURL=contact-summary.min.js.map