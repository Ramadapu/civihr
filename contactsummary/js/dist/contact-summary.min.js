define('contact-summary/modules/filters',[
    'common/angular'
], function (angular) {
    'use strict';

    return angular.module('contactsummary.filters', []);
});

define('contact-summary/modules/services',[
    'common/angular'
], function (angular) {
    'use strict';

    return angular.module('contactsummary.services', []);
});

define('contact-summary/modules/settings',[
    'common/angular'
], function (angular) {
    'use strict';

    return angular.module('contactsummary.settings', []).constant('settings', {
        classNamePrefix: 'contactSummary-',
        contactId: decodeURIComponent((new RegExp('[?|&]cid=([^&;]+?)(&|#|;|$)').exec(location.search) || [, ""])[1].replace(/\+/g, '%20')) || null,
        debug: true,
        pathApp: '',
        pathRest: CRM.url('civicrm/ajax/rest'),
        pathBaseUrl: CRM.vars.contactsummary.baseURL + '/',
        // pathRest: '/index.php?q=civicrm/ajax/rest',
        // pathBaseUrl: 'http://localhost:8900/sites/all/modules/civicrm/tools/extensions/civihr/contactsummary/',
        pathTpl: 'views/'
    });
})
;
define('contact-summary/modules/controllers',[
    'common/angular'
], function (angular) {
    'use strict';

    return angular.module('contactsummary.controllers', []);
});

define('contact-summary/services/item',[
    'common/moment',
    'contact-summary/modules/services'
], function (moment, services) {
    'use strict';

    /**
     * @constructor
     */
    function ItemService() {

        ////////////////////
        // Public Members //
        ////////////////////

        /**
         * @ngdoc service
         * @name ItemService
         */
        var factory = {};

        /**
         * @ngdoc method
         * @name createInstance
         * @methodOf ItemService
         * @returns {(Object|ItemService)}
         */
        factory.createInstance = function () {
            var instance = Object.create(this);
            instance.item = {};

            return instance;
        };

        /**
         * @ngdoc method
         * @name get
         * @methodOf ItemService
         * @returns {Object}
         */
        factory.get = function () {
            return this.item;
        };

        /**
         * @ngdoc method
         * @name set
         * @methodOf ItemService
         * @param data
         */
        factory.set = function (data) {
            if (!angular.isObject(data)) {
                throw new TypeError('Data must be of type Object');
            }

            this.item = data;
        };

        /**
         * @ngdoc method
         * @name setKey
         * @methodOf ItemService
         * @param key
         * @param value
         */
        factory.setKey = function (key, value) {
            this.item[key] = value;
        };

        return factory;
    }

    services.factory('ItemService', ItemService);
});

define('contact-summary/services/model',[
    'contact-summary/modules/services',
    'contact-summary/services/item'
], function (services) {
    'use strict';

    /**
     * Base service to extend.
     *
     * This will have common functionality to avoid duplication of functionality between services.
     *
     * @param {ItemService} Item
     * @constructor
     */
    function ModelService(Item) {

        ////////////////////
        // Public Members //
        ////////////////////

        /**
         * @ngdoc service
         * @name ModelService
         * @type {Object}
         */
        var factory = {};

        /**
         * @name data
         * @propertyOf ModelService
         * @type {ItemService}
         */
        factory.data = {};

        /**
         * @ngdoc method
         * @name createInstance
         * @methodOf ModelService
         * @returns {(ModelService|Object)}
         * @constructs
         */
        factory.createInstance = function () {
            var instance = Object.create(this);
            instance.data = Item.createInstance();

            return instance;
        };

        /**
         * @ngdoc method
         * @name getData
         * @methodOf ModelService
         * @this factory
         * @returns {Object}
         */
        factory.getData = function () {
            return this.data.get();
        };

        /**
         * @ngdoc method
         * @name setData
         * @methodOf ModelService
         * @this factory
         * @param value
         */
        factory.setData = function (value) {
            this.data.set(value);
        };

        /**
         * @ngdoc method
         * @name setDataKey
         * @methodOf ModelService
         * @this factory
         * @param key
         * @param value
         */
        factory.setDataKey = function (key, value) {
            this.data.setKey(key, value);
        };

        return factory;
    }

    services.factory('ModelService', ['ItemService', ModelService]);
});

define('contact-summary/services/api',[
    'contact-summary/modules/services'
], function (services) {
    'use strict';

    services.factory('ApiService', ['$http', '$q', function ($http, $q) {

        /**
         * @ngdoc function
         * @param entityName
         * @param data
         * @param action
         * @param stringify
         * @returns {*}
         * @private
         */
        function buildData(entityName, data, action, stringify) {
            if (!angular.isDefined(entityName)) {
                throw new Error('Entity name not provided');
            }

            if (!angular.isDefined(action)) {
                throw new Error('Action not provided');
            }

            data = angular.extend({
                entity: entityName,
                action: action,
                sequential: 1,
                json: 1,
                rowCount: 0
            }, data);

            // Because data needs to be sent as string for CiviCRM to accept
            return (!!stringify ? jQuery.param(data) : data);
        }

        /**
         * @ngdoc function
         * @param method
         * @param data
         * @param config
         * @returns {HttpPromise}
         * @private
         */
        function sendRequest(method, data, config) {
            config = angular.extend({
                cache: true,
                method: method,
                url: '/civicrm/ajax/rest'
            }, (method === 'post' ? { data: data } : { params: data }), config);

            return $http(config)
                .then(function (response) {
                    if (response.is_error) {
                        return $q.reject(response);
                    }

                    return response.data;
                })
                .catch(function (response) {
                    return response;
                });
        }

        return {
            /**
             * @ngdoc method
             * @name get
             * @methodOf ApiService
             * @param entityName
             * @param data
             * @param config
             * @returns {*}
             */
            get: function (entityName, data, config) {
                return sendRequest('get', buildData(entityName, data, 'get'), config);
            },

            /**
             * @ngdoc method
             * @name post
             * @methodOf ApiService
             * @param entityName
             * @param data
             * @param action
             * @param config
             * @returns {HttpPromise}
             */
            post: function (entityName, data, action, config) {
                config = angular.extend({
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
                }, config);

                return sendRequest('post', buildData(entityName, data, action, true), config);
            },

            getValue: function (entityName, data) {
                // todo
            },

            create: function (entityName, data) {
                // todo
            },

            update: function (entityName, data) {
                // todo
            },

            delete: function (entityName, data) {
                // todo
            }
        }
    }]);
});

define('contact-summary/services/contactDetails',[
    'common/lodash',
    'common/moment',
    'contact-summary/modules/services',
    'contact-summary/modules/settings',
    'contact-summary/services/api',
    'contact-summary/services/model'
], function (_, moment, services) {
    'use strict';

    /**
     * @param Api
     * @param {ModelService} Model
     * @param settings
     * @param $q
     * @param $log
     * @returns {*|Object|ModelService}
     * @constructor
     */
    function ContactDetailsService($q, $log, Api, Model, settings) {
        $log.debug('Service: ContactDetailsService');

        ////////////////////
        // Public Members //
        ////////////////////

        /**
         * @ngdoc service
         * @name ContactDetailsService
         */
        var factory = Model.createInstance();

        /**
         * @ngdoc method
         * @name get
         * @methodOf ContactDetailsService
         * @this ContactDetailsService
         * @returns {*}
         */
        factory.get = function () {
            /** @type {(ContactDetailsService|ModelService)} */
            var self = this;
            var deferred = $q.defer();

            init().then(function () {
                deferred.resolve(self.getData());
            });

            return deferred.promise;
        };

        /////////////////////
        // Private Members //
        /////////////////////

        function init() {
            var deferred = $q.defer();

            if (_.isEmpty(factory.getData())) {
                var contactId = settings.contactId;

                Api.get('Contact', {contact_id: contactId, return: 'birth_date'})
                    .then(function (response) {
                        if (response.values.length === 0) {
                            throw new Error('Contact with ID ' + contactId + ' not found');
                        }

                        var dob = response.values[0].birth_date;
                        var age = moment(dob, 'YYYY-MM-DD').isValid()
                            ? moment(moment(dob, 'YYYY-MM-DD')).fromNow(true)
                            : '';

                        factory.setDataKey('id', contactId);
                        factory.setDataKey('dateOfBirth', dob);
                        factory.setDataKey('age', age);

                        deferred.resolve();
                    })
                    .catch(function (response) {
                        deferred.reject(response);
                    });
            } else {
                deferred.resolve();
            }

            return deferred.promise;
        }

        return factory;
    }

    services.factory('ContactDetailsService', ['$q', '$log', 'ApiService', 'ModelService', 'settings', ContactDetailsService]);
});

define('contact-summary/services/leave',[
    'common/lodash',
    'contact-summary/modules/services',
    'common/moment',
    'contact-summary/services/api',
    'contact-summary/services/model',
    'contact-summary/services/contactDetails'
], function (_, services, moment) {
    'use strict';

    /**
    *
    * @param {ApiService} Api
    * @param {ModelService} Model
    * @param {ContactDetailsService} ContactDetails
    * @param $q
    * @param $log
    * @returns {ModelService|Object|*}
    * @constructor
    */

    function LeaveService($q, $log, $filter, Api, Model, ContactDetails) {
        $log.debug('Service: LeaveService');

        ////////////////////
        // Public Members //
        ////////////////////

        /**
         * @ngdoc service
         * @name LeaveService
         */
        var factory = {};

        factory.collection = {
            items: {},
            insertItem: function (key, item) {
                this.items[key] = item;
            },
            getItem: function (key) {
                return this.items[key];
            },
            set: function (collection) {
                this.items = collection;
            },
            get: function () {
                return this.items;
            }
        };

        factory.getCollection = function () {
            return this.collection.get();
        };

        factory.getCurrentPeriod = function () {
            return getPeriods()
                .then(function (response) {
                    var period = {}, now = moment();

                    for (var i = 0; i < response.length; i++) {
                        var start = moment(response[i].start_date, 'YYYY-MM-DD HH:mm:ss'),
                            end = moment(response[i].end_date, 'YYYY-MM-DD HH:mm:ss');

                        if (now.diff(start) >= 0 && now.diff(end) <= 0) {
                            period = response[i];
                        }
                    }

                    return period;
                });
        };


        /**
         * @ngdoc method
         * @name get
         * @methodOf LeaveService
         * @returns {*}
         */
        factory.get = function () {
            /** @type {(LeaveService|ModelService)} */
            var self = this;

            return init(periodId).then(function () {
                return self.getData();
            });
        };

        factory.getCurrent = function () {
            /** @type {(LeaveService|ModelService)} */
            var self = this;
            var deferred = $q.defer(), periodId;

            factory.getCurrentPeriod()
                .then(function (response) {
                    if (response.hasOwnProperty('id')) {
                        periodId = response.id;

                        init(periodId).then(function () {
                            deferred.resolve(self.collection.getItem(periodId));
                        });
                    } else {
                        deferred.resolve({});
                    }
                });

            return deferred.promise;
        };

        factory.getPrevious = function () {
            /** @type {(LeaveService|ModelService)} */
            var self = this;
            var deferred = $q.defer(), periodId;

            getPreviousPeriod()
                .then(function (response) {
                    if (response.hasOwnProperty('id')) {
                        periodId = response.id;

                        init(periodId).then(function () {
                            deferred.resolve(self.collection.getItem(periodId));
                        })
                    } else {
                        deferred.resolve({});
                    }
                });

            return deferred.promise;
        };

        /**
         * @ngdoc method
         * @name getEntitlement
         * @methodOf LeaveService
         */
        factory.getEntitlement = function (periodId) {
            var deferred = $q.defer();

            ContactDetails.get()
                .then(function (response) {
                    var data = {
                        contact_id: response.id,
                        period_id: periodId,
                        options: { 'absence-range': 1 }
                    };

                    return Api.get('HRAbsenceEntitlement', data);
                })
                .then(function (response) {
                    if (response.values.length === 0) {
                        return {};
                    }

                    entitlements = response.values;

                    deferred.resolve(entitlements);
                });

            return deferred.promise;
        };

        /**
         * @ngdoc method
         * @name getAbsences
         * @methodOf LeaveService
         * @returns {*}
         */
        factory.getAbsences = function (periodId) {
            var deferred = $q.defer();

            ContactDetails.get()
                .then(function (response) {
                    var data = {
                        target_contact_id: response.id,
                        period_id: [periodId],
                        options: {'absence-range': 1},
                        sequential: 0 // this is *important* in order to get absences in correct format!
                    };

                    return Api.post('Activity', data, 'getabsences');
                })
                .then(function (response) {
                    absences = _.filter(response.values, function (absence) {
                        return absence.status_id === '2';
                    });

                    deferred.resolve(absences);
                });

            return deferred.promise;
        };

        //var deferreds = {};

        /**
         * @ngdoc method
         * @name getAbsenceTypes
         * @methodOf LeaveService
         */
        factory.getAbsenceTypes = function () {
            // todo
            //if (!deferreds.hasOwnProperty('absenceTypes')) {
            //  deferreds.absenceTypes = $q.defer();
            //}

            var deferred = $q.defer();

            if (_.isEmpty(absenceTypes)) {
                Api.get('HRAbsenceType').then(function (response) {
                    if (response.values.length === 0) {
                        throw new Error('No absence type not found');
                    }

                    absenceTypes = response.values;

                    deferred.resolve(absenceTypes);
                });
            } else {
                deferred.resolve(absenceTypes);
            }

            return deferred.promise;
        };

        /**
         * @ngdoc method
         * @name getStaffAverage
         * @methodOf LeaveService
         * @returns {*}
         */
        factory.getStaffAverage = function (type) {
            var deferred = $q.defer(), days = 0;

            factory.getCurrentPeriod()
                .then(function (response) {
                    if (response.hasOwnProperty('id')) {
                        var periodId = response.id;

                        Api.post('ContactSummary', {absence_types: type, period_id: periodId}, 'getabsenceaggregate')
                            .then(function (response) {
                                if (response.values.length === 0) {
                                    return $q.reject('Staff average not returned');
                                }

                                var hours = Math.ceil(response.values[0].result / 60),
                                    days = +(hours / 8).toFixed(1);

                                deferred.resolve(days);
                            });
                    } else {
                        deferred.resolve(days);
                    }
                });

            return deferred.promise;
        };

        factory.getDepartmentAverage = function () {
            // todo: need to revisit this once it has been decided which department to show the average for.
        };

        /////////////////////
        // Private Members //
        /////////////////////

        var absenceTypes = [], absences, entitlements, periods;

        function getPreviousPeriod() {
            var currentPeriod, previousPeriod = {};

            return factory.getCurrentPeriod()
                .then(function (response) {
                    currentPeriod = response;

                    return getPeriods();
                })
                .then(function (response) {
                    var currentPeriodIndex = response.indexOf(currentPeriod);

                    if (currentPeriodIndex !== -1 && currentPeriodIndex > 0) {
                        previousPeriod = response[currentPeriodIndex - 1];
                    }

                    return previousPeriod;
                });
        }

        function init(periodId) {
            var deferred = $q.defer();

            if (_.isEmpty(factory.collection.getItem(periodId))) {
                factory.getAbsenceTypes()
                    .then(function () {
                        return factory.getAbsences(periodId);
                    })
                    .then(function () {
                        return factory.getEntitlement(periodId);
                    })
                    .then(function () {
                        return assembleLeave(periodId);
                    })
                    .then(function () {
                        deferred.resolve();
                    })
                    .catch(function (response) {
                        $log.debug('An error has occurred', response);
                        deferred.reject(response);
                    });
            } else {
                deferred.resolve();
            }

            return deferred.promise;
        }

        function getPeriods() {
            var deferred = $q.defer();

            if (_.isEmpty(periods)) {
                Api.get('HRAbsencePeriod')
                    .then(function (response) {
                        if (response.values.length === 0) {
                            return deferred.reject('No absence periods found');
                        }

                        periods = response.values;
                        periods = $filter('orderBy')(periods, 'start_date');

                        deferred.resolve(periods);
                    })
                    .catch(function (response) {
                        $log.debug('An error has occurred', response);
                        deferred.reject(response);
                    });
            } else {
                deferred.resolve(periods);
            }

            return deferred.promise;
        }

        function assembleLeave(periodId) {
            assembleAbsenceTypes(periodId);
            assembleEntitlements(periodId);
            assembleAbsences(periodId);
        }

        function assembleAbsenceTypes(periodId) {
            var data = factory.collection.getItem(periodId) || {};

            angular.forEach(absenceTypes, function (type) {
                if (type.is_active !== '1') {
                    return;
                }

                var typeId = type.id;

                if (!data.hasOwnProperty(typeId)) data[typeId] = {};

                data[typeId].type_id = typeId;
                data[typeId].title = type.title;
                data[typeId].credit_activity_type_id = type.credit_activity_type_id ? type.credit_activity_type_id : null;
                data[typeId].debit_activity_type_id = type.debit_activity_type_id ? type.debit_activity_type_id : null;

                // Initialise remaining keys
                data[typeId].entitled = 0;
                data[typeId].taken = 0;
            });

            factory.collection.insertItem(periodId, data);

            //if (_.size(data)) factory.setData(data); // todo
        }

        function assembleEntitlements(periodId) {
            var data = factory.collection.getItem(periodId);

            angular.forEach(entitlements, function (entitlement) {
                var typeId = entitlement.type_id;

                if (!data.hasOwnProperty(typeId)) {
                    return;
                }

                // Because we don't want to show entitlements for TOIL - they will only include
                // accrued TOIL days.
                if (data[typeId].title.toLowerCase() !== 'toil') {
                    data[typeId].entitled = +entitlement.amount;
                }
            });

            factory.collection.insertItem(periodId, data);

            //if (_.size(data)) factory.setData(data); // todo
        }

        function assembleAbsences(periodId) {
            var data = factory.collection.getItem(periodId);
            var absenceActivityTypeLookup = {};

            angular.forEach(absenceTypes, function (type) {
                if (type.credit_activity_type_id) {
                    absenceActivityTypeLookup[type.credit_activity_type_id] = type.id;
                }

                if (type.debit_activity_type_id) {
                    absenceActivityTypeLookup[type.debit_activity_type_id] = type.id;
                }
            });

            angular.forEach(absences, function (absence) {
                var typeId;

                if (absenceActivityTypeLookup.hasOwnProperty(absence.activity_type_id)) {
                    typeId = absenceActivityTypeLookup[absence.activity_type_id];
                }

                if (typeId) {
                    if (!data.hasOwnProperty(typeId)) return;

                    var hours = Math.ceil(absence.absence_range.approved_duration / 60),
                        days = +(hours / 8).toFixed(1);

                    if (data[typeId].title.toLowerCase() === 'toil') {
                        if (absence.activity_type_id === data[typeId].credit_activity_type_id) {
                            data[typeId].entitled += days;
                        } else {
                            data[typeId].taken += days;
                        }
                    } else {
                        data[typeId].taken += days;
                    }
                }
            });

            factory.collection.insertItem(periodId, data);

            //if (_.size(data)) factory.setData(data); // todo
        }

        return factory;
    }

    services.factory('LeaveService', ['$q', '$log', '$filter', 'ApiService', 'ModelService', 'ContactDetailsService', LeaveService]);
});

define('contact-summary/services/contract',[
    'common/lodash',
    'contact-summary/modules/services',
    'contact-summary/services/api',
    'contact-summary/services/contactDetails',
    'contact-summary/services/model',
], function (_, services) {
    'use strict';

    /**
     * @param {ApiService} Api
     * @param {ModelService} Model
     * @param {ContactDetailsService} ContactDetails
     * @param $q
     * @param $log
     * @returns {ModelService|Object|ItemService|*}
     * @constructor
     */
    function ContractService($q, $log, Api, Model, ContactDetails) {
        $log.debug('Service: Contract Service');

        ////////////////////
        // Public Members //
        ////////////////////

        /**
        * TODO: Implement a collection and extend it instead
        *
        * @ngdoc service
        * @name ContractService
        */
        //var factory = Model.createInstance();
        var factory = {};

        factory.collection = {
            items: {},
            insertItem: function (key, item) {
                this.items[key] = item;
            },
            getItem: function (key) {
                return this.items[key];
            },
            set: function (collection) {
                this.items = collection;
            },
            get: function () {
                return this.items;
            }
        };

        factory.getCollection = function () {
            return this.collection.get();
        };

        /**
         * @ngdoc method
         * @name get
         * @methodOf ContractService
         * @returns {*}
         */
        factory.get = function () {
            /** @type {(ContractService|ModelService)} */
            var self = this;

            return init().then(function () {
                //return self.getData();
                return self.getCollection();
            });
        };

        /**
         * A primary contract is:
         * 1. (If exists) a contract with is_primary=1 that is active, or
         * 2. The most recent contract that is active
         *
         * @ngdoc method
         * @name getPrimary
         * @methodOf ContractService
         */
        factory.getPrimary = function () {
            return this.get().then(function (response) {
                var sortedContracts = _.sortBy(response, function (o) {
                    return [o.end_date, +o.is_primary];
                });

                return _.last(sortedContracts) || {};
            });
        };

        /**
         * @ngdoc method
         * @name getContracts
         * @methodOf ContractService
         * @returns {*}
         */
        factory.getContracts = function () {
            var deferred = $q.defer();

            if (_.isEmpty(contracts)) {
                ContactDetails.get()
                    .then(function (response) {
                        var data = {
                            contact_id: response.id,
                            'api.HRJobContractRevision.getcurrentrevision': { jobcontract_id: '$value.id' }
                        };

                        return Api.get('HRJobContract', data);
                    })
                    .then(function (response) {
                        var activeContracts = response.values.filter(function (contract) {
                            return parseInt(contract.deleted) === 0;
                        });

                        if (activeContracts.length === 0) {
                            return deferred.reject('No job contract found');
                        }

                        contracts = activeContracts;

                        deferred.resolve(contracts);
                    })
                    .catch(function (response) {
                        deferred.reject(response);
                    });
            } else {
                deferred.resolve(contracts);
            }

            return deferred.promise;
        };

        /**
         * @ngdoc method
         * @name getContractDetails
         * @methodOf ContractService
         * @param id
         * @returns {*}
         */
        factory.getContractDetails = function (id) {
            var addPay = function (details) {
                var pay = {};

                if (details.api_HRJobPay_get.values.length !== 0) {
                    pay.amount = details.api_HRJobPay_get.values[0].pay_amount;
                    pay.currency = details.api_HRJobPay_get.values[0].pay_currency;
                }

                details.pay = pay;
            };

            var addHours = function (details) {
                var hours = {};

                if (details.api_HRJobHour_get.values.length !== 0) {
                    hours.amount = details.api_HRJobHour_get.values[0].hours_amount;
                    hours.unit = details.api_HRJobHour_get.values[0].hours_unit;
                }

                details.hours = hours;
            };

            var data = {
                jobcontract_id: id,
                'api.HRJobPay.get': { 'jobcontract_id': id },
                'api.HRJobHour.get': { 'jobcontract_id': id }
            };

            return Api.post('HRJobDetails', data, 'get')
                .then(function (response) {
                    if (response.values.length === 0) {
                        return $q.reject('No details found for contract revision with ID ' + id);
                    }

                    var details = response.values[0];

                    addPay(details);
                    addHours(details);

                    return details;
                });
        };

        /////////////////////
        // Private Members //
        /////////////////////

        var contracts = [];

        function init() {
            var deferred = $q.defer();

            if (_.isEmpty(factory.collection.get())) {
                factory.getContracts()
                    .then(assembleContracts)
                    .finally(function () {
                        deferred.resolve();
                    });
            } else {
                deferred.resolve();
            }

            return deferred.promise;
        }

        function assembleContracts() {
            var deferred = $q.defer(), promises = [];

            angular.forEach(contracts, function (contract) {
                var assembledContract = {};

                assembledContract.id = contract.id;
                assembledContract.is_primary = contract.is_primary;
                assembledContract.is_current = contract.is_current;
                assembledContract.revision_id = null;

                if (contract.api_HRJobContractRevision_getcurrentrevision) {
                    assembledContract.revision_id = contract.api_HRJobContractRevision_getcurrentrevision.values.id;
                }

                var promise = factory.getContractDetails(contract.id)
                    .then(function (response) {
                        assembledContract.title = response.title;
                        assembledContract.start_date = response.period_start_date;
                        assembledContract.end_date = response.period_end_date;
                        assembledContract.type = response.contract_type;
                        assembledContract.pay = response.pay;
                        assembledContract.hours = response.hours;
                    })
                    .then(function () {
                        factory.collection.insertItem(contract.id, assembledContract);
                    });

                promises.push(promise);
            });

            $q.all(promises)
                .catch(function (response) {
                    $log.error('Something went wrong', response);
                })
                .finally(function () {
                    deferred.resolve();
                });

            return deferred.promise;
        }

        return factory;
    }

    services.factory('ContractService', ['$q', '$log', 'ApiService', 'ModelService', 'ContactDetailsService', ContractService]);
});

define('contact-summary/services/contact',[
    'common/lodash',
    'contact-summary/modules/services',
    'contact-summary/services/model',
    'contact-summary/services/leave',
    'contact-summary/services/contactDetails',
    'contact-summary/services/contract'
], function (_, services) {
    'use strict';

    /**
     * @param {ModelService} Model
     * @param ContactDetails
     * @param {LeaveService} Leave
     * @param {ContractService} Contract
     * @param $q
     * @param $log
     * @returns {Object}
     * @constructor
     */
    function ContactService($log, $q, Model, ContactDetails, Leave, Contract) {
        $log.debug('Service: ContactService');

        ////////////////////
        // Public Members //
        ////////////////////

        /**
         * @ngdoc service
         * @name ContactService
         */
        var factory = Model.createInstance();

        /**
         * @ngdoc method
         * @name get
         * @methodOf ContactService
         * @returns {*}
         */
        factory.get = function () {
            /** @type {(ContactService|ModelService)} */
            var self = this;

            return init().then(function () {
                return self.getData();
            });
        };

        return factory;

        /////////////////////
        // Private Members //
        /////////////////////

        function init() {
            var deferred = $q.defer();

            if (_.isEmpty(factory.getData())) {
                initContactDetails()
                    .then(initContract)
                    .then(initLeave)
                    .then(function () {
                        deferred.resolve();
                    });
            } else {
                deferred.resolve();
            }

            return deferred.promise;
        }

        function initContactDetails() {
            return ContactDetails.get()
                .then(function (response) {
                    factory.setDataKey('id', response.id);
                    factory.setDataKey('dateOfBirth', response.dateOfBirth);
                    factory.setDataKey('age', response.age);
                });
        }

        function initContract() {
            return Contract.get()
                .then(function (response) {
                    factory.setDataKey('contract', response);
                });
        }

        function initLeave() {
            return Leave.get()
                .then(function (response) {
                    factory.setDataKey('leave', response);
                });
        }
    }

    services.factory('ContactService', ['$log', '$q', 'ModelService', 'ContactDetailsService', 'LeaveService', 'ContractService', ContactService]);
});

define('contact-summary/controllers/contactSummary',[    'contact-summary/modules/controllers',    'contact-summary/modules/settings',    'contact-summary/services/contact'], function (controllers) {    'use strict';    /**     * @ngdoc controller     * @name ContactSummaryCtrl     * @param $log     * @param {ContactService} Contact     * @param settings     * @constructor     */    function ContactSummaryCtrl($log, Contact, settings) {        $log.debug('Controller: ContactSummaryCtrl');        var templateDir = settings.pathBaseUrl + settings.pathTpl;        this.partials = {            keyDetails: templateDir + '/include/keyDetails.html',            keyDates: templateDir + '/include/keyDates.html',            leave: templateDir + '/include/leave.html',            sickness: templateDir + '/include/sickness.html'        };        this.ready = false;        // Contact.get().then(function (response) {        //     $log.debug('Contact', response);        //     this.contact = response;        //     this.ready = true;        // }.bind(this));    }    controllers.controller('ContactSummaryCtrl', ['$log', 'ContactService', 'settings', ContactSummaryCtrl]);});
define('contact-summary/services/jobRole',[
    'common/lodash',
    'contact-summary/modules/services',
    'contact-summary/services/api',
    'contact-summary/services/contract',
    'contact-summary/services/model'
], function (_, services) {
    'use strict';

    /**
     * @param {ApiService} Api
     * @param {ModelService} Model
     * @param {ContractService} Contract
     * @param $q
     * @param $log
     * @returns {ModelService|Object|*}
     * @constructor
     */
    function JobRoleService($q, $log, Api, Model, Contract) {
        $log.debug('Service: JobRoleService');

        ////////////////////
        // Public Members //
        ////////////////////

        /**
         * @ngdoc service
         * @name JobRoleService
         */
        //var factory = Model.createInstance();
        var factory = {};

        factory.collection = {
            items: {},
            insertItem: function (key, item) {
                this.items[key] = item;
            },
            getItem: function (key) {
                return this.items[key];
            },
            set: function (collection) {
                this.items = collection;
            },
            get: function () {
                return this.items;
            }
        };

        factory.getCollection = function () {
            return this.collection.get();
        };

        /**
         * @ngdoc method
         * @name get
         * @methodOf JobRoleService
         * @returns {*}
         */
        factory.get = function () {
            /** @type {(JobRoleService|ModelService)} */
            var self = this;

            return init().then(function () {
                return self.getCollection();
            });
        };

        /////////////////////
        // Private Members //
        /////////////////////

        function init() {
            var deferred = $q.defer();

            if (_.isEmpty(factory.collection.get())) {
                Contract.get().then(function (response) {
                    var contractIds = [];

                    angular.forEach(response, function (contract) {
                        contractIds.push(contract.id);
                    });

                    if (contractIds.length === 0) {
                        return $q.reject('No job roles found for contracts');
                    }

                    Api.post('HrJobRoles', {job_contract_id: {'IN': contractIds}}, 'get')
                        .then(function (response) {
                            if (response.values.length === 0) {
                                return $q.reject('No job roles found for contracts');
                            }

                        var roles = response.values.map(function (role) {
                            return {
                                id: role.id,
                                title: role.title,
                                department: role.department,
                                status: role.status,
                                start_date: role.start_date,
                                end_date: role.end_date
                            };
                        });

                        factory.collection.set(roles);
                    })
                    .finally(function () {
                        deferred.resolve();
                    });
                });
            } else {
                deferred.resolve();
            }

            return deferred.promise;
        }

        return factory;
    }

    services.factory('JobRoleService', ['$q', '$log', 'ApiService', 'ModelService', 'ContractService', JobRoleService]);
});

define('contact-summary/controllers/keyDates',[
    'common/moment',
    'contact-summary/modules/controllers',
    'contact-summary/services/contract',
    'contact-summary/services/jobRole'
], function (moment, controllers) {
    'use strict';

    /**
     * Add the contract dates to the timeline
     *
     * @param {Object} contract
     */
    function addContractDates(contract) {
        this.dates.push({
            title: contract.title + ' (Start)',
            date: contract.start_date,
            future: isDateInFuture(contract.start_date)
        });

        if (contract.end_date) {
            this.dates.push({
                title: contract.title + ' (End)',
                date: contract.end_date,
                future: isDateInFuture(contract.end_date)
            });
        }
    }

    /**
     * Checks if a date is in the future
     *
     * @param {string} date
     * @return {boolean}
     */
    function isDateInFuture(date) {
        return moment().diff(date) < 0;
    }

    /**
     * @ngdoc controller
     * @name KeyDatesCtrl
     * @param $log
     * @param {ContractService} Contract
     * @param {JobRoleService} JobRole
     * @constructor
     */
    function KeyDatesCtrl($log, Contract, JobRole) {
        $log.debug('Controller: KeyDatesCtrl');

        var self = this;
        this.ready = false;
        this.dates = [];
        this.activeContracts = 0;
        this.activeRoles = 0;

        Contract.get()
            .then(function (response) {
                angular.forEach(response, function (contract) {
                    addContractDates.call(self, contract);

                    if (contract.is_current === '1') {
                        self.activeContracts++;
                    };
                });

                return JobRole.get();
            })
            .then(function (response) {
                angular.forEach(response, function (role) {
                    var endDate = moment(role.end_date);

                    if (!endDate.isValid() || isDateInFuture(endDate)) {
                        self.activeRoles++;
                    }
                });
            })
            .finally(function () {
                self.ready = true;
            });
    }

    controllers.controller('KeyDatesCtrl', ['$log', 'ContractService', 'JobRoleService', KeyDatesCtrl]);
});

define('contact-summary/controllers/keyDetails',[
    'common/moment',
    'contact-summary/modules/controllers',
    'contact-summary/services/contactDetails',
    'contact-summary/services/contract'
], function (moment, controllers) {
'use strict';

    /**
     * @ngdoc controller
     * @name KeyDetailsCtrl
     * @param $log
     * @param {ContactDetailsService} ContactDetails
     * @param {ContractService} Contract
     * @constructor
     */
    function KeyDetailsCtrl($log, ContactDetails, Contract) {
        $log.debug('Controller: KeyDetailsCtrl');

        this.ready = false;

        ContactDetails.get()
            .then(function (response) {
                this.contactDetails = response;

                return Contract.getPrimary();
            }.bind(this))
            .then(function (response) {
                if (_.isEmpty(response)) {
                    return;
                }

                this.primaryContract = response;
                this.primaryContract.lengthOfService = getLengthOfService(response.start_date, response.end_date);
            }.bind(this))
            .finally(function () {
                this.ready = true;
            }.bind(this));
    }

    /////////////////////
    // Private Members //
    /////////////////////

    function getLengthOfService(start, end) {
        var now = moment();

        start = moment(start, 'YYYY-MM-DD');
        end = end ? moment(end, 'YYYY-MM-DD') : now;

        if(end.isAfter(now)) {
            end = now;
        }

        var lengthOfService = moment.duration(end.diff(start));

        return {
            days: lengthOfService.days(),
            months: lengthOfService.months(),
            years: lengthOfService.years()
        };
    }

    controllers.controller('KeyDetailsCtrl', ['$log', 'ContactDetailsService', 'ContractService', KeyDetailsCtrl]);
});

define('contact-summary/controllers/leave',[
    'common/d3',
    'contact-summary/modules/controllers',
    'contact-summary/services/leave'
], function (d3, controllers) {
    'use strict';

    /**
     * @ngdoc controller
     * @name LeaveCtrl
     * @param $log
     * @param {LeaveService} Leave
     * @constructor
     */
    function LeaveCtrl($log, Leave) {
        $log.debug('Controller: LeaveCtrl');

        var self = this;

        this.leaves = [];
        this.toil = {};
        this.totalEntitlement = 0;
        this.totalTaken = 0;
        this.ready = false;
        this.chartColors = d3.scale.category20();

        Leave.getCurrent()
            .then(function (response) {
                angular.forEach(response, function (leave) {
                    if (leave.title !== 'Sick') {
                        if (leave.title === 'TOIL') {
                            self.toil = leave;
                        } else {
                            self.totalEntitlement += leave.entitled;
                            self.totalTaken += leave.taken;
                            self.leaves.push(leave);
                        }
                    }
                });
            })
            .finally(function () {
                self.ready = true;
            });
    }

    controllers.controller('LeaveCtrl', ['$log', 'LeaveService', LeaveCtrl]);
});

define('contact-summary/controllers/sickness',[
    'contact-summary/modules/controllers',
    'contact-summary/services/leave'
], function (controllers) {
    'use strict';

    /**
     * @ngdoc controller
     * @name SicknessCtrl
     * @param $log
     * @param {LeaveService} Leave
     * @constructor
     */
    function SicknessCtrl($log, Leave) {
        $log.debug('Controller: SicknessCtrl');

        var self = this;

        this.taken = 0;
        this.takenPreviously = 0;
        this.staffAverage = 0;
        this.ready = false;
        this.currentPeriod = '-';

        Leave.getStaffAverage('sick')
            .then(function (response) {
                self.staffAverage = response;

                return Leave.getCurrent();
            })
            .then(function (response) {
                angular.forEach(response, function (leave) {
                    if (leave.title === 'Sick') {
                        self.taken = leave.taken;
                    }
                });

                return Leave.getPrevious();
            })
            .then(function (response) {
                angular.forEach(response, function (leave) {
                    if (leave.title === 'Sick') {
                        self.takenPreviously = leave.taken;
                    }
                });

                return Leave.getCurrentPeriod();
            })
            .then(function (response) {
                self.currentPeriod = response.title;
            })
            .finally(function () {
                self.ready = true;
            });
    }

    controllers.controller('SicknessCtrl', ['$log', 'LeaveService', SicknessCtrl]);
});

define('contact-summary/modules/directives',[
    'common/angular'
], function (angular) {
    'use strict';

    return angular.module('contactsummary.directives', []);
});

define('contact-summary/directives/donutChart',[
    'common/d3',
    'contact-summary/modules/directives'
], function (d3, directives) {
    'use strict';

    function init($element) {
        this.height = this.width = $element[0].clientWidth;
        this.radius = this.width / 2 || 60;
        this.thickness = this.thickness || 15;
    }

    function constructArc() {
        return d3.svg.arc()
            .innerRadius(this.radius - this.thickness)
            .outerRadius(this.radius);
    }

    function constructChart(svg, arc, data) {
        var color = d3.scale.category20();

        return svg.selectAll('path')
            .data(data)
            .enter().append('path')
            .attr('fill', function (d, i) {
                return color(i);
            })
            .attr('class', function (d, i) {
                return 'chart-color-' + i;
            })
            .attr('d', arc);
    }

    function constructData() {
        var pieLayout = d3.layout.pie()
            .sort(null)
            .value(function (d) {
                return d.value[this.itemKey];
            }.bind(this));

        return pieLayout(d3.entries(this.items));
    }

    function constructSvg($element) {
        return d3.select($element).append('svg')
            .attr('width', this.width)
            .attr('height', this.height)
            .append('g')
            .attr('transform', 'translate(' + this.width / 2 + ',' + this.height / 2 + ')');
    }


    directives.directive('csDonutChart', ['$log', function ($log) {
        $log.debug('Directive: csDonutChart');

        return {
            controllerAs: 'CsDonutChartCtrl',
            restrict: 'AE',
            scope: {
                radius: '@',
                thickness: '@',
                items: '=',
                itemKey: '@',
                ready: '='
            },
            controller: ['$scope', '$element', function ($scope, $element) {
                this.drawChart = function () {
                    // angular.extend is necessary cause `bindToController` is
                    // available only in angular > 1.3
                    init.call(angular.extend(this, $scope), $element);

                    constructChart(
                        constructSvg.call(this, $element[0]),
                        constructArc.call(this),
                        constructData.call(this)
                    );
                };
            }],
            link: function (scope, elem, attrs, ctrl) {
                var unbindWatch = scope.$watch(function () {
                    return scope.ready;
                }, function (newValue, oldValue) {
                    if (newValue === true) {
                        ctrl.drawChart();
                        unbindWatch();
                    }
              });
            }
        };
    }]);
});

define('contact-summary/app',[
    'common/angular',
    'contact-summary/modules/filters',
    'contact-summary/modules/services',
    'contact-summary/modules/settings',
    'contact-summary/controllers/contactSummary',
    'contact-summary/controllers/keyDates',
    'contact-summary/controllers/keyDetails',
    'contact-summary/controllers/leave',
    'contact-summary/controllers/sickness',
    'contact-summary/directives/donutChart'
], function (angular) {
    var app = angular.module('contactsummary', [
        'ngRoute',
        'ngResource',
        'ui.bootstrap',
        'contactsummary.controllers',
        'contactsummary.directives',
        'contactsummary.filters',
        'contactsummary.services',
        'contactsummary.settings'
    ]);

    app.config(['settings', '$routeProvider', '$resourceProvider', '$httpProvider', '$logProvider',
        function (settings, $routeProvider, $resourceProvider, $httpProvider, $logProvider) {
            $logProvider.debugEnabled(settings.debug);

            $routeProvider.
                when('/', {
                    controller: 'ContactSummaryCtrl',
                    controllerAs: 'ContactSummaryCtrl',
                    templateUrl: settings.pathBaseUrl + settings.pathTpl + 'mainTemplate.html',
                    resolve: {}
                }
            ).otherwise({redirectTo: '/'});

            $resourceProvider.defaults.stripTrailingSlashes = false;

            $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
        }
    ]);

    app.run(['settings', '$rootScope', '$q', '$log',
        function (settings, $rootScope, $q, $log) {
            $log.debug('app.run');

            $rootScope.pathTpl = settings.pathTpl;
            $rootScope.prefix = settings.classNamePrefix;
        }
    ]);
});

require.config({
    urlArgs: 'bust=' + (new Date()).getTime(),
    paths: {
        'contact-summary': CRM.vars.contactsummary.baseURL + '/js/src/contact-summary'
    }
});

require(['contact-summary/app'], function () {
    angular.bootstrap(document.getElementById('contactsummary'), ['contactsummary']);
});

