eval("/* eslint-env amd */\n\ndefine('access-rights/apis/rights.api',[],function () {\n  'use strict';\n\n  RightsAPI.__name = 'RightsAPI';\n  RightsAPI.$inject = ['api', '$q', 'beforeHashQueryParams'];\n\n  function RightsAPI (api, $q, beforeHashQueryParams) {\n    var entityName = 'Rights';\n    var queryParams = beforeHashQueryParams.parse();\n    var additionalParams = {\n      'contact_id': queryParams.cid\n    };\n    return api.extend({\n      getLocations: function () {\n        return this.sendGET(entityName, 'getlocations', additionalParams, false);\n      },\n      getRegions: function () {\n        return this.sendGET(entityName, 'getregions', additionalParams, false);\n      },\n      deleteByIds: function (ids) {\n        return $q.all(ids.map(function (id) {\n          return this.sendPOST(entityName, 'delete', {\n            'contact_id': queryParams.cid,\n            'id': id\n          });\n        }.bind(this)));\n      },\n      saveRegions: function (ids) {\n        return $q.all(ids.map(function (id) {\n          return this.sendPOST(entityName, 'create', {\n            'contact_id': queryParams.cid,\n            'entity_id': id,\n            'entity_type': 'hrjc_region'\n          });\n        }.bind(this)));\n      },\n      saveLocations: function (ids) {\n        return $q.all(ids.map(function (id) {\n          return this.sendPOST(entityName, 'create', {\n            'contact_id': queryParams.cid,\n            'entity_id': id,\n            'entity_type': 'hrjc_location'\n          });\n        }.bind(this)));\n      }\n    });\n  }\n\n  return RightsAPI;\n});\n\n//# sourceURL=/access-rights/apis/rights.api.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/modules/access-rights.apis',[\n  'common/angular',\n  'common/services/api',\n  'access-rights/apis/rights.api'\n], function (angular, __, RightsAPI) {\n  'use strict';\n\n  return angular.module('access-rights.apis', ['common.apis'])\n    .factory(RightsAPI.__name, RightsAPI);\n});\n\n//# sourceURL=/access-rights/modules/access-rights.apis.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/modules/access-rights.config',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('access-rights.config', []).config(config);\n\n  config.$inject = ['$httpProvider'];\n\n  function config ($httpProvider) {\n    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\n  }\n});\n\n//# sourceURL=/access-rights/modules/access-rights.config.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/controllers/access-rights.controller',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  AccessRightsController.__name = 'AccessRightsController';\n  AccessRightsController.$inject = ['$rootElement', '$uibModal'];\n\n  function AccessRightsController ($rootElement, $modal) {\n    var vm = this;\n\n    vm.openModal = openModal;\n\n    /**\n     * Opens the permissions modal\n     */\n    function openModal () {\n      $modal.open({\n        appendTo: angular.element('[data-contact-actions-modals-container]'),\n        controller: 'AccessRightsModalController',\n        controllerAs: 'modalCtrl',\n        bindToController: true,\n        templateUrl: CRM.vars.contactAccessRights.baseURL + '/views/access-rights-modal.html'\n      });\n    }\n  }\n\n  return AccessRightsController;\n});\n\n//# sourceURL=/access-rights/controllers/access-rights.controller.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/controllers/access-rights-modal.controller',[\n  'common/lodash'\n], function (_) {\n  'use strict';\n\n  AccessRightsModalController.__name = 'AccessRightsModalController';\n  AccessRightsModalController.$inject = ['$q', '$uibModalInstance', 'Region', 'Location', 'Right'];\n\n  function AccessRightsModalController ($q, $modalInstance, Region, Location, Right) {\n    var vm = this;\n\n    vm.dataLoaded = false;\n    vm.errorMsg = '';\n    vm.submitting = false;\n    vm.availableData = {\n      regions: [],\n      locations: []\n    };\n    vm.originalData = {\n      locations: [],\n      regions: []\n    };\n    vm.selectedData = {\n      locations: [],\n      regions: []\n    };\n\n    vm.cancel = cancel;\n    vm.submit = submit;\n\n    (function init () {\n      $q.all([\n        Region.getAll(),\n        Location.getAll()\n      ])\n      .then(function (values) {\n        return {\n          regions: values[0],\n          locations: values[1]\n        };\n      })\n      .then(function (values) {\n        return $q.all(_.map(values, function (value, key) {\n          vm.availableData[key] = value;\n          return Right['get' + _.capitalize(key)]();\n        }));\n      })\n      .then(function (values) {\n        return {\n          regions: values[0],\n          locations: values[1]\n        };\n      })\n      .then(function (values) {\n        Object.keys(values).forEach(function (key) {\n          vm.originalData[key] = values[key].values;\n          vm.selectedData[key] = values[key].values.map(function (entity) {\n            return entity.entity_id;\n          });\n        });\n      })\n      .then(function () {\n        vm.dataLoaded = true;\n      });\n    }());\n\n    /**\n     * Closes the modal\n     */\n    function cancel () {\n      $modalInstance.dismiss('cancel');\n    }\n\n    /**\n     * Saves the new values, and deletes the removed ones\n     *\n     * @param  {string} type  Either \"regions\" or \"locations\"\n     * @return {Promise}      The result of all promises\n     */\n    function persistValues (type) {\n      var originalData = vm.originalData[type];\n      var selectedData = vm.selectedData[type];\n\n      var originalEntityIds = originalData.map(function (i) {\n        return i.entity_id;\n      });\n      var newEntityIds = _.difference(selectedData, originalEntityIds);\n      var removedRightIds = _.difference(originalEntityIds, selectedData)\n        .map(function (entityId) {\n          return _.find(originalData, function (i) {\n            return i.entity_id === entityId;\n          }).id;\n        });\n\n      var promises = [];\n\n      if (newEntityIds.length > 0) {\n        promises.push(Right['save' + _.capitalize(type)](newEntityIds));\n      }\n      if (removedRightIds.length > 0) {\n        promises.push(Right.deleteByIds(removedRightIds));\n      }\n\n      return $q.all(promises);\n    }\n\n    /**\n     * Saves data and closes the modal\n     */\n    function submit () {\n      vm.submitting = true;\n\n      $q.all([persistValues('regions'), persistValues('locations')])\n        .then(function () {\n          $modalInstance.dismiss('cancel');\n        })\n        .catch(function () {\n          vm.errorMsg = 'Error while saving data';\n        })\n        .finally(function () {\n          vm.submitting = true;\n        });\n    }\n  }\n\n  return AccessRightsModalController;\n});\n\n//# sourceURL=/access-rights/controllers/access-rights-modal.controller.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/modules/access-rights.controllers',[\n  'common/angular',\n  'access-rights/controllers/access-rights.controller',\n  'access-rights/controllers/access-rights-modal.controller'\n], function (angular, AccessRightsController, AccessRightsModalController) {\n  'use strict';\n\n  return angular.module('access-rights.controllers', [])\n    .controller(AccessRightsController.__name, AccessRightsController)\n    .controller(AccessRightsModalController.__name, AccessRightsModalController);\n});\n\n//# sourceURL=/access-rights/modules/access-rights.controllers.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/modules/access-rights.core',[\n  'common/angular',\n  'common/ui-select',\n  'common/angularBootstrap',\n  'common/modules/xeditable-civi',\n  'common/directives/loading',\n  'common/services/before-hash-query-params.service'\n], function (angular) {\n  'use strict';\n\n  angular.module('access-rights.core', [\n    'ngAnimate',\n    'ui.bootstrap',\n    'ui.select',\n    'xeditable-civi',\n    'common.directives',\n    'common.services'\n  ]);\n});\n\n//# sourceURL=/access-rights/modules/access-rights.core.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/models/location.model',[\n  'common/services/api/option-group'\n], function () {\n  'use strict';\n\n  Location.__name = 'Location';\n  Location.$inject = ['Model', 'api.optionGroup'];\n\n  function Location (Model, OptionGroup) {\n    return Model.extend({\n      getAll: function () {\n        return OptionGroup.valuesOf('hrjc_location');\n      }\n    });\n  }\n\n  return Location;\n});\n\n//# sourceURL=/access-rights/models/location.model.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/models/region.model',[\n  'common/services/api/option-group'\n], function () {\n  'use strict';\n\n  Region.__name = 'Region';\n  Region.$inject = ['Model', 'api.optionGroup'];\n\n  function Region (Model, OptionGroup) {\n    return Model.extend({\n      getAll: function () {\n        return OptionGroup.valuesOf('hrjc_region');\n      }\n    });\n  }\n\n  return Region;\n});\n\n//# sourceURL=/access-rights/models/region.model.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/models/right.model',[],function () {\n  'use strict';\n\n  Right.__name = 'Right';\n  Right.$inject = ['Model', 'RightsAPI'];\n\n  function Right (Model, RightsAPI) {\n    return Model.extend({\n      getLocations: RightsAPI.getLocations.bind(RightsAPI),\n      getRegions: RightsAPI.getRegions.bind(RightsAPI),\n      deleteByIds: RightsAPI.deleteByIds.bind(RightsAPI),\n      saveRegions: RightsAPI.saveRegions.bind(RightsAPI),\n      saveLocations: RightsAPI.saveLocations.bind(RightsAPI)\n    });\n  }\n\n  return Right;\n});\n\n//# sourceURL=/access-rights/models/right.model.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/modules/access-rights.models',[\n  'common/angular',\n  'access-rights/models/location.model',\n  'access-rights/models/region.model',\n  'access-rights/models/right.model',\n  'common/models/model',\n  'access-rights/modules/access-rights.apis'\n], function (angular, Location, Region, Right) {\n  'use strict';\n\n  return angular.module('access-rights.models', [\n    'common.models',\n    'access-rights.apis'\n  ])\n  .factory(Location.__name, Location)\n  .factory(Region.__name, Region)\n  .factory(Right.__name, Right);\n});\n\n//# sourceURL=/access-rights/modules/access-rights.models.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/modules/access-rights.run',[\n  'common/angular'\n], function (angular) {\n  'use strict';\n\n  angular.module('access-rights.run', []).run(run);\n\n  run.$inject = ['$log', 'editableOptions', 'editableThemes'];\n\n  function run ($log, editableOptions, editableThemes) {\n    $log.debug('app.run');\n    editableOptions.theme = 'bs3';\n  }\n});\n\n//# sourceURL=/access-rights/modules/access-rights.run.js"),eval("/* eslint-env amd */\n\ndefine('access-rights/modules/access-rights.module',[\n  'common/angular',\n  'access-rights/modules/access-rights.apis',\n  'access-rights/modules/access-rights.config',\n  'access-rights/modules/access-rights.controllers',\n  'access-rights/modules/access-rights.core',\n  'access-rights/modules/access-rights.models',\n  'access-rights/modules/access-rights.run'\n], function (angular) {\n  'use strict';\n\n  angular.module('access-rights', [\n    'access-rights.core',\n    'access-rights.config',\n    'access-rights.run',\n    'access-rights.apis',\n    'access-rights.controllers',\n    'access-rights.models'\n  ]);\n\n  return angular;\n});\n\n//# sourceURL=/access-rights/modules/access-rights.module.js"),eval("/* eslint-env amd */\n/* global Event */\n\n(function () {\n  'use strict';\n\n  var extPath = CRM.vars.contactAccessRights.baseURL + '/js/src/access-rights';\n  require.config({\n    urlArgs: 'bust=' + (new Date()).getTime(),\n    paths: {\n      'access-rights': extPath\n    }\n  });\n\n  require([\n    'access-rights/modules/access-rights.module'\n  ], function (angular) {\n    document.dispatchEvent(new Event('accessRightsReady'));\n  });\n})(require);\n\n//# sourceURL=/access-rights.js");
//# sourceMappingURL=access-rights.min.js.map